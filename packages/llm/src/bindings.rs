#[allow(dead_code)]
pub mod wavs {
    #[allow(dead_code)]
    pub mod agent {
        #[allow(dead_code, clippy::all)]
        pub mod errors {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Possible error types that can occur during agent operations
            #[derive(Clone)]
            pub enum AgentError {
                /// API error
                Api(_rt::String),
                /// HTTP error
                Http(_rt::String),
                /// External service error
                ExternalService(_rt::String),
                /// Configuration errors
                Config(_rt::String),
                /// Contract error
                Contract(_rt::String),
                /// Error related to configuration parsing or validation
                Configuration(_rt::String),
                /// Error when loading context from URI or environment
                ContextLoading(_rt::String),
                /// Error when validating context
                ContextValidation(_rt::String),
                /// Error during LLM processing
                Llm(_rt::String),
                /// IO errors from std::io
                Io(_rt::String),
                /// Error related to transaction generation or validation
                Transaction(_rt::String),
                /// UTF-8 decoding error
                Utf8(_rt::String),
                /// Other general errors
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for AgentError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AgentError::Api(e) => {
                            f.debug_tuple("AgentError::Api").field(e).finish()
                        }
                        AgentError::Http(e) => {
                            f.debug_tuple("AgentError::Http").field(e).finish()
                        }
                        AgentError::ExternalService(e) => {
                            f.debug_tuple("AgentError::ExternalService")
                                .field(e)
                                .finish()
                        }
                        AgentError::Config(e) => {
                            f.debug_tuple("AgentError::Config").field(e).finish()
                        }
                        AgentError::Contract(e) => {
                            f.debug_tuple("AgentError::Contract").field(e).finish()
                        }
                        AgentError::Configuration(e) => {
                            f.debug_tuple("AgentError::Configuration").field(e).finish()
                        }
                        AgentError::ContextLoading(e) => {
                            f.debug_tuple("AgentError::ContextLoading").field(e).finish()
                        }
                        AgentError::ContextValidation(e) => {
                            f.debug_tuple("AgentError::ContextValidation")
                                .field(e)
                                .finish()
                        }
                        AgentError::Llm(e) => {
                            f.debug_tuple("AgentError::Llm").field(e).finish()
                        }
                        AgentError::Io(e) => {
                            f.debug_tuple("AgentError::Io").field(e).finish()
                        }
                        AgentError::Transaction(e) => {
                            f.debug_tuple("AgentError::Transaction").field(e).finish()
                        }
                        AgentError::Utf8(e) => {
                            f.debug_tuple("AgentError::Utf8").field(e).finish()
                        }
                        AgentError::Other(e) => {
                            f.debug_tuple("AgentError::Other").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for AgentError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for AgentError {}
        }
        #[allow(dead_code, clippy::all)]
        pub mod common {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Function definition for tool calls
            #[derive(Clone)]
            pub struct Function {
                pub name: _rt::String,
                pub description: Option<_rt::String>,
                pub parameters: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Function {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Function")
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("parameters", &self.parameters)
                        .finish()
                }
            }
            /// Tool definition for chat completions
            #[derive(Clone)]
            pub struct Tool {
                pub tool_type: _rt::String,
                pub function: Function,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("tool-type", &self.tool_type)
                        .field("function", &self.function)
                        .finish()
                }
            }
            /// Function call details
            #[derive(Clone)]
            pub struct ToolCallFunction {
                pub name: _rt::String,
                pub arguments: _rt::String,
            }
            impl ::core::fmt::Debug for ToolCallFunction {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolCallFunction")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
            /// Tool call for chat completions
            #[derive(Clone)]
            pub struct ToolCall {
                pub id: _rt::String,
                pub tool_type: _rt::String,
                pub function: ToolCallFunction,
            }
            impl ::core::fmt::Debug for ToolCall {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolCall")
                        .field("id", &self.id)
                        .field("tool-type", &self.tool_type)
                        .field("function", &self.function)
                        .finish()
                }
            }
            /// Common message structure for chat completions
            #[derive(Clone)]
            pub struct Message {
                pub role: _rt::String,
                pub content: Option<_rt::String>,
                pub tool_calls: Option<_rt::Vec<ToolCall>>,
                pub tool_call_id: Option<_rt::String>,
                pub name: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Message")
                        .field("role", &self.role)
                        .field("content", &self.content)
                        .field("tool-calls", &self.tool_calls)
                        .field("tool-call-id", &self.tool_call_id)
                        .field("name", &self.name)
                        .finish()
                }
            }
            /// Handler for custom tool calls
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CustomToolHandler {
                handle: _rt::Resource<CustomToolHandler>,
            }
            impl CustomToolHandler {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CustomToolHandler {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wavs:agent/common")]
                        extern "C" {
                            #[link_name = "[resource-drop]custom-tool-handler"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl CustomToolHandler {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns true if this handler can handle the given tool name
                pub fn can_handle(&self, tool_name: &str) -> bool {
                    unsafe {
                        let vec0 = tool_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/common")]
                        extern "C" {
                            #[link_name = "[method]custom-tool-handler.can-handle"]
                            fn wit_import(_: i32, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                        );
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl CustomToolHandler {
                #[allow(unused_unsafe, clippy::all)]
                /// Execute the tool call and return a result
                pub fn execute(
                    &self,
                    tool_call: &ToolCall,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ToolCall {
                            id: id0,
                            tool_type: tool_type0,
                            function: function0,
                        } = tool_call;
                        let vec1 = id0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = tool_type0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let ToolCallFunction { name: name3, arguments: arguments3 } = function0;
                        let vec4 = name3;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        let vec5 = arguments3;
                        let ptr5 = vec5.as_ptr().cast::<u8>();
                        let len5 = vec5.len();
                        let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/common")]
                        extern "C" {
                            #[link_name = "[method]custom-tool-handler.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr4.cast_mut(),
                            len4,
                            ptr5.cast_mut(),
                            len5,
                            ptr6,
                        );
                        let l7 = i32::from(*ptr6.add(0).cast::<u8>());
                        match l7 {
                            0 => {
                                let e = {
                                    let l8 = *ptr6.add(4).cast::<*mut u8>();
                                    let l9 = *ptr6.add(8).cast::<usize>();
                                    let len10 = l9;
                                    let bytes10 = _rt::Vec::from_raw_parts(
                                        l8.cast(),
                                        len10,
                                        len10,
                                    );
                                    _rt::string_lift(bytes10)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l11 = *ptr6.add(4).cast::<*mut u8>();
                                    let l12 = *ptr6.add(8).cast::<usize>();
                                    let len13 = l12;
                                    let bytes13 = _rt::Vec::from_raw_parts(
                                        l11.cast(),
                                        len13,
                                        len13,
                                    );
                                    _rt::string_lift(bytes13)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
        #[allow(dead_code, clippy::all)]
        pub mod contracts {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type AgentError = super::super::super::wavs::agent::errors::AgentError;
            /// Represents a smart contract that the DAO can interact with
            #[derive(Clone)]
            pub struct Contract {
                pub name: _rt::String,
                pub address: _rt::String,
                pub abi: _rt::String,
                pub description: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Contract {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Contract")
                        .field("name", &self.name)
                        .field("address", &self.address)
                        .field("abi", &self.abi)
                        .field("description", &self.description)
                        .finish()
                }
            }
            /// Represents a contract function call
            #[derive(Clone)]
            pub struct ContractCall {
                pub function: _rt::String,
                pub args: _rt::Vec<_rt::String>,
            }
            impl ::core::fmt::Debug for ContractCall {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ContractCall")
                        .field("function", &self.function)
                        .field("args", &self.args)
                        .finish()
                }
            }
            /// Represents a transaction to be executed through a wallet
            #[derive(Clone)]
            pub struct Transaction {
                pub to: _rt::String,
                pub value: _rt::String,
                pub contract_call: Option<ContractCall>,
                pub data: _rt::String,
                pub description: _rt::String,
            }
            impl ::core::fmt::Debug for Transaction {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Transaction")
                        .field("to", &self.to)
                        .field("value", &self.value)
                        .field("contract-call", &self.contract_call)
                        .field("data", &self.data)
                        .field("description", &self.description)
                        .finish()
                }
            }
            /// Helper methods for contracts
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct ContractManager {
                handle: _rt::Resource<ContractManager>,
            }
            impl ContractManager {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for ContractManager {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wavs:agent/contracts")]
                        extern "C" {
                            #[link_name = "[resource-drop]contract-manager"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            /// Transaction management
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct TransactionManager {
                handle: _rt::Resource<TransactionManager>,
            }
            impl TransactionManager {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for TransactionManager {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wavs:agent/contracts")]
                        extern "C" {
                            #[link_name = "[resource-drop]transaction-manager"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl ContractManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a new Contract instance
                pub fn new(&self, name: &str, address: &str, abi: &str) -> Contract {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 36]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 36],
                        );
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = address;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = abi;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/contracts")]
                        extern "C" {
                            #[link_name = "[method]contract-manager.new"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr3,
                        );
                        let l4 = *ptr3.add(0).cast::<*mut u8>();
                        let l5 = *ptr3.add(4).cast::<usize>();
                        let len6 = l5;
                        let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                        let l7 = *ptr3.add(8).cast::<*mut u8>();
                        let l8 = *ptr3.add(12).cast::<usize>();
                        let len9 = l8;
                        let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                        let l10 = *ptr3.add(16).cast::<*mut u8>();
                        let l11 = *ptr3.add(20).cast::<usize>();
                        let len12 = l11;
                        let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                        let l13 = i32::from(*ptr3.add(24).cast::<u8>());
                        Contract {
                            name: _rt::string_lift(bytes6),
                            address: _rt::string_lift(bytes9),
                            abi: _rt::string_lift(bytes12),
                            description: match l13 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l14 = *ptr3.add(28).cast::<*mut u8>();
                                        let l15 = *ptr3.add(32).cast::<usize>();
                                        let len16 = l15;
                                        let bytes16 = _rt::Vec::from_raw_parts(
                                            l14.cast(),
                                            len16,
                                            len16,
                                        );
                                        _rt::string_lift(bytes16)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        }
                    }
                }
            }
            impl ContractManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a new Contract instance with description
                pub fn new_with_description(
                    &self,
                    name: &str,
                    address: &str,
                    abi: &str,
                    description: &str,
                ) -> Contract {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 36]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 36],
                        );
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = address;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = abi;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec3 = description;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/contracts")]
                        extern "C" {
                            #[link_name = "[method]contract-manager.new-with-description"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr3.cast_mut(),
                            len3,
                            ptr4,
                        );
                        let l5 = *ptr4.add(0).cast::<*mut u8>();
                        let l6 = *ptr4.add(4).cast::<usize>();
                        let len7 = l6;
                        let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                        let l8 = *ptr4.add(8).cast::<*mut u8>();
                        let l9 = *ptr4.add(12).cast::<usize>();
                        let len10 = l9;
                        let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                        let l11 = *ptr4.add(16).cast::<*mut u8>();
                        let l12 = *ptr4.add(20).cast::<usize>();
                        let len13 = l12;
                        let bytes13 = _rt::Vec::from_raw_parts(l11.cast(), len13, len13);
                        let l14 = i32::from(*ptr4.add(24).cast::<u8>());
                        Contract {
                            name: _rt::string_lift(bytes7),
                            address: _rt::string_lift(bytes10),
                            abi: _rt::string_lift(bytes13),
                            description: match l14 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l15 = *ptr4.add(28).cast::<*mut u8>();
                                        let l16 = *ptr4.add(32).cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        _rt::string_lift(bytes17)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        }
                    }
                }
            }
            impl ContractManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Parse the JSON ABI to JsonAbi struct
                pub fn parse_abi(
                    &self,
                    contract: &Contract,
                ) -> Result<_rt::String, AgentError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let Contract {
                            name: name0,
                            address: address0,
                            abi: abi0,
                            description: description0,
                        } = contract;
                        let vec1 = name0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = address0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec3 = abi0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let (result5_0, result5_1, result5_2) = match description0 {
                            Some(e) => {
                                let vec4 = e;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                (1i32, ptr4.cast_mut(), len4)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/contracts")]
                        extern "C" {
                            #[link_name = "[method]contract-manager.parse-abi"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr3.cast_mut(),
                            len3,
                            result5_0,
                            result5_1,
                            result5_2,
                            ptr6,
                        );
                        let l7 = i32::from(*ptr6.add(0).cast::<u8>());
                        match l7 {
                            0 => {
                                let e = {
                                    let l8 = *ptr6.add(4).cast::<*mut u8>();
                                    let l9 = *ptr6.add(8).cast::<usize>();
                                    let len10 = l9;
                                    let bytes10 = _rt::Vec::from_raw_parts(
                                        l8.cast(),
                                        len10,
                                        len10,
                                    );
                                    _rt::string_lift(bytes10)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l11 = i32::from(*ptr6.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V51;
                                    let v51 = match l11 {
                                        0 => {
                                            let e51 = {
                                                let l12 = *ptr6.add(8).cast::<*mut u8>();
                                                let l13 = *ptr6.add(12).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V51::Api(e51)
                                        }
                                        1 => {
                                            let e51 = {
                                                let l15 = *ptr6.add(8).cast::<*mut u8>();
                                                let l16 = *ptr6.add(12).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            V51::Http(e51)
                                        }
                                        2 => {
                                            let e51 = {
                                                let l18 = *ptr6.add(8).cast::<*mut u8>();
                                                let l19 = *ptr6.add(12).cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            V51::ExternalService(e51)
                                        }
                                        3 => {
                                            let e51 = {
                                                let l21 = *ptr6.add(8).cast::<*mut u8>();
                                                let l22 = *ptr6.add(12).cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                _rt::string_lift(bytes23)
                                            };
                                            V51::Config(e51)
                                        }
                                        4 => {
                                            let e51 = {
                                                let l24 = *ptr6.add(8).cast::<*mut u8>();
                                                let l25 = *ptr6.add(12).cast::<usize>();
                                                let len26 = l25;
                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                    l24.cast(),
                                                    len26,
                                                    len26,
                                                );
                                                _rt::string_lift(bytes26)
                                            };
                                            V51::Contract(e51)
                                        }
                                        5 => {
                                            let e51 = {
                                                let l27 = *ptr6.add(8).cast::<*mut u8>();
                                                let l28 = *ptr6.add(12).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                _rt::string_lift(bytes29)
                                            };
                                            V51::Configuration(e51)
                                        }
                                        6 => {
                                            let e51 = {
                                                let l30 = *ptr6.add(8).cast::<*mut u8>();
                                                let l31 = *ptr6.add(12).cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );
                                                _rt::string_lift(bytes32)
                                            };
                                            V51::ContextLoading(e51)
                                        }
                                        7 => {
                                            let e51 = {
                                                let l33 = *ptr6.add(8).cast::<*mut u8>();
                                                let l34 = *ptr6.add(12).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V51::ContextValidation(e51)
                                        }
                                        8 => {
                                            let e51 = {
                                                let l36 = *ptr6.add(8).cast::<*mut u8>();
                                                let l37 = *ptr6.add(12).cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            V51::Llm(e51)
                                        }
                                        9 => {
                                            let e51 = {
                                                let l39 = *ptr6.add(8).cast::<*mut u8>();
                                                let l40 = *ptr6.add(12).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V51::Io(e51)
                                        }
                                        10 => {
                                            let e51 = {
                                                let l42 = *ptr6.add(8).cast::<*mut u8>();
                                                let l43 = *ptr6.add(12).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V51::Transaction(e51)
                                        }
                                        11 => {
                                            let e51 = {
                                                let l45 = *ptr6.add(8).cast::<*mut u8>();
                                                let l46 = *ptr6.add(12).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V51::Utf8(e51)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e51 = {
                                                let l48 = *ptr6.add(8).cast::<*mut u8>();
                                                let l49 = *ptr6.add(12).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            V51::Other(e51)
                                        }
                                    };
                                    v51
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ContractManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Encode a function call for this contract using the ABI
                pub fn encode_function_call(
                    &self,
                    contract: &Contract,
                    function_name: &str,
                    args: &[_rt::String],
                ) -> Result<_rt::Vec<u8>, AgentError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let Contract {
                            name: name0,
                            address: address0,
                            abi: abi0,
                            description: description0,
                        } = contract;
                        let vec1 = name0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = address0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec3 = abi0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let (result5_0, result5_1, result5_2) = match description0 {
                            Some(e) => {
                                let vec4 = e;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                (1i32, ptr4.cast_mut(), len4)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let vec6 = function_name;
                        let ptr6 = vec6.as_ptr().cast::<u8>();
                        let len6 = vec6.len();
                        let vec8 = args;
                        let len8 = vec8.len();
                        let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec8.len() * 8,
                            4,
                        );
                        let result8 = if layout8.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout8);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec8.into_iter().enumerate() {
                            let base = result8.add(i * 8);
                            {
                                let vec7 = e;
                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                let len7 = vec7.len();
                                *base.add(4).cast::<usize>() = len7;
                                *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                            }
                        }
                        let ptr9 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/contracts")]
                        extern "C" {
                            #[link_name = "[method]contract-manager.encode-function-call"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr3.cast_mut(),
                            len3,
                            result5_0,
                            result5_1,
                            result5_2,
                            ptr6.cast_mut(),
                            len6,
                            result8,
                            len8,
                            ptr9,
                        );
                        let l10 = i32::from(*ptr9.add(0).cast::<u8>());
                        if layout8.size() != 0 {
                            _rt::alloc::dealloc(result8.cast(), layout8);
                        }
                        match l10 {
                            0 => {
                                let e = {
                                    let l11 = *ptr9.add(4).cast::<*mut u8>();
                                    let l12 = *ptr9.add(8).cast::<usize>();
                                    let len13 = l12;
                                    _rt::Vec::from_raw_parts(l11.cast(), len13, len13)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l14 = i32::from(*ptr9.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V54;
                                    let v54 = match l14 {
                                        0 => {
                                            let e54 = {
                                                let l15 = *ptr9.add(8).cast::<*mut u8>();
                                                let l16 = *ptr9.add(12).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            V54::Api(e54)
                                        }
                                        1 => {
                                            let e54 = {
                                                let l18 = *ptr9.add(8).cast::<*mut u8>();
                                                let l19 = *ptr9.add(12).cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            V54::Http(e54)
                                        }
                                        2 => {
                                            let e54 = {
                                                let l21 = *ptr9.add(8).cast::<*mut u8>();
                                                let l22 = *ptr9.add(12).cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                _rt::string_lift(bytes23)
                                            };
                                            V54::ExternalService(e54)
                                        }
                                        3 => {
                                            let e54 = {
                                                let l24 = *ptr9.add(8).cast::<*mut u8>();
                                                let l25 = *ptr9.add(12).cast::<usize>();
                                                let len26 = l25;
                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                    l24.cast(),
                                                    len26,
                                                    len26,
                                                );
                                                _rt::string_lift(bytes26)
                                            };
                                            V54::Config(e54)
                                        }
                                        4 => {
                                            let e54 = {
                                                let l27 = *ptr9.add(8).cast::<*mut u8>();
                                                let l28 = *ptr9.add(12).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                _rt::string_lift(bytes29)
                                            };
                                            V54::Contract(e54)
                                        }
                                        5 => {
                                            let e54 = {
                                                let l30 = *ptr9.add(8).cast::<*mut u8>();
                                                let l31 = *ptr9.add(12).cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );
                                                _rt::string_lift(bytes32)
                                            };
                                            V54::Configuration(e54)
                                        }
                                        6 => {
                                            let e54 = {
                                                let l33 = *ptr9.add(8).cast::<*mut u8>();
                                                let l34 = *ptr9.add(12).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V54::ContextLoading(e54)
                                        }
                                        7 => {
                                            let e54 = {
                                                let l36 = *ptr9.add(8).cast::<*mut u8>();
                                                let l37 = *ptr9.add(12).cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            V54::ContextValidation(e54)
                                        }
                                        8 => {
                                            let e54 = {
                                                let l39 = *ptr9.add(8).cast::<*mut u8>();
                                                let l40 = *ptr9.add(12).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V54::Llm(e54)
                                        }
                                        9 => {
                                            let e54 = {
                                                let l42 = *ptr9.add(8).cast::<*mut u8>();
                                                let l43 = *ptr9.add(12).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V54::Io(e54)
                                        }
                                        10 => {
                                            let e54 = {
                                                let l45 = *ptr9.add(8).cast::<*mut u8>();
                                                let l46 = *ptr9.add(12).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V54::Transaction(e54)
                                        }
                                        11 => {
                                            let e54 = {
                                                let l48 = *ptr9.add(8).cast::<*mut u8>();
                                                let l49 = *ptr9.add(12).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            V54::Utf8(e54)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e54 = {
                                                let l51 = *ptr9.add(8).cast::<*mut u8>();
                                                let l52 = *ptr9.add(12).cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            V54::Other(e54)
                                        }
                                    };
                                    v54
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ContractManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Find a function in the ABI
                pub fn find_function(
                    &self,
                    contract: &Contract,
                    function_name: &str,
                ) -> Result<_rt::String, AgentError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let Contract {
                            name: name0,
                            address: address0,
                            abi: abi0,
                            description: description0,
                        } = contract;
                        let vec1 = name0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = address0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec3 = abi0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let (result5_0, result5_1, result5_2) = match description0 {
                            Some(e) => {
                                let vec4 = e;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                (1i32, ptr4.cast_mut(), len4)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let vec6 = function_name;
                        let ptr6 = vec6.as_ptr().cast::<u8>();
                        let len6 = vec6.len();
                        let ptr7 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/contracts")]
                        extern "C" {
                            #[link_name = "[method]contract-manager.find-function"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr3.cast_mut(),
                            len3,
                            result5_0,
                            result5_1,
                            result5_2,
                            ptr6.cast_mut(),
                            len6,
                            ptr7,
                        );
                        let l8 = i32::from(*ptr7.add(0).cast::<u8>());
                        match l8 {
                            0 => {
                                let e = {
                                    let l9 = *ptr7.add(4).cast::<*mut u8>();
                                    let l10 = *ptr7.add(8).cast::<usize>();
                                    let len11 = l10;
                                    let bytes11 = _rt::Vec::from_raw_parts(
                                        l9.cast(),
                                        len11,
                                        len11,
                                    );
                                    _rt::string_lift(bytes11)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l12 = i32::from(*ptr7.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V52;
                                    let v52 = match l12 {
                                        0 => {
                                            let e52 = {
                                                let l13 = *ptr7.add(8).cast::<*mut u8>();
                                                let l14 = *ptr7.add(12).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            V52::Api(e52)
                                        }
                                        1 => {
                                            let e52 = {
                                                let l16 = *ptr7.add(8).cast::<*mut u8>();
                                                let l17 = *ptr7.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            V52::Http(e52)
                                        }
                                        2 => {
                                            let e52 = {
                                                let l19 = *ptr7.add(8).cast::<*mut u8>();
                                                let l20 = *ptr7.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                _rt::string_lift(bytes21)
                                            };
                                            V52::ExternalService(e52)
                                        }
                                        3 => {
                                            let e52 = {
                                                let l22 = *ptr7.add(8).cast::<*mut u8>();
                                                let l23 = *ptr7.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );
                                                _rt::string_lift(bytes24)
                                            };
                                            V52::Config(e52)
                                        }
                                        4 => {
                                            let e52 = {
                                                let l25 = *ptr7.add(8).cast::<*mut u8>();
                                                let l26 = *ptr7.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );
                                                _rt::string_lift(bytes27)
                                            };
                                            V52::Contract(e52)
                                        }
                                        5 => {
                                            let e52 = {
                                                let l28 = *ptr7.add(8).cast::<*mut u8>();
                                                let l29 = *ptr7.add(12).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );
                                                _rt::string_lift(bytes30)
                                            };
                                            V52::Configuration(e52)
                                        }
                                        6 => {
                                            let e52 = {
                                                let l31 = *ptr7.add(8).cast::<*mut u8>();
                                                let l32 = *ptr7.add(12).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                _rt::string_lift(bytes33)
                                            };
                                            V52::ContextLoading(e52)
                                        }
                                        7 => {
                                            let e52 = {
                                                let l34 = *ptr7.add(8).cast::<*mut u8>();
                                                let l35 = *ptr7.add(12).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            V52::ContextValidation(e52)
                                        }
                                        8 => {
                                            let e52 = {
                                                let l37 = *ptr7.add(8).cast::<*mut u8>();
                                                let l38 = *ptr7.add(12).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            V52::Llm(e52)
                                        }
                                        9 => {
                                            let e52 = {
                                                let l40 = *ptr7.add(8).cast::<*mut u8>();
                                                let l41 = *ptr7.add(12).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            V52::Io(e52)
                                        }
                                        10 => {
                                            let e52 = {
                                                let l43 = *ptr7.add(8).cast::<*mut u8>();
                                                let l44 = *ptr7.add(12).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V52::Transaction(e52)
                                        }
                                        11 => {
                                            let e52 = {
                                                let l46 = *ptr7.add(8).cast::<*mut u8>();
                                                let l47 = *ptr7.add(12).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V52::Utf8(e52)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e52 = {
                                                let l49 = *ptr7.add(8).cast::<*mut u8>();
                                                let l50 = *ptr7.add(12).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V52::Other(e52)
                                        }
                                    };
                                    v52
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ContractManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Validate function arguments against the ABI
                pub fn validate_function_call(
                    &self,
                    contract: &Contract,
                    function_name: &str,
                    args: &[_rt::String],
                ) -> Result<(), AgentError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let Contract {
                            name: name0,
                            address: address0,
                            abi: abi0,
                            description: description0,
                        } = contract;
                        let vec1 = name0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = address0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec3 = abi0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let (result5_0, result5_1, result5_2) = match description0 {
                            Some(e) => {
                                let vec4 = e;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                (1i32, ptr4.cast_mut(), len4)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let vec6 = function_name;
                        let ptr6 = vec6.as_ptr().cast::<u8>();
                        let len6 = vec6.len();
                        let vec8 = args;
                        let len8 = vec8.len();
                        let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec8.len() * 8,
                            4,
                        );
                        let result8 = if layout8.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout8);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec8.into_iter().enumerate() {
                            let base = result8.add(i * 8);
                            {
                                let vec7 = e;
                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                let len7 = vec7.len();
                                *base.add(4).cast::<usize>() = len7;
                                *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                            }
                        }
                        let ptr9 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/contracts")]
                        extern "C" {
                            #[link_name = "[method]contract-manager.validate-function-call"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr3.cast_mut(),
                            len3,
                            result5_0,
                            result5_1,
                            result5_2,
                            ptr6.cast_mut(),
                            len6,
                            result8,
                            len8,
                            ptr9,
                        );
                        let l10 = i32::from(*ptr9.add(0).cast::<u8>());
                        if layout8.size() != 0 {
                            _rt::alloc::dealloc(result8.cast(), layout8);
                        }
                        match l10 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l11 = i32::from(*ptr9.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V51;
                                    let v51 = match l11 {
                                        0 => {
                                            let e51 = {
                                                let l12 = *ptr9.add(8).cast::<*mut u8>();
                                                let l13 = *ptr9.add(12).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V51::Api(e51)
                                        }
                                        1 => {
                                            let e51 = {
                                                let l15 = *ptr9.add(8).cast::<*mut u8>();
                                                let l16 = *ptr9.add(12).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            V51::Http(e51)
                                        }
                                        2 => {
                                            let e51 = {
                                                let l18 = *ptr9.add(8).cast::<*mut u8>();
                                                let l19 = *ptr9.add(12).cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            V51::ExternalService(e51)
                                        }
                                        3 => {
                                            let e51 = {
                                                let l21 = *ptr9.add(8).cast::<*mut u8>();
                                                let l22 = *ptr9.add(12).cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                _rt::string_lift(bytes23)
                                            };
                                            V51::Config(e51)
                                        }
                                        4 => {
                                            let e51 = {
                                                let l24 = *ptr9.add(8).cast::<*mut u8>();
                                                let l25 = *ptr9.add(12).cast::<usize>();
                                                let len26 = l25;
                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                    l24.cast(),
                                                    len26,
                                                    len26,
                                                );
                                                _rt::string_lift(bytes26)
                                            };
                                            V51::Contract(e51)
                                        }
                                        5 => {
                                            let e51 = {
                                                let l27 = *ptr9.add(8).cast::<*mut u8>();
                                                let l28 = *ptr9.add(12).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                _rt::string_lift(bytes29)
                                            };
                                            V51::Configuration(e51)
                                        }
                                        6 => {
                                            let e51 = {
                                                let l30 = *ptr9.add(8).cast::<*mut u8>();
                                                let l31 = *ptr9.add(12).cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );
                                                _rt::string_lift(bytes32)
                                            };
                                            V51::ContextLoading(e51)
                                        }
                                        7 => {
                                            let e51 = {
                                                let l33 = *ptr9.add(8).cast::<*mut u8>();
                                                let l34 = *ptr9.add(12).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V51::ContextValidation(e51)
                                        }
                                        8 => {
                                            let e51 = {
                                                let l36 = *ptr9.add(8).cast::<*mut u8>();
                                                let l37 = *ptr9.add(12).cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            V51::Llm(e51)
                                        }
                                        9 => {
                                            let e51 = {
                                                let l39 = *ptr9.add(8).cast::<*mut u8>();
                                                let l40 = *ptr9.add(12).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V51::Io(e51)
                                        }
                                        10 => {
                                            let e51 = {
                                                let l42 = *ptr9.add(8).cast::<*mut u8>();
                                                let l43 = *ptr9.add(12).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V51::Transaction(e51)
                                        }
                                        11 => {
                                            let e51 = {
                                                let l45 = *ptr9.add(8).cast::<*mut u8>();
                                                let l46 = *ptr9.add(12).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V51::Utf8(e51)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e51 = {
                                                let l48 = *ptr9.add(8).cast::<*mut u8>();
                                                let l49 = *ptr9.add(12).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            V51::Other(e51)
                                        }
                                    };
                                    v51
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl TransactionManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Basic validation of transaction fields
                pub fn is_valid(&self, transaction: &Transaction) -> bool {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let Transaction {
                            to: to0,
                            value: value0,
                            contract_call: contract_call0,
                            data: data0,
                            description: description0,
                        } = transaction;
                        let vec1 = to0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = value0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let (result7_0, result7_1, result7_2, result7_3, result7_4) = match contract_call0 {
                            Some(e) => {
                                let ContractCall { function: function3, args: args3 } = e;
                                let vec4 = function3;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                let vec6 = args3;
                                let len6 = vec6.len();
                                let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec6.len() * 8,
                                    4,
                                );
                                let result6 = if layout6.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout6);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec6.into_iter().enumerate() {
                                    let base = result6.add(i * 8);
                                    {
                                        let vec5 = e;
                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                        let len5 = vec5.len();
                                        *base.add(4).cast::<usize>() = len5;
                                        *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result6, layout6)]);
                                (1i32, ptr4.cast_mut(), len4, result6, len6)
                            }
                            None => {
                                (
                                    0i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                        };
                        let vec8 = data0;
                        let ptr8 = vec8.as_ptr().cast::<u8>();
                        let len8 = vec8.len();
                        let vec9 = description0;
                        let ptr9 = vec9.as_ptr().cast::<u8>();
                        let len9 = vec9.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/contracts")]
                        extern "C" {
                            #[link_name = "[method]transaction-manager.is-valid"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result7_0,
                            result7_1,
                            result7_2,
                            result7_3,
                            result7_4,
                            ptr8.cast_mut(),
                            len8,
                            ptr9.cast_mut(),
                            len9,
                        );
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl TransactionManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Validate a transaction
                pub fn validate_transaction(
                    &self,
                    transaction: &Transaction,
                ) -> Result<(), AgentError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let Transaction {
                            to: to0,
                            value: value0,
                            contract_call: contract_call0,
                            data: data0,
                            description: description0,
                        } = transaction;
                        let vec1 = to0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = value0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let (result7_0, result7_1, result7_2, result7_3, result7_4) = match contract_call0 {
                            Some(e) => {
                                let ContractCall { function: function3, args: args3 } = e;
                                let vec4 = function3;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                let vec6 = args3;
                                let len6 = vec6.len();
                                let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec6.len() * 8,
                                    4,
                                );
                                let result6 = if layout6.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout6);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec6.into_iter().enumerate() {
                                    let base = result6.add(i * 8);
                                    {
                                        let vec5 = e;
                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                        let len5 = vec5.len();
                                        *base.add(4).cast::<usize>() = len5;
                                        *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result6, layout6)]);
                                (1i32, ptr4.cast_mut(), len4, result6, len6)
                            }
                            None => {
                                (
                                    0i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                        };
                        let vec8 = data0;
                        let ptr8 = vec8.as_ptr().cast::<u8>();
                        let len8 = vec8.len();
                        let vec9 = description0;
                        let ptr9 = vec9.as_ptr().cast::<u8>();
                        let len9 = vec9.len();
                        let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/contracts")]
                        extern "C" {
                            #[link_name = "[method]transaction-manager.validate-transaction"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result7_0,
                            result7_1,
                            result7_2,
                            result7_3,
                            result7_4,
                            ptr8.cast_mut(),
                            len8,
                            ptr9.cast_mut(),
                            len9,
                            ptr10,
                        );
                        let l11 = i32::from(*ptr10.add(0).cast::<u8>());
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l11 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l12 = i32::from(*ptr10.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V52;
                                    let v52 = match l12 {
                                        0 => {
                                            let e52 = {
                                                let l13 = *ptr10.add(8).cast::<*mut u8>();
                                                let l14 = *ptr10.add(12).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            V52::Api(e52)
                                        }
                                        1 => {
                                            let e52 = {
                                                let l16 = *ptr10.add(8).cast::<*mut u8>();
                                                let l17 = *ptr10.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            V52::Http(e52)
                                        }
                                        2 => {
                                            let e52 = {
                                                let l19 = *ptr10.add(8).cast::<*mut u8>();
                                                let l20 = *ptr10.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                _rt::string_lift(bytes21)
                                            };
                                            V52::ExternalService(e52)
                                        }
                                        3 => {
                                            let e52 = {
                                                let l22 = *ptr10.add(8).cast::<*mut u8>();
                                                let l23 = *ptr10.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );
                                                _rt::string_lift(bytes24)
                                            };
                                            V52::Config(e52)
                                        }
                                        4 => {
                                            let e52 = {
                                                let l25 = *ptr10.add(8).cast::<*mut u8>();
                                                let l26 = *ptr10.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );
                                                _rt::string_lift(bytes27)
                                            };
                                            V52::Contract(e52)
                                        }
                                        5 => {
                                            let e52 = {
                                                let l28 = *ptr10.add(8).cast::<*mut u8>();
                                                let l29 = *ptr10.add(12).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );
                                                _rt::string_lift(bytes30)
                                            };
                                            V52::Configuration(e52)
                                        }
                                        6 => {
                                            let e52 = {
                                                let l31 = *ptr10.add(8).cast::<*mut u8>();
                                                let l32 = *ptr10.add(12).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                _rt::string_lift(bytes33)
                                            };
                                            V52::ContextLoading(e52)
                                        }
                                        7 => {
                                            let e52 = {
                                                let l34 = *ptr10.add(8).cast::<*mut u8>();
                                                let l35 = *ptr10.add(12).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            V52::ContextValidation(e52)
                                        }
                                        8 => {
                                            let e52 = {
                                                let l37 = *ptr10.add(8).cast::<*mut u8>();
                                                let l38 = *ptr10.add(12).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            V52::Llm(e52)
                                        }
                                        9 => {
                                            let e52 = {
                                                let l40 = *ptr10.add(8).cast::<*mut u8>();
                                                let l41 = *ptr10.add(12).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            V52::Io(e52)
                                        }
                                        10 => {
                                            let e52 = {
                                                let l43 = *ptr10.add(8).cast::<*mut u8>();
                                                let l44 = *ptr10.add(12).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V52::Transaction(e52)
                                        }
                                        11 => {
                                            let e52 = {
                                                let l46 = *ptr10.add(8).cast::<*mut u8>();
                                                let l47 = *ptr10.add(12).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V52::Utf8(e52)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e52 = {
                                                let l49 = *ptr10.add(8).cast::<*mut u8>();
                                                let l50 = *ptr10.add(12).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V52::Other(e52)
                                        }
                                    };
                                    v52
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl TransactionManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Helper function to create a transaction payload from a Transaction
                pub fn create_payload_from_tx(
                    &self,
                    transaction: &Transaction,
                ) -> Result<_rt::String, AgentError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let Transaction {
                            to: to0,
                            value: value0,
                            contract_call: contract_call0,
                            data: data0,
                            description: description0,
                        } = transaction;
                        let vec1 = to0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = value0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let (result7_0, result7_1, result7_2, result7_3, result7_4) = match contract_call0 {
                            Some(e) => {
                                let ContractCall { function: function3, args: args3 } = e;
                                let vec4 = function3;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                let vec6 = args3;
                                let len6 = vec6.len();
                                let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec6.len() * 8,
                                    4,
                                );
                                let result6 = if layout6.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout6);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec6.into_iter().enumerate() {
                                    let base = result6.add(i * 8);
                                    {
                                        let vec5 = e;
                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                        let len5 = vec5.len();
                                        *base.add(4).cast::<usize>() = len5;
                                        *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result6, layout6)]);
                                (1i32, ptr4.cast_mut(), len4, result6, len6)
                            }
                            None => {
                                (
                                    0i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                        };
                        let vec8 = data0;
                        let ptr8 = vec8.as_ptr().cast::<u8>();
                        let len8 = vec8.len();
                        let vec9 = description0;
                        let ptr9 = vec9.as_ptr().cast::<u8>();
                        let len9 = vec9.len();
                        let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/contracts")]
                        extern "C" {
                            #[link_name = "[method]transaction-manager.create-payload-from-tx"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result7_0,
                            result7_1,
                            result7_2,
                            result7_3,
                            result7_4,
                            ptr8.cast_mut(),
                            len8,
                            ptr9.cast_mut(),
                            len9,
                            ptr10,
                        );
                        let l11 = i32::from(*ptr10.add(0).cast::<u8>());
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l11 {
                            0 => {
                                let e = {
                                    let l12 = *ptr10.add(4).cast::<*mut u8>();
                                    let l13 = *ptr10.add(8).cast::<usize>();
                                    let len14 = l13;
                                    let bytes14 = _rt::Vec::from_raw_parts(
                                        l12.cast(),
                                        len14,
                                        len14,
                                    );
                                    _rt::string_lift(bytes14)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l15 = i32::from(*ptr10.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V55;
                                    let v55 = match l15 {
                                        0 => {
                                            let e55 = {
                                                let l16 = *ptr10.add(8).cast::<*mut u8>();
                                                let l17 = *ptr10.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            V55::Api(e55)
                                        }
                                        1 => {
                                            let e55 = {
                                                let l19 = *ptr10.add(8).cast::<*mut u8>();
                                                let l20 = *ptr10.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                _rt::string_lift(bytes21)
                                            };
                                            V55::Http(e55)
                                        }
                                        2 => {
                                            let e55 = {
                                                let l22 = *ptr10.add(8).cast::<*mut u8>();
                                                let l23 = *ptr10.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );
                                                _rt::string_lift(bytes24)
                                            };
                                            V55::ExternalService(e55)
                                        }
                                        3 => {
                                            let e55 = {
                                                let l25 = *ptr10.add(8).cast::<*mut u8>();
                                                let l26 = *ptr10.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );
                                                _rt::string_lift(bytes27)
                                            };
                                            V55::Config(e55)
                                        }
                                        4 => {
                                            let e55 = {
                                                let l28 = *ptr10.add(8).cast::<*mut u8>();
                                                let l29 = *ptr10.add(12).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );
                                                _rt::string_lift(bytes30)
                                            };
                                            V55::Contract(e55)
                                        }
                                        5 => {
                                            let e55 = {
                                                let l31 = *ptr10.add(8).cast::<*mut u8>();
                                                let l32 = *ptr10.add(12).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                _rt::string_lift(bytes33)
                                            };
                                            V55::Configuration(e55)
                                        }
                                        6 => {
                                            let e55 = {
                                                let l34 = *ptr10.add(8).cast::<*mut u8>();
                                                let l35 = *ptr10.add(12).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            V55::ContextLoading(e55)
                                        }
                                        7 => {
                                            let e55 = {
                                                let l37 = *ptr10.add(8).cast::<*mut u8>();
                                                let l38 = *ptr10.add(12).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            V55::ContextValidation(e55)
                                        }
                                        8 => {
                                            let e55 = {
                                                let l40 = *ptr10.add(8).cast::<*mut u8>();
                                                let l41 = *ptr10.add(12).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            V55::Llm(e55)
                                        }
                                        9 => {
                                            let e55 = {
                                                let l43 = *ptr10.add(8).cast::<*mut u8>();
                                                let l44 = *ptr10.add(12).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V55::Io(e55)
                                        }
                                        10 => {
                                            let e55 = {
                                                let l46 = *ptr10.add(8).cast::<*mut u8>();
                                                let l47 = *ptr10.add(12).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V55::Transaction(e55)
                                        }
                                        11 => {
                                            let e55 = {
                                                let l49 = *ptr10.add(8).cast::<*mut u8>();
                                                let l50 = *ptr10.add(12).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V55::Utf8(e55)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e55 = {
                                                let l52 = *ptr10.add(8).cast::<*mut u8>();
                                                let l53 = *ptr10.add(12).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                _rt::string_lift(bytes54)
                                            };
                                            V55::Other(e55)
                                        }
                                    };
                                    v55
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
        #[allow(dead_code, clippy::all)]
        pub mod config {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type AgentError = super::super::super::wavs::agent::errors::AgentError;
            pub type Message = super::super::super::wavs::agent::common::Message;
            pub type Contract = super::super::super::wavs::agent::contracts::Contract;
            /// Configuration options for LLM API requests
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct LlmOptions {
                /// Temperature controls randomness (0.0-2.0)
                pub temperature: f32,
                /// Top_p controls diversity (0.0-1.0)
                pub top_p: f32,
                /// Seed for deterministic outputs
                pub seed: u32,
                /// Maximum tokens to generate
                pub max_tokens: Option<u32>,
                /// Context window size (mainly for Ollama)
                pub context_window: Option<u32>,
            }
            impl ::core::fmt::Debug for LlmOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LlmOptions")
                        .field("temperature", &self.temperature)
                        .field("top-p", &self.top_p)
                        .field("seed", &self.seed)
                        .field("max-tokens", &self.max_tokens)
                        .field("context-window", &self.context_window)
                        .finish()
                }
            }
            /// Generic configuration for agent's decision making
            #[derive(Clone)]
            pub struct Config {
                pub contracts: _rt::Vec<Contract>,
                pub llm_config: LlmOptions,
                pub model: _rt::String,
                pub messages: _rt::Vec<Message>,
                /// Any global configuration values
                pub config: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for Config {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Config")
                        .field("contracts", &self.contracts)
                        .field("llm-config", &self.llm_config)
                        .field("model", &self.model)
                        .field("messages", &self.messages)
                        .field("config", &self.config)
                        .finish()
                }
            }
            /// Functions for manipulating LLM options
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct LlmOptionsFuncs {
                handle: _rt::Resource<LlmOptionsFuncs>,
            }
            impl LlmOptionsFuncs {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for LlmOptionsFuncs {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[resource-drop]llm-options-funcs"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            /// Configuration resource for loading and managing configuration
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct ConfigManager {
                handle: _rt::Resource<ConfigManager>,
            }
            impl ConfigManager {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for ConfigManager {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[resource-drop]config-manager"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl LlmOptionsFuncs {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a new config with default values
                pub fn new(&self) -> LlmOptions {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 28],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]llm-options-funcs.new"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<i32>();
                        let l4 = i32::from(*ptr0.add(12).cast::<u8>());
                        let l6 = i32::from(*ptr0.add(20).cast::<u8>());
                        LlmOptions {
                            temperature: l1,
                            top_p: l2,
                            seed: l3 as u32,
                            max_tokens: match l4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l5 = *ptr0.add(16).cast::<i32>();
                                        l5 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            context_window: match l6 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l7 = *ptr0.add(24).cast::<i32>();
                                        l7 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        }
                    }
                }
            }
            impl LlmOptionsFuncs {
                #[allow(unused_unsafe, clippy::all)]
                /// Set temperature
                pub fn temperature(&self, temp: f32) -> LlmOptions {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 28],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]llm-options-funcs.temperature"]
                            fn wit_import(_: i32, _: f32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&temp), ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<i32>();
                        let l4 = i32::from(*ptr0.add(12).cast::<u8>());
                        let l6 = i32::from(*ptr0.add(20).cast::<u8>());
                        LlmOptions {
                            temperature: l1,
                            top_p: l2,
                            seed: l3 as u32,
                            max_tokens: match l4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l5 = *ptr0.add(16).cast::<i32>();
                                        l5 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            context_window: match l6 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l7 = *ptr0.add(24).cast::<i32>();
                                        l7 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        }
                    }
                }
            }
            impl LlmOptionsFuncs {
                #[allow(unused_unsafe, clippy::all)]
                /// Set top_p
                pub fn top_p(&self, top_p: f32) -> LlmOptions {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 28],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]llm-options-funcs.top-p"]
                            fn wit_import(_: i32, _: f32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&top_p), ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<i32>();
                        let l4 = i32::from(*ptr0.add(12).cast::<u8>());
                        let l6 = i32::from(*ptr0.add(20).cast::<u8>());
                        LlmOptions {
                            temperature: l1,
                            top_p: l2,
                            seed: l3 as u32,
                            max_tokens: match l4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l5 = *ptr0.add(16).cast::<i32>();
                                        l5 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            context_window: match l6 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l7 = *ptr0.add(24).cast::<i32>();
                                        l7 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        }
                    }
                }
            }
            impl LlmOptionsFuncs {
                #[allow(unused_unsafe, clippy::all)]
                /// Set seed
                pub fn seed(&self, seed: u32) -> LlmOptions {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 28],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]llm-options-funcs.seed"]
                            fn wit_import(_: i32, _: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i32(&seed), ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<i32>();
                        let l4 = i32::from(*ptr0.add(12).cast::<u8>());
                        let l6 = i32::from(*ptr0.add(20).cast::<u8>());
                        LlmOptions {
                            temperature: l1,
                            top_p: l2,
                            seed: l3 as u32,
                            max_tokens: match l4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l5 = *ptr0.add(16).cast::<i32>();
                                        l5 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            context_window: match l6 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l7 = *ptr0.add(24).cast::<i32>();
                                        l7 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        }
                    }
                }
            }
            impl LlmOptionsFuncs {
                #[allow(unused_unsafe, clippy::all)]
                /// Set max tokens
                pub fn max_tokens(&self, max_tokens: Option<u32>) -> LlmOptions {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 28],
                        );
                        let (result0_0, result0_1) = match max_tokens {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]llm-options-funcs.max-tokens"]
                            fn wit_import(_: i32, _: i32, _: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1, ptr1);
                        let l2 = *ptr1.add(0).cast::<f32>();
                        let l3 = *ptr1.add(4).cast::<f32>();
                        let l4 = *ptr1.add(8).cast::<i32>();
                        let l5 = i32::from(*ptr1.add(12).cast::<u8>());
                        let l7 = i32::from(*ptr1.add(20).cast::<u8>());
                        LlmOptions {
                            temperature: l2,
                            top_p: l3,
                            seed: l4 as u32,
                            max_tokens: match l5 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l6 = *ptr1.add(16).cast::<i32>();
                                        l6 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            context_window: match l7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l8 = *ptr1.add(24).cast::<i32>();
                                        l8 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        }
                    }
                }
            }
            impl LlmOptionsFuncs {
                #[allow(unused_unsafe, clippy::all)]
                /// Set context window size
                pub fn context_window(&self, context_window: Option<u32>) -> LlmOptions {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 28],
                        );
                        let (result0_0, result0_1) = match context_window {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]llm-options-funcs.context-window"]
                            fn wit_import(_: i32, _: i32, _: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1, ptr1);
                        let l2 = *ptr1.add(0).cast::<f32>();
                        let l3 = *ptr1.add(4).cast::<f32>();
                        let l4 = *ptr1.add(8).cast::<i32>();
                        let l5 = i32::from(*ptr1.add(12).cast::<u8>());
                        let l7 = i32::from(*ptr1.add(20).cast::<u8>());
                        LlmOptions {
                            temperature: l2,
                            top_p: l3,
                            seed: l4 as u32,
                            max_tokens: match l5 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l6 = *ptr1.add(16).cast::<i32>();
                                        l6 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            context_window: match l7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l8 = *ptr1.add(24).cast::<i32>();
                                        l8 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        }
                    }
                }
            }
            impl ConfigManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Load Config from environment variable CONFIG_URI or use default
                pub fn load(&self) -> Result<Config, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 64]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 64],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]config-manager.load"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base17 = l2;
                                    let len17 = l3;
                                    let mut result17 = _rt::Vec::with_capacity(len17);
                                    for i in 0..len17 {
                                        let base = base17.add(i * 36);
                                        let e17 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                l4.cast(),
                                                len6,
                                                len6,
                                            );
                                            let l7 = *base.add(8).cast::<*mut u8>();
                                            let l8 = *base.add(12).cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            let l10 = *base.add(16).cast::<*mut u8>();
                                            let l11 = *base.add(20).cast::<usize>();
                                            let len12 = l11;
                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                l10.cast(),
                                                len12,
                                                len12,
                                            );
                                            let l13 = i32::from(*base.add(24).cast::<u8>());
                                            super::super::super::wavs::agent::contracts::Contract {
                                                name: _rt::string_lift(bytes6),
                                                address: _rt::string_lift(bytes9),
                                                abi: _rt::string_lift(bytes12),
                                                description: match l13 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l14 = *base.add(28).cast::<*mut u8>();
                                                            let l15 = *base.add(32).cast::<usize>();
                                                            let len16 = l15;
                                                            let bytes16 = _rt::Vec::from_raw_parts(
                                                                l14.cast(),
                                                                len16,
                                                                len16,
                                                            );
                                                            _rt::string_lift(bytes16)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        result17.push(e17);
                                    }
                                    _rt::cabi_dealloc(base17, len17 * 36, 4);
                                    let l18 = *ptr0.add(12).cast::<f32>();
                                    let l19 = *ptr0.add(16).cast::<f32>();
                                    let l20 = *ptr0.add(20).cast::<i32>();
                                    let l21 = i32::from(*ptr0.add(24).cast::<u8>());
                                    let l23 = i32::from(*ptr0.add(32).cast::<u8>());
                                    let l25 = *ptr0.add(40).cast::<*mut u8>();
                                    let l26 = *ptr0.add(44).cast::<usize>();
                                    let len27 = l26;
                                    let bytes27 = _rt::Vec::from_raw_parts(
                                        l25.cast(),
                                        len27,
                                        len27,
                                    );
                                    let l28 = *ptr0.add(48).cast::<*mut u8>();
                                    let l29 = *ptr0.add(52).cast::<usize>();
                                    let base61 = l28;
                                    let len61 = l29;
                                    let mut result61 = _rt::Vec::with_capacity(len61);
                                    for i in 0..len61 {
                                        let base = base61.add(i * 56);
                                        let e61 = {
                                            let l30 = *base.add(0).cast::<*mut u8>();
                                            let l31 = *base.add(4).cast::<usize>();
                                            let len32 = l31;
                                            let bytes32 = _rt::Vec::from_raw_parts(
                                                l30.cast(),
                                                len32,
                                                len32,
                                            );
                                            let l33 = i32::from(*base.add(8).cast::<u8>());
                                            let l37 = i32::from(*base.add(20).cast::<u8>());
                                            let l53 = i32::from(*base.add(32).cast::<u8>());
                                            let l57 = i32::from(*base.add(44).cast::<u8>());
                                            super::super::super::wavs::agent::common::Message {
                                                role: _rt::string_lift(bytes32),
                                                content: match l33 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l34 = *base.add(12).cast::<*mut u8>();
                                                            let l35 = *base.add(16).cast::<usize>();
                                                            let len36 = l35;
                                                            let bytes36 = _rt::Vec::from_raw_parts(
                                                                l34.cast(),
                                                                len36,
                                                                len36,
                                                            );
                                                            _rt::string_lift(bytes36)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                tool_calls: match l37 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l38 = *base.add(24).cast::<*mut u8>();
                                                            let l39 = *base.add(28).cast::<usize>();
                                                            let base52 = l38;
                                                            let len52 = l39;
                                                            let mut result52 = _rt::Vec::with_capacity(len52);
                                                            for i in 0..len52 {
                                                                let base = base52.add(i * 32);
                                                                let e52 = {
                                                                    let l40 = *base.add(0).cast::<*mut u8>();
                                                                    let l41 = *base.add(4).cast::<usize>();
                                                                    let len42 = l41;
                                                                    let bytes42 = _rt::Vec::from_raw_parts(
                                                                        l40.cast(),
                                                                        len42,
                                                                        len42,
                                                                    );
                                                                    let l43 = *base.add(8).cast::<*mut u8>();
                                                                    let l44 = *base.add(12).cast::<usize>();
                                                                    let len45 = l44;
                                                                    let bytes45 = _rt::Vec::from_raw_parts(
                                                                        l43.cast(),
                                                                        len45,
                                                                        len45,
                                                                    );
                                                                    let l46 = *base.add(16).cast::<*mut u8>();
                                                                    let l47 = *base.add(20).cast::<usize>();
                                                                    let len48 = l47;
                                                                    let bytes48 = _rt::Vec::from_raw_parts(
                                                                        l46.cast(),
                                                                        len48,
                                                                        len48,
                                                                    );
                                                                    let l49 = *base.add(24).cast::<*mut u8>();
                                                                    let l50 = *base.add(28).cast::<usize>();
                                                                    let len51 = l50;
                                                                    let bytes51 = _rt::Vec::from_raw_parts(
                                                                        l49.cast(),
                                                                        len51,
                                                                        len51,
                                                                    );
                                                                    super::super::super::wavs::agent::common::ToolCall {
                                                                        id: _rt::string_lift(bytes42),
                                                                        tool_type: _rt::string_lift(bytes45),
                                                                        function: super::super::super::wavs::agent::common::ToolCallFunction {
                                                                            name: _rt::string_lift(bytes48),
                                                                            arguments: _rt::string_lift(bytes51),
                                                                        },
                                                                    }
                                                                };
                                                                result52.push(e52);
                                                            }
                                                            _rt::cabi_dealloc(base52, len52 * 32, 4);
                                                            result52
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                tool_call_id: match l53 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l54 = *base.add(36).cast::<*mut u8>();
                                                            let l55 = *base.add(40).cast::<usize>();
                                                            let len56 = l55;
                                                            let bytes56 = _rt::Vec::from_raw_parts(
                                                                l54.cast(),
                                                                len56,
                                                                len56,
                                                            );
                                                            _rt::string_lift(bytes56)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                name: match l57 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l58 = *base.add(48).cast::<*mut u8>();
                                                            let l59 = *base.add(52).cast::<usize>();
                                                            let len60 = l59;
                                                            let bytes60 = _rt::Vec::from_raw_parts(
                                                                l58.cast(),
                                                                len60,
                                                                len60,
                                                            );
                                                            _rt::string_lift(bytes60)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        result61.push(e61);
                                    }
                                    _rt::cabi_dealloc(base61, len61 * 56, 4);
                                    let l62 = *ptr0.add(56).cast::<*mut u8>();
                                    let l63 = *ptr0.add(60).cast::<usize>();
                                    let base70 = l62;
                                    let len70 = l63;
                                    let mut result70 = _rt::Vec::with_capacity(len70);
                                    for i in 0..len70 {
                                        let base = base70.add(i * 16);
                                        let e70 = {
                                            let l64 = *base.add(0).cast::<*mut u8>();
                                            let l65 = *base.add(4).cast::<usize>();
                                            let len66 = l65;
                                            let bytes66 = _rt::Vec::from_raw_parts(
                                                l64.cast(),
                                                len66,
                                                len66,
                                            );
                                            let l67 = *base.add(8).cast::<*mut u8>();
                                            let l68 = *base.add(12).cast::<usize>();
                                            let len69 = l68;
                                            let bytes69 = _rt::Vec::from_raw_parts(
                                                l67.cast(),
                                                len69,
                                                len69,
                                            );
                                            (_rt::string_lift(bytes66), _rt::string_lift(bytes69))
                                        };
                                        result70.push(e70);
                                    }
                                    _rt::cabi_dealloc(base70, len70 * 16, 4);
                                    Config {
                                        contracts: result17,
                                        llm_config: LlmOptions {
                                            temperature: l18,
                                            top_p: l19,
                                            seed: l20 as u32,
                                            max_tokens: match l21 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l22 = *ptr0.add(28).cast::<i32>();
                                                        l22 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            context_window: match l23 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l24 = *ptr0.add(36).cast::<i32>();
                                                        l24 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        },
                                        model: _rt::string_lift(bytes27),
                                        messages: result61,
                                        config: result70,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l71 = *ptr0.add(4).cast::<*mut u8>();
                                    let l72 = *ptr0.add(8).cast::<usize>();
                                    let len73 = l72;
                                    let bytes73 = _rt::Vec::from_raw_parts(
                                        l71.cast(),
                                        len73,
                                        len73,
                                    );
                                    _rt::string_lift(bytes73)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ConfigManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Load Config from a URI
                pub fn load_from_uri(&self, uri: &str) -> Result<Config, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 64]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 64],
                        );
                        let vec0 = uri;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]config-manager.load-from-uri"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let base18 = l3;
                                    let len18 = l4;
                                    let mut result18 = _rt::Vec::with_capacity(len18);
                                    for i in 0..len18 {
                                        let base = base18.add(i * 36);
                                        let e18 = {
                                            let l5 = *base.add(0).cast::<*mut u8>();
                                            let l6 = *base.add(4).cast::<usize>();
                                            let len7 = l6;
                                            let bytes7 = _rt::Vec::from_raw_parts(
                                                l5.cast(),
                                                len7,
                                                len7,
                                            );
                                            let l8 = *base.add(8).cast::<*mut u8>();
                                            let l9 = *base.add(12).cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            let l11 = *base.add(16).cast::<*mut u8>();
                                            let l12 = *base.add(20).cast::<usize>();
                                            let len13 = l12;
                                            let bytes13 = _rt::Vec::from_raw_parts(
                                                l11.cast(),
                                                len13,
                                                len13,
                                            );
                                            let l14 = i32::from(*base.add(24).cast::<u8>());
                                            super::super::super::wavs::agent::contracts::Contract {
                                                name: _rt::string_lift(bytes7),
                                                address: _rt::string_lift(bytes10),
                                                abi: _rt::string_lift(bytes13),
                                                description: match l14 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l15 = *base.add(28).cast::<*mut u8>();
                                                            let l16 = *base.add(32).cast::<usize>();
                                                            let len17 = l16;
                                                            let bytes17 = _rt::Vec::from_raw_parts(
                                                                l15.cast(),
                                                                len17,
                                                                len17,
                                                            );
                                                            _rt::string_lift(bytes17)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        result18.push(e18);
                                    }
                                    _rt::cabi_dealloc(base18, len18 * 36, 4);
                                    let l19 = *ptr1.add(12).cast::<f32>();
                                    let l20 = *ptr1.add(16).cast::<f32>();
                                    let l21 = *ptr1.add(20).cast::<i32>();
                                    let l22 = i32::from(*ptr1.add(24).cast::<u8>());
                                    let l24 = i32::from(*ptr1.add(32).cast::<u8>());
                                    let l26 = *ptr1.add(40).cast::<*mut u8>();
                                    let l27 = *ptr1.add(44).cast::<usize>();
                                    let len28 = l27;
                                    let bytes28 = _rt::Vec::from_raw_parts(
                                        l26.cast(),
                                        len28,
                                        len28,
                                    );
                                    let l29 = *ptr1.add(48).cast::<*mut u8>();
                                    let l30 = *ptr1.add(52).cast::<usize>();
                                    let base62 = l29;
                                    let len62 = l30;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62.add(i * 56);
                                        let e62 = {
                                            let l31 = *base.add(0).cast::<*mut u8>();
                                            let l32 = *base.add(4).cast::<usize>();
                                            let len33 = l32;
                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                l31.cast(),
                                                len33,
                                                len33,
                                            );
                                            let l34 = i32::from(*base.add(8).cast::<u8>());
                                            let l38 = i32::from(*base.add(20).cast::<u8>());
                                            let l54 = i32::from(*base.add(32).cast::<u8>());
                                            let l58 = i32::from(*base.add(44).cast::<u8>());
                                            super::super::super::wavs::agent::common::Message {
                                                role: _rt::string_lift(bytes33),
                                                content: match l34 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l35 = *base.add(12).cast::<*mut u8>();
                                                            let l36 = *base.add(16).cast::<usize>();
                                                            let len37 = l36;
                                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                                l35.cast(),
                                                                len37,
                                                                len37,
                                                            );
                                                            _rt::string_lift(bytes37)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                tool_calls: match l38 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l39 = *base.add(24).cast::<*mut u8>();
                                                            let l40 = *base.add(28).cast::<usize>();
                                                            let base53 = l39;
                                                            let len53 = l40;
                                                            let mut result53 = _rt::Vec::with_capacity(len53);
                                                            for i in 0..len53 {
                                                                let base = base53.add(i * 32);
                                                                let e53 = {
                                                                    let l41 = *base.add(0).cast::<*mut u8>();
                                                                    let l42 = *base.add(4).cast::<usize>();
                                                                    let len43 = l42;
                                                                    let bytes43 = _rt::Vec::from_raw_parts(
                                                                        l41.cast(),
                                                                        len43,
                                                                        len43,
                                                                    );
                                                                    let l44 = *base.add(8).cast::<*mut u8>();
                                                                    let l45 = *base.add(12).cast::<usize>();
                                                                    let len46 = l45;
                                                                    let bytes46 = _rt::Vec::from_raw_parts(
                                                                        l44.cast(),
                                                                        len46,
                                                                        len46,
                                                                    );
                                                                    let l47 = *base.add(16).cast::<*mut u8>();
                                                                    let l48 = *base.add(20).cast::<usize>();
                                                                    let len49 = l48;
                                                                    let bytes49 = _rt::Vec::from_raw_parts(
                                                                        l47.cast(),
                                                                        len49,
                                                                        len49,
                                                                    );
                                                                    let l50 = *base.add(24).cast::<*mut u8>();
                                                                    let l51 = *base.add(28).cast::<usize>();
                                                                    let len52 = l51;
                                                                    let bytes52 = _rt::Vec::from_raw_parts(
                                                                        l50.cast(),
                                                                        len52,
                                                                        len52,
                                                                    );
                                                                    super::super::super::wavs::agent::common::ToolCall {
                                                                        id: _rt::string_lift(bytes43),
                                                                        tool_type: _rt::string_lift(bytes46),
                                                                        function: super::super::super::wavs::agent::common::ToolCallFunction {
                                                                            name: _rt::string_lift(bytes49),
                                                                            arguments: _rt::string_lift(bytes52),
                                                                        },
                                                                    }
                                                                };
                                                                result53.push(e53);
                                                            }
                                                            _rt::cabi_dealloc(base53, len53 * 32, 4);
                                                            result53
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                tool_call_id: match l54 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l55 = *base.add(36).cast::<*mut u8>();
                                                            let l56 = *base.add(40).cast::<usize>();
                                                            let len57 = l56;
                                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                                l55.cast(),
                                                                len57,
                                                                len57,
                                                            );
                                                            _rt::string_lift(bytes57)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                name: match l58 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l59 = *base.add(48).cast::<*mut u8>();
                                                            let l60 = *base.add(52).cast::<usize>();
                                                            let len61 = l60;
                                                            let bytes61 = _rt::Vec::from_raw_parts(
                                                                l59.cast(),
                                                                len61,
                                                                len61,
                                                            );
                                                            _rt::string_lift(bytes61)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(base62, len62 * 56, 4);
                                    let l63 = *ptr1.add(56).cast::<*mut u8>();
                                    let l64 = *ptr1.add(60).cast::<usize>();
                                    let base71 = l63;
                                    let len71 = l64;
                                    let mut result71 = _rt::Vec::with_capacity(len71);
                                    for i in 0..len71 {
                                        let base = base71.add(i * 16);
                                        let e71 = {
                                            let l65 = *base.add(0).cast::<*mut u8>();
                                            let l66 = *base.add(4).cast::<usize>();
                                            let len67 = l66;
                                            let bytes67 = _rt::Vec::from_raw_parts(
                                                l65.cast(),
                                                len67,
                                                len67,
                                            );
                                            let l68 = *base.add(8).cast::<*mut u8>();
                                            let l69 = *base.add(12).cast::<usize>();
                                            let len70 = l69;
                                            let bytes70 = _rt::Vec::from_raw_parts(
                                                l68.cast(),
                                                len70,
                                                len70,
                                            );
                                            (_rt::string_lift(bytes67), _rt::string_lift(bytes70))
                                        };
                                        result71.push(e71);
                                    }
                                    _rt::cabi_dealloc(base71, len71 * 16, 4);
                                    Config {
                                        contracts: result18,
                                        llm_config: LlmOptions {
                                            temperature: l19,
                                            top_p: l20,
                                            seed: l21 as u32,
                                            max_tokens: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = *ptr1.add(28).cast::<i32>();
                                                        l23 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            context_window: match l24 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l25 = *ptr1.add(36).cast::<i32>();
                                                        l25 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        },
                                        model: _rt::string_lift(bytes28),
                                        messages: result62,
                                        config: result71,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l72 = *ptr1.add(4).cast::<*mut u8>();
                                    let l73 = *ptr1.add(8).cast::<usize>();
                                    let len74 = l73;
                                    let bytes74 = _rt::Vec::from_raw_parts(
                                        l72.cast(),
                                        len74,
                                        len74,
                                    );
                                    _rt::string_lift(bytes74)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ConfigManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Load Config from JSON
                pub fn from_json(&self, json: &str) -> Result<Config, AgentError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 64]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 64],
                        );
                        let vec0 = json;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]config-manager.from-json"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let base18 = l3;
                                    let len18 = l4;
                                    let mut result18 = _rt::Vec::with_capacity(len18);
                                    for i in 0..len18 {
                                        let base = base18.add(i * 36);
                                        let e18 = {
                                            let l5 = *base.add(0).cast::<*mut u8>();
                                            let l6 = *base.add(4).cast::<usize>();
                                            let len7 = l6;
                                            let bytes7 = _rt::Vec::from_raw_parts(
                                                l5.cast(),
                                                len7,
                                                len7,
                                            );
                                            let l8 = *base.add(8).cast::<*mut u8>();
                                            let l9 = *base.add(12).cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            let l11 = *base.add(16).cast::<*mut u8>();
                                            let l12 = *base.add(20).cast::<usize>();
                                            let len13 = l12;
                                            let bytes13 = _rt::Vec::from_raw_parts(
                                                l11.cast(),
                                                len13,
                                                len13,
                                            );
                                            let l14 = i32::from(*base.add(24).cast::<u8>());
                                            super::super::super::wavs::agent::contracts::Contract {
                                                name: _rt::string_lift(bytes7),
                                                address: _rt::string_lift(bytes10),
                                                abi: _rt::string_lift(bytes13),
                                                description: match l14 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l15 = *base.add(28).cast::<*mut u8>();
                                                            let l16 = *base.add(32).cast::<usize>();
                                                            let len17 = l16;
                                                            let bytes17 = _rt::Vec::from_raw_parts(
                                                                l15.cast(),
                                                                len17,
                                                                len17,
                                                            );
                                                            _rt::string_lift(bytes17)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        result18.push(e18);
                                    }
                                    _rt::cabi_dealloc(base18, len18 * 36, 4);
                                    let l19 = *ptr1.add(12).cast::<f32>();
                                    let l20 = *ptr1.add(16).cast::<f32>();
                                    let l21 = *ptr1.add(20).cast::<i32>();
                                    let l22 = i32::from(*ptr1.add(24).cast::<u8>());
                                    let l24 = i32::from(*ptr1.add(32).cast::<u8>());
                                    let l26 = *ptr1.add(40).cast::<*mut u8>();
                                    let l27 = *ptr1.add(44).cast::<usize>();
                                    let len28 = l27;
                                    let bytes28 = _rt::Vec::from_raw_parts(
                                        l26.cast(),
                                        len28,
                                        len28,
                                    );
                                    let l29 = *ptr1.add(48).cast::<*mut u8>();
                                    let l30 = *ptr1.add(52).cast::<usize>();
                                    let base62 = l29;
                                    let len62 = l30;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62.add(i * 56);
                                        let e62 = {
                                            let l31 = *base.add(0).cast::<*mut u8>();
                                            let l32 = *base.add(4).cast::<usize>();
                                            let len33 = l32;
                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                l31.cast(),
                                                len33,
                                                len33,
                                            );
                                            let l34 = i32::from(*base.add(8).cast::<u8>());
                                            let l38 = i32::from(*base.add(20).cast::<u8>());
                                            let l54 = i32::from(*base.add(32).cast::<u8>());
                                            let l58 = i32::from(*base.add(44).cast::<u8>());
                                            super::super::super::wavs::agent::common::Message {
                                                role: _rt::string_lift(bytes33),
                                                content: match l34 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l35 = *base.add(12).cast::<*mut u8>();
                                                            let l36 = *base.add(16).cast::<usize>();
                                                            let len37 = l36;
                                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                                l35.cast(),
                                                                len37,
                                                                len37,
                                                            );
                                                            _rt::string_lift(bytes37)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                tool_calls: match l38 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l39 = *base.add(24).cast::<*mut u8>();
                                                            let l40 = *base.add(28).cast::<usize>();
                                                            let base53 = l39;
                                                            let len53 = l40;
                                                            let mut result53 = _rt::Vec::with_capacity(len53);
                                                            for i in 0..len53 {
                                                                let base = base53.add(i * 32);
                                                                let e53 = {
                                                                    let l41 = *base.add(0).cast::<*mut u8>();
                                                                    let l42 = *base.add(4).cast::<usize>();
                                                                    let len43 = l42;
                                                                    let bytes43 = _rt::Vec::from_raw_parts(
                                                                        l41.cast(),
                                                                        len43,
                                                                        len43,
                                                                    );
                                                                    let l44 = *base.add(8).cast::<*mut u8>();
                                                                    let l45 = *base.add(12).cast::<usize>();
                                                                    let len46 = l45;
                                                                    let bytes46 = _rt::Vec::from_raw_parts(
                                                                        l44.cast(),
                                                                        len46,
                                                                        len46,
                                                                    );
                                                                    let l47 = *base.add(16).cast::<*mut u8>();
                                                                    let l48 = *base.add(20).cast::<usize>();
                                                                    let len49 = l48;
                                                                    let bytes49 = _rt::Vec::from_raw_parts(
                                                                        l47.cast(),
                                                                        len49,
                                                                        len49,
                                                                    );
                                                                    let l50 = *base.add(24).cast::<*mut u8>();
                                                                    let l51 = *base.add(28).cast::<usize>();
                                                                    let len52 = l51;
                                                                    let bytes52 = _rt::Vec::from_raw_parts(
                                                                        l50.cast(),
                                                                        len52,
                                                                        len52,
                                                                    );
                                                                    super::super::super::wavs::agent::common::ToolCall {
                                                                        id: _rt::string_lift(bytes43),
                                                                        tool_type: _rt::string_lift(bytes46),
                                                                        function: super::super::super::wavs::agent::common::ToolCallFunction {
                                                                            name: _rt::string_lift(bytes49),
                                                                            arguments: _rt::string_lift(bytes52),
                                                                        },
                                                                    }
                                                                };
                                                                result53.push(e53);
                                                            }
                                                            _rt::cabi_dealloc(base53, len53 * 32, 4);
                                                            result53
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                tool_call_id: match l54 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l55 = *base.add(36).cast::<*mut u8>();
                                                            let l56 = *base.add(40).cast::<usize>();
                                                            let len57 = l56;
                                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                                l55.cast(),
                                                                len57,
                                                                len57,
                                                            );
                                                            _rt::string_lift(bytes57)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                name: match l58 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l59 = *base.add(48).cast::<*mut u8>();
                                                            let l60 = *base.add(52).cast::<usize>();
                                                            let len61 = l60;
                                                            let bytes61 = _rt::Vec::from_raw_parts(
                                                                l59.cast(),
                                                                len61,
                                                                len61,
                                                            );
                                                            _rt::string_lift(bytes61)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(base62, len62 * 56, 4);
                                    let l63 = *ptr1.add(56).cast::<*mut u8>();
                                    let l64 = *ptr1.add(60).cast::<usize>();
                                    let base71 = l63;
                                    let len71 = l64;
                                    let mut result71 = _rt::Vec::with_capacity(len71);
                                    for i in 0..len71 {
                                        let base = base71.add(i * 16);
                                        let e71 = {
                                            let l65 = *base.add(0).cast::<*mut u8>();
                                            let l66 = *base.add(4).cast::<usize>();
                                            let len67 = l66;
                                            let bytes67 = _rt::Vec::from_raw_parts(
                                                l65.cast(),
                                                len67,
                                                len67,
                                            );
                                            let l68 = *base.add(8).cast::<*mut u8>();
                                            let l69 = *base.add(12).cast::<usize>();
                                            let len70 = l69;
                                            let bytes70 = _rt::Vec::from_raw_parts(
                                                l68.cast(),
                                                len70,
                                                len70,
                                            );
                                            (_rt::string_lift(bytes67), _rt::string_lift(bytes70))
                                        };
                                        result71.push(e71);
                                    }
                                    _rt::cabi_dealloc(base71, len71 * 16, 4);
                                    Config {
                                        contracts: result18,
                                        llm_config: LlmOptions {
                                            temperature: l19,
                                            top_p: l20,
                                            seed: l21 as u32,
                                            max_tokens: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = *ptr1.add(28).cast::<i32>();
                                                        l23 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            context_window: match l24 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l25 = *ptr1.add(36).cast::<i32>();
                                                        l25 as u32
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        },
                                        model: _rt::string_lift(bytes28),
                                        messages: result62,
                                        config: result71,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l72 = i32::from(*ptr1.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V112;
                                    let v112 = match l72 {
                                        0 => {
                                            let e112 = {
                                                let l73 = *ptr1.add(8).cast::<*mut u8>();
                                                let l74 = *ptr1.add(12).cast::<usize>();
                                                let len75 = l74;
                                                let bytes75 = _rt::Vec::from_raw_parts(
                                                    l73.cast(),
                                                    len75,
                                                    len75,
                                                );
                                                _rt::string_lift(bytes75)
                                            };
                                            V112::Api(e112)
                                        }
                                        1 => {
                                            let e112 = {
                                                let l76 = *ptr1.add(8).cast::<*mut u8>();
                                                let l77 = *ptr1.add(12).cast::<usize>();
                                                let len78 = l77;
                                                let bytes78 = _rt::Vec::from_raw_parts(
                                                    l76.cast(),
                                                    len78,
                                                    len78,
                                                );
                                                _rt::string_lift(bytes78)
                                            };
                                            V112::Http(e112)
                                        }
                                        2 => {
                                            let e112 = {
                                                let l79 = *ptr1.add(8).cast::<*mut u8>();
                                                let l80 = *ptr1.add(12).cast::<usize>();
                                                let len81 = l80;
                                                let bytes81 = _rt::Vec::from_raw_parts(
                                                    l79.cast(),
                                                    len81,
                                                    len81,
                                                );
                                                _rt::string_lift(bytes81)
                                            };
                                            V112::ExternalService(e112)
                                        }
                                        3 => {
                                            let e112 = {
                                                let l82 = *ptr1.add(8).cast::<*mut u8>();
                                                let l83 = *ptr1.add(12).cast::<usize>();
                                                let len84 = l83;
                                                let bytes84 = _rt::Vec::from_raw_parts(
                                                    l82.cast(),
                                                    len84,
                                                    len84,
                                                );
                                                _rt::string_lift(bytes84)
                                            };
                                            V112::Config(e112)
                                        }
                                        4 => {
                                            let e112 = {
                                                let l85 = *ptr1.add(8).cast::<*mut u8>();
                                                let l86 = *ptr1.add(12).cast::<usize>();
                                                let len87 = l86;
                                                let bytes87 = _rt::Vec::from_raw_parts(
                                                    l85.cast(),
                                                    len87,
                                                    len87,
                                                );
                                                _rt::string_lift(bytes87)
                                            };
                                            V112::Contract(e112)
                                        }
                                        5 => {
                                            let e112 = {
                                                let l88 = *ptr1.add(8).cast::<*mut u8>();
                                                let l89 = *ptr1.add(12).cast::<usize>();
                                                let len90 = l89;
                                                let bytes90 = _rt::Vec::from_raw_parts(
                                                    l88.cast(),
                                                    len90,
                                                    len90,
                                                );
                                                _rt::string_lift(bytes90)
                                            };
                                            V112::Configuration(e112)
                                        }
                                        6 => {
                                            let e112 = {
                                                let l91 = *ptr1.add(8).cast::<*mut u8>();
                                                let l92 = *ptr1.add(12).cast::<usize>();
                                                let len93 = l92;
                                                let bytes93 = _rt::Vec::from_raw_parts(
                                                    l91.cast(),
                                                    len93,
                                                    len93,
                                                );
                                                _rt::string_lift(bytes93)
                                            };
                                            V112::ContextLoading(e112)
                                        }
                                        7 => {
                                            let e112 = {
                                                let l94 = *ptr1.add(8).cast::<*mut u8>();
                                                let l95 = *ptr1.add(12).cast::<usize>();
                                                let len96 = l95;
                                                let bytes96 = _rt::Vec::from_raw_parts(
                                                    l94.cast(),
                                                    len96,
                                                    len96,
                                                );
                                                _rt::string_lift(bytes96)
                                            };
                                            V112::ContextValidation(e112)
                                        }
                                        8 => {
                                            let e112 = {
                                                let l97 = *ptr1.add(8).cast::<*mut u8>();
                                                let l98 = *ptr1.add(12).cast::<usize>();
                                                let len99 = l98;
                                                let bytes99 = _rt::Vec::from_raw_parts(
                                                    l97.cast(),
                                                    len99,
                                                    len99,
                                                );
                                                _rt::string_lift(bytes99)
                                            };
                                            V112::Llm(e112)
                                        }
                                        9 => {
                                            let e112 = {
                                                let l100 = *ptr1.add(8).cast::<*mut u8>();
                                                let l101 = *ptr1.add(12).cast::<usize>();
                                                let len102 = l101;
                                                let bytes102 = _rt::Vec::from_raw_parts(
                                                    l100.cast(),
                                                    len102,
                                                    len102,
                                                );
                                                _rt::string_lift(bytes102)
                                            };
                                            V112::Io(e112)
                                        }
                                        10 => {
                                            let e112 = {
                                                let l103 = *ptr1.add(8).cast::<*mut u8>();
                                                let l104 = *ptr1.add(12).cast::<usize>();
                                                let len105 = l104;
                                                let bytes105 = _rt::Vec::from_raw_parts(
                                                    l103.cast(),
                                                    len105,
                                                    len105,
                                                );
                                                _rt::string_lift(bytes105)
                                            };
                                            V112::Transaction(e112)
                                        }
                                        11 => {
                                            let e112 = {
                                                let l106 = *ptr1.add(8).cast::<*mut u8>();
                                                let l107 = *ptr1.add(12).cast::<usize>();
                                                let len108 = l107;
                                                let bytes108 = _rt::Vec::from_raw_parts(
                                                    l106.cast(),
                                                    len108,
                                                    len108,
                                                );
                                                _rt::string_lift(bytes108)
                                            };
                                            V112::Utf8(e112)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e112 = {
                                                let l109 = *ptr1.add(8).cast::<*mut u8>();
                                                let l110 = *ptr1.add(12).cast::<usize>();
                                                let len111 = l110;
                                                let bytes111 = _rt::Vec::from_raw_parts(
                                                    l109.cast(),
                                                    len111,
                                                    len111,
                                                );
                                                _rt::string_lift(bytes111)
                                            };
                                            V112::Other(e112)
                                        }
                                    };
                                    v112
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ConfigManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Serialize the Config to a JSON string
                pub fn to_json(&self) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]config-manager.to-json"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(
                                        l2.cast(),
                                        len4,
                                        len4,
                                    );
                                    _rt::string_lift(bytes4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = *ptr0.add(4).cast::<*mut u8>();
                                    let l6 = *ptr0.add(8).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(
                                        l5.cast(),
                                        len7,
                                        len7,
                                    );
                                    _rt::string_lift(bytes7)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ConfigManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Format contract descriptions for the system prompt
                pub fn format_contract_descriptions(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]config-manager.format-contract-descriptions"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl ConfigManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Get a smart contract by name
                pub fn get_contract_by_name(&self, name: &str) -> Option<Contract> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 40],
                        );
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]config-manager.get-contract-by-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(
                                        l3.cast(),
                                        len5,
                                        len5,
                                    );
                                    let l6 = *ptr1.add(12).cast::<*mut u8>();
                                    let l7 = *ptr1.add(16).cast::<usize>();
                                    let len8 = l7;
                                    let bytes8 = _rt::Vec::from_raw_parts(
                                        l6.cast(),
                                        len8,
                                        len8,
                                    );
                                    let l9 = *ptr1.add(20).cast::<*mut u8>();
                                    let l10 = *ptr1.add(24).cast::<usize>();
                                    let len11 = l10;
                                    let bytes11 = _rt::Vec::from_raw_parts(
                                        l9.cast(),
                                        len11,
                                        len11,
                                    );
                                    let l12 = i32::from(*ptr1.add(28).cast::<u8>());
                                    super::super::super::wavs::agent::contracts::Contract {
                                        name: _rt::string_lift(bytes5),
                                        address: _rt::string_lift(bytes8),
                                        abi: _rt::string_lift(bytes11),
                                        description: match l12 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l13 = *ptr1.add(32).cast::<*mut u8>();
                                                    let l14 = *ptr1.add(36).cast::<usize>();
                                                    let len15 = l14;
                                                    let bytes15 = _rt::Vec::from_raw_parts(
                                                        l13.cast(),
                                                        len15,
                                                        len15,
                                                    );
                                                    _rt::string_lift(bytes15)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ConfigManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Validate the Config for required fields and logical consistency
                pub fn validate(&self) -> Result<(), AgentError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/config")]
                        extern "C" {
                            #[link_name = "[method]config-manager.validate"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V42;
                                    let v42 = match l2 {
                                        0 => {
                                            let e42 = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            V42::Api(e42)
                                        }
                                        1 => {
                                            let e42 = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                _rt::string_lift(bytes8)
                                            };
                                            V42::Http(e42)
                                        }
                                        2 => {
                                            let e42 = {
                                                let l9 = *ptr0.add(8).cast::<*mut u8>();
                                                let l10 = *ptr0.add(12).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            V42::ExternalService(e42)
                                        }
                                        3 => {
                                            let e42 = {
                                                let l12 = *ptr0.add(8).cast::<*mut u8>();
                                                let l13 = *ptr0.add(12).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V42::Config(e42)
                                        }
                                        4 => {
                                            let e42 = {
                                                let l15 = *ptr0.add(8).cast::<*mut u8>();
                                                let l16 = *ptr0.add(12).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            V42::Contract(e42)
                                        }
                                        5 => {
                                            let e42 = {
                                                let l18 = *ptr0.add(8).cast::<*mut u8>();
                                                let l19 = *ptr0.add(12).cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            V42::Configuration(e42)
                                        }
                                        6 => {
                                            let e42 = {
                                                let l21 = *ptr0.add(8).cast::<*mut u8>();
                                                let l22 = *ptr0.add(12).cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                _rt::string_lift(bytes23)
                                            };
                                            V42::ContextLoading(e42)
                                        }
                                        7 => {
                                            let e42 = {
                                                let l24 = *ptr0.add(8).cast::<*mut u8>();
                                                let l25 = *ptr0.add(12).cast::<usize>();
                                                let len26 = l25;
                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                    l24.cast(),
                                                    len26,
                                                    len26,
                                                );
                                                _rt::string_lift(bytes26)
                                            };
                                            V42::ContextValidation(e42)
                                        }
                                        8 => {
                                            let e42 = {
                                                let l27 = *ptr0.add(8).cast::<*mut u8>();
                                                let l28 = *ptr0.add(12).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                _rt::string_lift(bytes29)
                                            };
                                            V42::Llm(e42)
                                        }
                                        9 => {
                                            let e42 = {
                                                let l30 = *ptr0.add(8).cast::<*mut u8>();
                                                let l31 = *ptr0.add(12).cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );
                                                _rt::string_lift(bytes32)
                                            };
                                            V42::Io(e42)
                                        }
                                        10 => {
                                            let e42 = {
                                                let l33 = *ptr0.add(8).cast::<*mut u8>();
                                                let l34 = *ptr0.add(12).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V42::Transaction(e42)
                                        }
                                        11 => {
                                            let e42 = {
                                                let l36 = *ptr0.add(8).cast::<*mut u8>();
                                                let l37 = *ptr0.add(12).cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            V42::Utf8(e42)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e42 = {
                                                let l39 = *ptr0.add(8).cast::<*mut u8>();
                                                let l40 = *ptr0.add(12).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V42::Other(e42)
                                        }
                                    };
                                    v42
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
        #[allow(dead_code, clippy::all)]
        pub mod client {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type AgentError = super::super::super::wavs::agent::errors::AgentError;
            pub type Message = super::super::super::wavs::agent::common::Message;
            pub type Tool = super::super::super::wavs::agent::common::Tool;
            pub type CustomToolHandler = super::super::super::wavs::agent::common::CustomToolHandler;
            pub type Transaction = super::super::super::wavs::agent::contracts::Transaction;
            pub type Config = super::super::super::wavs::agent::config::Config;
            pub type LlmOptions = super::super::super::wavs::agent::config::LlmOptions;
            /// Response from an LLM interaction
            #[derive(Clone)]
            pub enum LlmResponse {
                /// Transaction to be executed
                Transaction(Transaction),
                /// Text response (when no action is needed)
                Text(_rt::String),
            }
            impl ::core::fmt::Debug for LlmResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LlmResponse::Transaction(e) => {
                            f.debug_tuple("LlmResponse::Transaction").field(e).finish()
                        }
                        LlmResponse::Text(e) => {
                            f.debug_tuple("LlmResponse::Text").field(e).finish()
                        }
                    }
                }
            }
            /// Client for making LLM API requests
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct LlmClient {
                handle: _rt::Resource<LlmClient>,
            }
            impl LlmClient {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for LlmClient {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wavs:agent/client")]
                        extern "C" {
                            #[link_name = "[resource-drop]llm-client"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl LlmClient {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a new LLM client with default configuration
                pub fn new(&self, model: &str) -> Result<LlmClient, AgentError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = model;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/client")]
                        extern "C" {
                            #[link_name = "[method]llm-client.new"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();
                                    LlmClient::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V44;
                                    let v44 = match l4 {
                                        0 => {
                                            let e44 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    l5.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            V44::Api(e44)
                                        }
                                        1 => {
                                            let e44 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );
                                                _rt::string_lift(bytes10)
                                            };
                                            V44::Http(e44)
                                        }
                                        2 => {
                                            let e44 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );
                                                _rt::string_lift(bytes13)
                                            };
                                            V44::ExternalService(e44)
                                        }
                                        3 => {
                                            let e44 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );
                                                _rt::string_lift(bytes16)
                                            };
                                            V44::Config(e44)
                                        }
                                        4 => {
                                            let e44 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            V44::Contract(e44)
                                        }
                                        5 => {
                                            let e44 = {
                                                let l20 = *ptr1.add(8).cast::<*mut u8>();
                                                let l21 = *ptr1.add(12).cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            V44::Configuration(e44)
                                        }
                                        6 => {
                                            let e44 = {
                                                let l23 = *ptr1.add(8).cast::<*mut u8>();
                                                let l24 = *ptr1.add(12).cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );
                                                _rt::string_lift(bytes25)
                                            };
                                            V44::ContextLoading(e44)
                                        }
                                        7 => {
                                            let e44 = {
                                                let l26 = *ptr1.add(8).cast::<*mut u8>();
                                                let l27 = *ptr1.add(12).cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            V44::ContextValidation(e44)
                                        }
                                        8 => {
                                            let e44 = {
                                                let l29 = *ptr1.add(8).cast::<*mut u8>();
                                                let l30 = *ptr1.add(12).cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                _rt::string_lift(bytes31)
                                            };
                                            V44::Llm(e44)
                                        }
                                        9 => {
                                            let e44 = {
                                                let l32 = *ptr1.add(8).cast::<*mut u8>();
                                                let l33 = *ptr1.add(12).cast::<usize>();
                                                let len34 = l33;
                                                let bytes34 = _rt::Vec::from_raw_parts(
                                                    l32.cast(),
                                                    len34,
                                                    len34,
                                                );
                                                _rt::string_lift(bytes34)
                                            };
                                            V44::Io(e44)
                                        }
                                        10 => {
                                            let e44 = {
                                                let l35 = *ptr1.add(8).cast::<*mut u8>();
                                                let l36 = *ptr1.add(12).cast::<usize>();
                                                let len37 = l36;
                                                let bytes37 = _rt::Vec::from_raw_parts(
                                                    l35.cast(),
                                                    len37,
                                                    len37,
                                                );
                                                _rt::string_lift(bytes37)
                                            };
                                            V44::Transaction(e44)
                                        }
                                        11 => {
                                            let e44 = {
                                                let l38 = *ptr1.add(8).cast::<*mut u8>();
                                                let l39 = *ptr1.add(12).cast::<usize>();
                                                let len40 = l39;
                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                    l38.cast(),
                                                    len40,
                                                    len40,
                                                );
                                                _rt::string_lift(bytes40)
                                            };
                                            V44::Utf8(e44)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e44 = {
                                                let l41 = *ptr1.add(8).cast::<*mut u8>();
                                                let l42 = *ptr1.add(12).cast::<usize>();
                                                let len43 = l42;
                                                let bytes43 = _rt::Vec::from_raw_parts(
                                                    l41.cast(),
                                                    len43,
                                                    len43,
                                                );
                                                _rt::string_lift(bytes43)
                                            };
                                            V44::Other(e44)
                                        }
                                    };
                                    v44
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl LlmClient {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a new LLM client from a JSON configuration string
                pub fn from_json(
                    &self,
                    model: &str,
                    json_config: &str,
                ) -> Result<LlmClient, AgentError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = model;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = json_config;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/client")]
                        extern "C" {
                            #[link_name = "[method]llm-client.from-json"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => {
                                let e = {
                                    let l4 = *ptr2.add(4).cast::<i32>();
                                    LlmClient::from_handle(l4 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr2.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V45;
                                    let v45 = match l5 {
                                        0 => {
                                            let e45 = {
                                                let l6 = *ptr2.add(8).cast::<*mut u8>();
                                                let l7 = *ptr2.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                _rt::string_lift(bytes8)
                                            };
                                            V45::Api(e45)
                                        }
                                        1 => {
                                            let e45 = {
                                                let l9 = *ptr2.add(8).cast::<*mut u8>();
                                                let l10 = *ptr2.add(12).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            V45::Http(e45)
                                        }
                                        2 => {
                                            let e45 = {
                                                let l12 = *ptr2.add(8).cast::<*mut u8>();
                                                let l13 = *ptr2.add(12).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V45::ExternalService(e45)
                                        }
                                        3 => {
                                            let e45 = {
                                                let l15 = *ptr2.add(8).cast::<*mut u8>();
                                                let l16 = *ptr2.add(12).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            V45::Config(e45)
                                        }
                                        4 => {
                                            let e45 = {
                                                let l18 = *ptr2.add(8).cast::<*mut u8>();
                                                let l19 = *ptr2.add(12).cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            V45::Contract(e45)
                                        }
                                        5 => {
                                            let e45 = {
                                                let l21 = *ptr2.add(8).cast::<*mut u8>();
                                                let l22 = *ptr2.add(12).cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                _rt::string_lift(bytes23)
                                            };
                                            V45::Configuration(e45)
                                        }
                                        6 => {
                                            let e45 = {
                                                let l24 = *ptr2.add(8).cast::<*mut u8>();
                                                let l25 = *ptr2.add(12).cast::<usize>();
                                                let len26 = l25;
                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                    l24.cast(),
                                                    len26,
                                                    len26,
                                                );
                                                _rt::string_lift(bytes26)
                                            };
                                            V45::ContextLoading(e45)
                                        }
                                        7 => {
                                            let e45 = {
                                                let l27 = *ptr2.add(8).cast::<*mut u8>();
                                                let l28 = *ptr2.add(12).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                _rt::string_lift(bytes29)
                                            };
                                            V45::ContextValidation(e45)
                                        }
                                        8 => {
                                            let e45 = {
                                                let l30 = *ptr2.add(8).cast::<*mut u8>();
                                                let l31 = *ptr2.add(12).cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );
                                                _rt::string_lift(bytes32)
                                            };
                                            V45::Llm(e45)
                                        }
                                        9 => {
                                            let e45 = {
                                                let l33 = *ptr2.add(8).cast::<*mut u8>();
                                                let l34 = *ptr2.add(12).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V45::Io(e45)
                                        }
                                        10 => {
                                            let e45 = {
                                                let l36 = *ptr2.add(8).cast::<*mut u8>();
                                                let l37 = *ptr2.add(12).cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            V45::Transaction(e45)
                                        }
                                        11 => {
                                            let e45 = {
                                                let l39 = *ptr2.add(8).cast::<*mut u8>();
                                                let l40 = *ptr2.add(12).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V45::Utf8(e45)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e45 = {
                                                let l42 = *ptr2.add(8).cast::<*mut u8>();
                                                let l43 = *ptr2.add(12).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V45::Other(e45)
                                        }
                                    };
                                    v45
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl LlmClient {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a new LLM client with custom configuration
                pub fn with_config(
                    &self,
                    model: &str,
                    config: LlmOptions,
                ) -> Result<LlmClient, AgentError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = model;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let super::super::super::wavs::agent::config::LlmOptions {
                            temperature: temperature1,
                            top_p: top_p1,
                            seed: seed1,
                            max_tokens: max_tokens1,
                            context_window: context_window1,
                        } = config;
                        let (result2_0, result2_1) = match max_tokens1 {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result3_0, result3_1) = match context_window1 {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/client")]
                        extern "C" {
                            #[link_name = "[method]llm-client.with-config"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: f32,
                                _: f32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: f32,
                            _: f32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_f32(temperature1),
                            _rt::as_f32(top_p1),
                            _rt::as_i32(seed1),
                            result2_0,
                            result2_1,
                            result3_0,
                            result3_1,
                            ptr4,
                        );
                        let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                        match l5 {
                            0 => {
                                let e = {
                                    let l6 = *ptr4.add(4).cast::<i32>();
                                    LlmClient::from_handle(l6 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l7 = i32::from(*ptr4.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V47;
                                    let v47 = match l7 {
                                        0 => {
                                            let e47 = {
                                                let l8 = *ptr4.add(8).cast::<*mut u8>();
                                                let l9 = *ptr4.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );
                                                _rt::string_lift(bytes10)
                                            };
                                            V47::Api(e47)
                                        }
                                        1 => {
                                            let e47 = {
                                                let l11 = *ptr4.add(8).cast::<*mut u8>();
                                                let l12 = *ptr4.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );
                                                _rt::string_lift(bytes13)
                                            };
                                            V47::Http(e47)
                                        }
                                        2 => {
                                            let e47 = {
                                                let l14 = *ptr4.add(8).cast::<*mut u8>();
                                                let l15 = *ptr4.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );
                                                _rt::string_lift(bytes16)
                                            };
                                            V47::ExternalService(e47)
                                        }
                                        3 => {
                                            let e47 = {
                                                let l17 = *ptr4.add(8).cast::<*mut u8>();
                                                let l18 = *ptr4.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            V47::Config(e47)
                                        }
                                        4 => {
                                            let e47 = {
                                                let l20 = *ptr4.add(8).cast::<*mut u8>();
                                                let l21 = *ptr4.add(12).cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            V47::Contract(e47)
                                        }
                                        5 => {
                                            let e47 = {
                                                let l23 = *ptr4.add(8).cast::<*mut u8>();
                                                let l24 = *ptr4.add(12).cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );
                                                _rt::string_lift(bytes25)
                                            };
                                            V47::Configuration(e47)
                                        }
                                        6 => {
                                            let e47 = {
                                                let l26 = *ptr4.add(8).cast::<*mut u8>();
                                                let l27 = *ptr4.add(12).cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            V47::ContextLoading(e47)
                                        }
                                        7 => {
                                            let e47 = {
                                                let l29 = *ptr4.add(8).cast::<*mut u8>();
                                                let l30 = *ptr4.add(12).cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                _rt::string_lift(bytes31)
                                            };
                                            V47::ContextValidation(e47)
                                        }
                                        8 => {
                                            let e47 = {
                                                let l32 = *ptr4.add(8).cast::<*mut u8>();
                                                let l33 = *ptr4.add(12).cast::<usize>();
                                                let len34 = l33;
                                                let bytes34 = _rt::Vec::from_raw_parts(
                                                    l32.cast(),
                                                    len34,
                                                    len34,
                                                );
                                                _rt::string_lift(bytes34)
                                            };
                                            V47::Llm(e47)
                                        }
                                        9 => {
                                            let e47 = {
                                                let l35 = *ptr4.add(8).cast::<*mut u8>();
                                                let l36 = *ptr4.add(12).cast::<usize>();
                                                let len37 = l36;
                                                let bytes37 = _rt::Vec::from_raw_parts(
                                                    l35.cast(),
                                                    len37,
                                                    len37,
                                                );
                                                _rt::string_lift(bytes37)
                                            };
                                            V47::Io(e47)
                                        }
                                        10 => {
                                            let e47 = {
                                                let l38 = *ptr4.add(8).cast::<*mut u8>();
                                                let l39 = *ptr4.add(12).cast::<usize>();
                                                let len40 = l39;
                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                    l38.cast(),
                                                    len40,
                                                    len40,
                                                );
                                                _rt::string_lift(bytes40)
                                            };
                                            V47::Transaction(e47)
                                        }
                                        11 => {
                                            let e47 = {
                                                let l41 = *ptr4.add(8).cast::<*mut u8>();
                                                let l42 = *ptr4.add(12).cast::<usize>();
                                                let len43 = l42;
                                                let bytes43 = _rt::Vec::from_raw_parts(
                                                    l41.cast(),
                                                    len43,
                                                    len43,
                                                );
                                                _rt::string_lift(bytes43)
                                            };
                                            V47::Utf8(e47)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e47 = {
                                                let l44 = *ptr4.add(8).cast::<*mut u8>();
                                                let l45 = *ptr4.add(12).cast::<usize>();
                                                let len46 = l45;
                                                let bytes46 = _rt::Vec::from_raw_parts(
                                                    l44.cast(),
                                                    len46,
                                                    len46,
                                                );
                                                _rt::string_lift(bytes46)
                                            };
                                            V47::Other(e47)
                                        }
                                    };
                                    v47
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl LlmClient {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the model name
                pub fn get_model(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/client")]
                        extern "C" {
                            #[link_name = "[method]llm-client.get-model"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl LlmClient {
                #[allow(unused_unsafe, clippy::all)]
                /// Get a reference to the current configuration
                pub fn get_config(&self) -> LlmOptions {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 28],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/client")]
                        extern "C" {
                            #[link_name = "[method]llm-client.get-config"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<i32>();
                        let l4 = i32::from(*ptr0.add(12).cast::<u8>());
                        let l6 = i32::from(*ptr0.add(20).cast::<u8>());
                        super::super::super::wavs::agent::config::LlmOptions {
                            temperature: l1,
                            top_p: l2,
                            seed: l3 as u32,
                            max_tokens: match l4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l5 = *ptr0.add(16).cast::<i32>();
                                        l5 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            context_window: match l6 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l7 = *ptr0.add(24).cast::<i32>();
                                        l7 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        }
                    }
                }
            }
            impl LlmClient {
                #[allow(unused_unsafe, clippy::all)]
                /// Send a chat completion request, with optional tools
                pub fn chat_completion(
                    &self,
                    messages: &[Message],
                    tools: Option<&[Tool]>,
                ) -> Result<Message, AgentError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 60]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 60],
                        );
                        let vec12 = messages;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * 56,
                            4,
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 56);
                            {
                                let super::super::super::wavs::agent::common::Message {
                                    role: role0,
                                    content: content0,
                                    tool_calls: tool_calls0,
                                    tool_call_id: tool_call_id0,
                                    name: name0,
                                } = e;
                                let vec1 = role0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(4).cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                match content0 {
                                    Some(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(16).cast::<usize>() = len2;
                                        *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                    None => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match tool_calls0 {
                                    Some(e) => {
                                        *base.add(20).cast::<u8>() = (1i32) as u8;
                                        let vec9 = e;
                                        let len9 = vec9.len();
                                        let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec9.len() * 32,
                                            4,
                                        );
                                        let result9 = if layout9.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout9);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec9.into_iter().enumerate() {
                                            let base = result9.add(i * 32);
                                            {
                                                let super::super::super::wavs::agent::common::ToolCall {
                                                    id: id3,
                                                    tool_type: tool_type3,
                                                    function: function3,
                                                } = e;
                                                let vec4 = id3;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(4).cast::<usize>() = len4;
                                                *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                                let vec5 = tool_type3;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                                let super::super::super::wavs::agent::common::ToolCallFunction {
                                                    name: name6,
                                                    arguments: arguments6,
                                                } = function3;
                                                let vec7 = name6;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(20).cast::<usize>() = len7;
                                                *base.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                                let vec8 = arguments6;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base.add(28).cast::<usize>() = len8;
                                                *base.add(24).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                        }
                                        *base.add(28).cast::<usize>() = len9;
                                        *base.add(24).cast::<*mut u8>() = result9;
                                        cleanup_list.extend_from_slice(&[(result9, layout9)]);
                                    }
                                    None => {
                                        *base.add(20).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match tool_call_id0 {
                                    Some(e) => {
                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(40).cast::<usize>() = len10;
                                        *base.add(36).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    None => {
                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match name0 {
                                    Some(e) => {
                                        *base.add(44).cast::<u8>() = (1i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(52).cast::<usize>() = len11;
                                        *base.add(48).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    None => {
                                        *base.add(44).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        let (result20_0, result20_1, result20_2) = match tools {
                            Some(e) => {
                                let vec19 = e;
                                let len19 = vec19.len();
                                let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec19.len() * 40,
                                    4,
                                );
                                let result19 = if layout19.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout19);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec19.into_iter().enumerate() {
                                    let base = result19.add(i * 40);
                                    {
                                        let super::super::super::wavs::agent::common::Tool {
                                            tool_type: tool_type13,
                                            function: function13,
                                        } = e;
                                        let vec14 = tool_type13;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(4).cast::<usize>() = len14;
                                        *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                        let super::super::super::wavs::agent::common::Function {
                                            name: name15,
                                            description: description15,
                                            parameters: parameters15,
                                        } = function13;
                                        let vec16 = name15;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                        match description15 {
                                            Some(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                let vec17 = e;
                                                let ptr17 = vec17.as_ptr().cast::<u8>();
                                                let len17 = vec17.len();
                                                *base.add(24).cast::<usize>() = len17;
                                                *base.add(20).cast::<*mut u8>() = ptr17.cast_mut();
                                            }
                                            None => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        match parameters15 {
                                            Some(e) => {
                                                *base.add(28).cast::<u8>() = (1i32) as u8;
                                                let vec18 = e;
                                                let ptr18 = vec18.as_ptr().cast::<u8>();
                                                let len18 = vec18.len();
                                                *base.add(36).cast::<usize>() = len18;
                                                *base.add(32).cast::<*mut u8>() = ptr18.cast_mut();
                                            }
                                            None => {
                                                *base.add(28).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result19, layout19)]);
                                (1i32, result19, len19)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let ptr21 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/client")]
                        extern "C" {
                            #[link_name = "[method]llm-client.chat-completion"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result12,
                            len12,
                            result20_0,
                            result20_1,
                            result20_2,
                            ptr21,
                        );
                        let l22 = i32::from(*ptr21.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l22 {
                            0 => {
                                let e = {
                                    let l23 = *ptr21.add(4).cast::<*mut u8>();
                                    let l24 = *ptr21.add(8).cast::<usize>();
                                    let len25 = l24;
                                    let bytes25 = _rt::Vec::from_raw_parts(
                                        l23.cast(),
                                        len25,
                                        len25,
                                    );
                                    let l26 = i32::from(*ptr21.add(12).cast::<u8>());
                                    let l30 = i32::from(*ptr21.add(24).cast::<u8>());
                                    let l46 = i32::from(*ptr21.add(36).cast::<u8>());
                                    let l50 = i32::from(*ptr21.add(48).cast::<u8>());
                                    super::super::super::wavs::agent::common::Message {
                                        role: _rt::string_lift(bytes25),
                                        content: match l26 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l27 = *ptr21.add(16).cast::<*mut u8>();
                                                    let l28 = *ptr21.add(20).cast::<usize>();
                                                    let len29 = l28;
                                                    let bytes29 = _rt::Vec::from_raw_parts(
                                                        l27.cast(),
                                                        len29,
                                                        len29,
                                                    );
                                                    _rt::string_lift(bytes29)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        tool_calls: match l30 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l31 = *ptr21.add(28).cast::<*mut u8>();
                                                    let l32 = *ptr21.add(32).cast::<usize>();
                                                    let base45 = l31;
                                                    let len45 = l32;
                                                    let mut result45 = _rt::Vec::with_capacity(len45);
                                                    for i in 0..len45 {
                                                        let base = base45.add(i * 32);
                                                        let e45 = {
                                                            let l33 = *base.add(0).cast::<*mut u8>();
                                                            let l34 = *base.add(4).cast::<usize>();
                                                            let len35 = l34;
                                                            let bytes35 = _rt::Vec::from_raw_parts(
                                                                l33.cast(),
                                                                len35,
                                                                len35,
                                                            );
                                                            let l36 = *base.add(8).cast::<*mut u8>();
                                                            let l37 = *base.add(12).cast::<usize>();
                                                            let len38 = l37;
                                                            let bytes38 = _rt::Vec::from_raw_parts(
                                                                l36.cast(),
                                                                len38,
                                                                len38,
                                                            );
                                                            let l39 = *base.add(16).cast::<*mut u8>();
                                                            let l40 = *base.add(20).cast::<usize>();
                                                            let len41 = l40;
                                                            let bytes41 = _rt::Vec::from_raw_parts(
                                                                l39.cast(),
                                                                len41,
                                                                len41,
                                                            );
                                                            let l42 = *base.add(24).cast::<*mut u8>();
                                                            let l43 = *base.add(28).cast::<usize>();
                                                            let len44 = l43;
                                                            let bytes44 = _rt::Vec::from_raw_parts(
                                                                l42.cast(),
                                                                len44,
                                                                len44,
                                                            );
                                                            super::super::super::wavs::agent::common::ToolCall {
                                                                id: _rt::string_lift(bytes35),
                                                                tool_type: _rt::string_lift(bytes38),
                                                                function: super::super::super::wavs::agent::common::ToolCallFunction {
                                                                    name: _rt::string_lift(bytes41),
                                                                    arguments: _rt::string_lift(bytes44),
                                                                },
                                                            }
                                                        };
                                                        result45.push(e45);
                                                    }
                                                    _rt::cabi_dealloc(base45, len45 * 32, 4);
                                                    result45
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        tool_call_id: match l46 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l47 = *ptr21.add(40).cast::<*mut u8>();
                                                    let l48 = *ptr21.add(44).cast::<usize>();
                                                    let len49 = l48;
                                                    let bytes49 = _rt::Vec::from_raw_parts(
                                                        l47.cast(),
                                                        len49,
                                                        len49,
                                                    );
                                                    _rt::string_lift(bytes49)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        name: match l50 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l51 = *ptr21.add(52).cast::<*mut u8>();
                                                    let l52 = *ptr21.add(56).cast::<usize>();
                                                    let len53 = l52;
                                                    let bytes53 = _rt::Vec::from_raw_parts(
                                                        l51.cast(),
                                                        len53,
                                                        len53,
                                                    );
                                                    _rt::string_lift(bytes53)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l54 = i32::from(*ptr21.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V94;
                                    let v94 = match l54 {
                                        0 => {
                                            let e94 = {
                                                let l55 = *ptr21.add(8).cast::<*mut u8>();
                                                let l56 = *ptr21.add(12).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V94::Api(e94)
                                        }
                                        1 => {
                                            let e94 = {
                                                let l58 = *ptr21.add(8).cast::<*mut u8>();
                                                let l59 = *ptr21.add(12).cast::<usize>();
                                                let len60 = l59;
                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                    l58.cast(),
                                                    len60,
                                                    len60,
                                                );
                                                _rt::string_lift(bytes60)
                                            };
                                            V94::Http(e94)
                                        }
                                        2 => {
                                            let e94 = {
                                                let l61 = *ptr21.add(8).cast::<*mut u8>();
                                                let l62 = *ptr21.add(12).cast::<usize>();
                                                let len63 = l62;
                                                let bytes63 = _rt::Vec::from_raw_parts(
                                                    l61.cast(),
                                                    len63,
                                                    len63,
                                                );
                                                _rt::string_lift(bytes63)
                                            };
                                            V94::ExternalService(e94)
                                        }
                                        3 => {
                                            let e94 = {
                                                let l64 = *ptr21.add(8).cast::<*mut u8>();
                                                let l65 = *ptr21.add(12).cast::<usize>();
                                                let len66 = l65;
                                                let bytes66 = _rt::Vec::from_raw_parts(
                                                    l64.cast(),
                                                    len66,
                                                    len66,
                                                );
                                                _rt::string_lift(bytes66)
                                            };
                                            V94::Config(e94)
                                        }
                                        4 => {
                                            let e94 = {
                                                let l67 = *ptr21.add(8).cast::<*mut u8>();
                                                let l68 = *ptr21.add(12).cast::<usize>();
                                                let len69 = l68;
                                                let bytes69 = _rt::Vec::from_raw_parts(
                                                    l67.cast(),
                                                    len69,
                                                    len69,
                                                );
                                                _rt::string_lift(bytes69)
                                            };
                                            V94::Contract(e94)
                                        }
                                        5 => {
                                            let e94 = {
                                                let l70 = *ptr21.add(8).cast::<*mut u8>();
                                                let l71 = *ptr21.add(12).cast::<usize>();
                                                let len72 = l71;
                                                let bytes72 = _rt::Vec::from_raw_parts(
                                                    l70.cast(),
                                                    len72,
                                                    len72,
                                                );
                                                _rt::string_lift(bytes72)
                                            };
                                            V94::Configuration(e94)
                                        }
                                        6 => {
                                            let e94 = {
                                                let l73 = *ptr21.add(8).cast::<*mut u8>();
                                                let l74 = *ptr21.add(12).cast::<usize>();
                                                let len75 = l74;
                                                let bytes75 = _rt::Vec::from_raw_parts(
                                                    l73.cast(),
                                                    len75,
                                                    len75,
                                                );
                                                _rt::string_lift(bytes75)
                                            };
                                            V94::ContextLoading(e94)
                                        }
                                        7 => {
                                            let e94 = {
                                                let l76 = *ptr21.add(8).cast::<*mut u8>();
                                                let l77 = *ptr21.add(12).cast::<usize>();
                                                let len78 = l77;
                                                let bytes78 = _rt::Vec::from_raw_parts(
                                                    l76.cast(),
                                                    len78,
                                                    len78,
                                                );
                                                _rt::string_lift(bytes78)
                                            };
                                            V94::ContextValidation(e94)
                                        }
                                        8 => {
                                            let e94 = {
                                                let l79 = *ptr21.add(8).cast::<*mut u8>();
                                                let l80 = *ptr21.add(12).cast::<usize>();
                                                let len81 = l80;
                                                let bytes81 = _rt::Vec::from_raw_parts(
                                                    l79.cast(),
                                                    len81,
                                                    len81,
                                                );
                                                _rt::string_lift(bytes81)
                                            };
                                            V94::Llm(e94)
                                        }
                                        9 => {
                                            let e94 = {
                                                let l82 = *ptr21.add(8).cast::<*mut u8>();
                                                let l83 = *ptr21.add(12).cast::<usize>();
                                                let len84 = l83;
                                                let bytes84 = _rt::Vec::from_raw_parts(
                                                    l82.cast(),
                                                    len84,
                                                    len84,
                                                );
                                                _rt::string_lift(bytes84)
                                            };
                                            V94::Io(e94)
                                        }
                                        10 => {
                                            let e94 = {
                                                let l85 = *ptr21.add(8).cast::<*mut u8>();
                                                let l86 = *ptr21.add(12).cast::<usize>();
                                                let len87 = l86;
                                                let bytes87 = _rt::Vec::from_raw_parts(
                                                    l85.cast(),
                                                    len87,
                                                    len87,
                                                );
                                                _rt::string_lift(bytes87)
                                            };
                                            V94::Transaction(e94)
                                        }
                                        11 => {
                                            let e94 = {
                                                let l88 = *ptr21.add(8).cast::<*mut u8>();
                                                let l89 = *ptr21.add(12).cast::<usize>();
                                                let len90 = l89;
                                                let bytes90 = _rt::Vec::from_raw_parts(
                                                    l88.cast(),
                                                    len90,
                                                    len90,
                                                );
                                                _rt::string_lift(bytes90)
                                            };
                                            V94::Utf8(e94)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e94 = {
                                                let l91 = *ptr21.add(8).cast::<*mut u8>();
                                                let l92 = *ptr21.add(12).cast::<usize>();
                                                let len93 = l92;
                                                let bytes93 = _rt::Vec::from_raw_parts(
                                                    l91.cast(),
                                                    len93,
                                                    len93,
                                                );
                                                _rt::string_lift(bytes93)
                                            };
                                            V94::Other(e94)
                                        }
                                    };
                                    v94
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl LlmClient {
                #[allow(unused_unsafe, clippy::all)]
                /// Helper method to get just the content string from a chat completion
                pub fn chat_completion_text(
                    &self,
                    messages: &[Message],
                ) -> Result<_rt::String, AgentError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec12 = messages;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * 56,
                            4,
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 56);
                            {
                                let super::super::super::wavs::agent::common::Message {
                                    role: role0,
                                    content: content0,
                                    tool_calls: tool_calls0,
                                    tool_call_id: tool_call_id0,
                                    name: name0,
                                } = e;
                                let vec1 = role0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(4).cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                match content0 {
                                    Some(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(16).cast::<usize>() = len2;
                                        *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                    None => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match tool_calls0 {
                                    Some(e) => {
                                        *base.add(20).cast::<u8>() = (1i32) as u8;
                                        let vec9 = e;
                                        let len9 = vec9.len();
                                        let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec9.len() * 32,
                                            4,
                                        );
                                        let result9 = if layout9.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout9);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec9.into_iter().enumerate() {
                                            let base = result9.add(i * 32);
                                            {
                                                let super::super::super::wavs::agent::common::ToolCall {
                                                    id: id3,
                                                    tool_type: tool_type3,
                                                    function: function3,
                                                } = e;
                                                let vec4 = id3;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(4).cast::<usize>() = len4;
                                                *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                                let vec5 = tool_type3;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                                let super::super::super::wavs::agent::common::ToolCallFunction {
                                                    name: name6,
                                                    arguments: arguments6,
                                                } = function3;
                                                let vec7 = name6;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(20).cast::<usize>() = len7;
                                                *base.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                                let vec8 = arguments6;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base.add(28).cast::<usize>() = len8;
                                                *base.add(24).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                        }
                                        *base.add(28).cast::<usize>() = len9;
                                        *base.add(24).cast::<*mut u8>() = result9;
                                        cleanup_list.extend_from_slice(&[(result9, layout9)]);
                                    }
                                    None => {
                                        *base.add(20).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match tool_call_id0 {
                                    Some(e) => {
                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(40).cast::<usize>() = len10;
                                        *base.add(36).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    None => {
                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match name0 {
                                    Some(e) => {
                                        *base.add(44).cast::<u8>() = (1i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(52).cast::<usize>() = len11;
                                        *base.add(48).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    None => {
                                        *base.add(44).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/client")]
                        extern "C" {
                            #[link_name = "[method]llm-client.chat-completion-text"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result12, len12, ptr13);
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = {
                                    let l15 = *ptr13.add(4).cast::<*mut u8>();
                                    let l16 = *ptr13.add(8).cast::<usize>();
                                    let len17 = l16;
                                    let bytes17 = _rt::Vec::from_raw_parts(
                                        l15.cast(),
                                        len17,
                                        len17,
                                    );
                                    _rt::string_lift(bytes17)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l18 = i32::from(*ptr13.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V58;
                                    let v58 = match l18 {
                                        0 => {
                                            let e58 = {
                                                let l19 = *ptr13.add(8).cast::<*mut u8>();
                                                let l20 = *ptr13.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                _rt::string_lift(bytes21)
                                            };
                                            V58::Api(e58)
                                        }
                                        1 => {
                                            let e58 = {
                                                let l22 = *ptr13.add(8).cast::<*mut u8>();
                                                let l23 = *ptr13.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );
                                                _rt::string_lift(bytes24)
                                            };
                                            V58::Http(e58)
                                        }
                                        2 => {
                                            let e58 = {
                                                let l25 = *ptr13.add(8).cast::<*mut u8>();
                                                let l26 = *ptr13.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );
                                                _rt::string_lift(bytes27)
                                            };
                                            V58::ExternalService(e58)
                                        }
                                        3 => {
                                            let e58 = {
                                                let l28 = *ptr13.add(8).cast::<*mut u8>();
                                                let l29 = *ptr13.add(12).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );
                                                _rt::string_lift(bytes30)
                                            };
                                            V58::Config(e58)
                                        }
                                        4 => {
                                            let e58 = {
                                                let l31 = *ptr13.add(8).cast::<*mut u8>();
                                                let l32 = *ptr13.add(12).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                _rt::string_lift(bytes33)
                                            };
                                            V58::Contract(e58)
                                        }
                                        5 => {
                                            let e58 = {
                                                let l34 = *ptr13.add(8).cast::<*mut u8>();
                                                let l35 = *ptr13.add(12).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            V58::Configuration(e58)
                                        }
                                        6 => {
                                            let e58 = {
                                                let l37 = *ptr13.add(8).cast::<*mut u8>();
                                                let l38 = *ptr13.add(12).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            V58::ContextLoading(e58)
                                        }
                                        7 => {
                                            let e58 = {
                                                let l40 = *ptr13.add(8).cast::<*mut u8>();
                                                let l41 = *ptr13.add(12).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            V58::ContextValidation(e58)
                                        }
                                        8 => {
                                            let e58 = {
                                                let l43 = *ptr13.add(8).cast::<*mut u8>();
                                                let l44 = *ptr13.add(12).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V58::Llm(e58)
                                        }
                                        9 => {
                                            let e58 = {
                                                let l46 = *ptr13.add(8).cast::<*mut u8>();
                                                let l47 = *ptr13.add(12).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V58::Io(e58)
                                        }
                                        10 => {
                                            let e58 = {
                                                let l49 = *ptr13.add(8).cast::<*mut u8>();
                                                let l50 = *ptr13.add(12).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V58::Transaction(e58)
                                        }
                                        11 => {
                                            let e58 = {
                                                let l52 = *ptr13.add(8).cast::<*mut u8>();
                                                let l53 = *ptr13.add(12).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                _rt::string_lift(bytes54)
                                            };
                                            V58::Utf8(e58)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e58 = {
                                                let l55 = *ptr13.add(8).cast::<*mut u8>();
                                                let l56 = *ptr13.add(12).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V58::Other(e58)
                                        }
                                    };
                                    v58
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl LlmClient {
                #[allow(unused_unsafe, clippy::all)]
                /// Process a prompt with the LLM and return either a Transaction or text response
                pub fn process_prompt(
                    &self,
                    prompt: &str,
                    config: &Config,
                    custom_tools: Option<&[Tool]>,
                    custom_handlers: Option<_rt::Vec<CustomToolHandler>>,
                ) -> Result<LlmResponse, AgentError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 96]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 96],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        *ptr0.add(0).cast::<i32>() = (self).handle() as i32;
                        let vec1 = prompt;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        *ptr0.add(8).cast::<usize>() = len1;
                        *ptr0.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                        let super::super::super::wavs::agent::config::Config {
                            contracts: contracts2,
                            llm_config: llm_config2,
                            model: model2,
                            messages: messages2,
                            config: config2,
                        } = config;
                        let vec8 = contracts2;
                        let len8 = vec8.len();
                        let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec8.len() * 36,
                            4,
                        );
                        let result8 = if layout8.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout8);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec8.into_iter().enumerate() {
                            let base = result8.add(i * 36);
                            {
                                let super::super::super::wavs::agent::contracts::Contract {
                                    name: name3,
                                    address: address3,
                                    abi: abi3,
                                    description: description3,
                                } = e;
                                let vec4 = name3;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                *base.add(4).cast::<usize>() = len4;
                                *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                let vec5 = address3;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(12).cast::<usize>() = len5;
                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                let vec6 = abi3;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                *base.add(20).cast::<usize>() = len6;
                                *base.add(16).cast::<*mut u8>() = ptr6.cast_mut();
                                match description3 {
                                    Some(e) => {
                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                        let vec7 = e;
                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                        let len7 = vec7.len();
                                        *base.add(32).cast::<usize>() = len7;
                                        *base.add(28).cast::<*mut u8>() = ptr7.cast_mut();
                                    }
                                    None => {
                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        *ptr0.add(16).cast::<usize>() = len8;
                        *ptr0.add(12).cast::<*mut u8>() = result8;
                        let super::super::super::wavs::agent::config::LlmOptions {
                            temperature: temperature9,
                            top_p: top_p9,
                            seed: seed9,
                            max_tokens: max_tokens9,
                            context_window: context_window9,
                        } = llm_config2;
                        *ptr0.add(20).cast::<f32>() = _rt::as_f32(temperature9);
                        *ptr0.add(24).cast::<f32>() = _rt::as_f32(top_p9);
                        *ptr0.add(28).cast::<i32>() = _rt::as_i32(seed9);
                        match max_tokens9 {
                            Some(e) => {
                                *ptr0.add(32).cast::<u8>() = (1i32) as u8;
                                *ptr0.add(36).cast::<i32>() = _rt::as_i32(e);
                            }
                            None => {
                                *ptr0.add(32).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match context_window9 {
                            Some(e) => {
                                *ptr0.add(40).cast::<u8>() = (1i32) as u8;
                                *ptr0.add(44).cast::<i32>() = _rt::as_i32(e);
                            }
                            None => {
                                *ptr0.add(40).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        let vec10 = model2;
                        let ptr10 = vec10.as_ptr().cast::<u8>();
                        let len10 = vec10.len();
                        *ptr0.add(52).cast::<usize>() = len10;
                        *ptr0.add(48).cast::<*mut u8>() = ptr10.cast_mut();
                        let vec23 = messages2;
                        let len23 = vec23.len();
                        let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec23.len() * 56,
                            4,
                        );
                        let result23 = if layout23.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout23);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec23.into_iter().enumerate() {
                            let base = result23.add(i * 56);
                            {
                                let super::super::super::wavs::agent::common::Message {
                                    role: role11,
                                    content: content11,
                                    tool_calls: tool_calls11,
                                    tool_call_id: tool_call_id11,
                                    name: name11,
                                } = e;
                                let vec12 = role11;
                                let ptr12 = vec12.as_ptr().cast::<u8>();
                                let len12 = vec12.len();
                                *base.add(4).cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = ptr12.cast_mut();
                                match content11 {
                                    Some(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(16).cast::<usize>() = len13;
                                        *base.add(12).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    None => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match tool_calls11 {
                                    Some(e) => {
                                        *base.add(20).cast::<u8>() = (1i32) as u8;
                                        let vec20 = e;
                                        let len20 = vec20.len();
                                        let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec20.len() * 32,
                                            4,
                                        );
                                        let result20 = if layout20.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout20);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec20.into_iter().enumerate() {
                                            let base = result20.add(i * 32);
                                            {
                                                let super::super::super::wavs::agent::common::ToolCall {
                                                    id: id14,
                                                    tool_type: tool_type14,
                                                    function: function14,
                                                } = e;
                                                let vec15 = id14;
                                                let ptr15 = vec15.as_ptr().cast::<u8>();
                                                let len15 = vec15.len();
                                                *base.add(4).cast::<usize>() = len15;
                                                *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                                let vec16 = tool_type14;
                                                let ptr16 = vec16.as_ptr().cast::<u8>();
                                                let len16 = vec16.len();
                                                *base.add(12).cast::<usize>() = len16;
                                                *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                                let super::super::super::wavs::agent::common::ToolCallFunction {
                                                    name: name17,
                                                    arguments: arguments17,
                                                } = function14;
                                                let vec18 = name17;
                                                let ptr18 = vec18.as_ptr().cast::<u8>();
                                                let len18 = vec18.len();
                                                *base.add(20).cast::<usize>() = len18;
                                                *base.add(16).cast::<*mut u8>() = ptr18.cast_mut();
                                                let vec19 = arguments17;
                                                let ptr19 = vec19.as_ptr().cast::<u8>();
                                                let len19 = vec19.len();
                                                *base.add(28).cast::<usize>() = len19;
                                                *base.add(24).cast::<*mut u8>() = ptr19.cast_mut();
                                            }
                                        }
                                        *base.add(28).cast::<usize>() = len20;
                                        *base.add(24).cast::<*mut u8>() = result20;
                                        cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                    }
                                    None => {
                                        *base.add(20).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match tool_call_id11 {
                                    Some(e) => {
                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(40).cast::<usize>() = len21;
                                        *base.add(36).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    None => {
                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match name11 {
                                    Some(e) => {
                                        *base.add(44).cast::<u8>() = (1i32) as u8;
                                        let vec22 = e;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(52).cast::<usize>() = len22;
                                        *base.add(48).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                    None => {
                                        *base.add(44).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        *ptr0.add(60).cast::<usize>() = len23;
                        *ptr0.add(56).cast::<*mut u8>() = result23;
                        let vec27 = config2;
                        let len27 = vec27.len();
                        let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec27.len() * 16,
                            4,
                        );
                        let result27 = if layout27.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout27);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec27.into_iter().enumerate() {
                            let base = result27.add(i * 16);
                            {
                                let (t24_0, t24_1) = e;
                                let vec25 = t24_0;
                                let ptr25 = vec25.as_ptr().cast::<u8>();
                                let len25 = vec25.len();
                                *base.add(4).cast::<usize>() = len25;
                                *base.add(0).cast::<*mut u8>() = ptr25.cast_mut();
                                let vec26 = t24_1;
                                let ptr26 = vec26.as_ptr().cast::<u8>();
                                let len26 = vec26.len();
                                *base.add(12).cast::<usize>() = len26;
                                *base.add(8).cast::<*mut u8>() = ptr26.cast_mut();
                            }
                        }
                        *ptr0.add(68).cast::<usize>() = len27;
                        *ptr0.add(64).cast::<*mut u8>() = result27;
                        match custom_tools {
                            Some(e) => {
                                *ptr0.add(72).cast::<u8>() = (1i32) as u8;
                                let vec34 = e;
                                let len34 = vec34.len();
                                let layout34 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec34.len() * 40,
                                    4,
                                );
                                let result34 = if layout34.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout34).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout34);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec34.into_iter().enumerate() {
                                    let base = result34.add(i * 40);
                                    {
                                        let super::super::super::wavs::agent::common::Tool {
                                            tool_type: tool_type28,
                                            function: function28,
                                        } = e;
                                        let vec29 = tool_type28;
                                        let ptr29 = vec29.as_ptr().cast::<u8>();
                                        let len29 = vec29.len();
                                        *base.add(4).cast::<usize>() = len29;
                                        *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                        let super::super::super::wavs::agent::common::Function {
                                            name: name30,
                                            description: description30,
                                            parameters: parameters30,
                                        } = function28;
                                        let vec31 = name30;
                                        let ptr31 = vec31.as_ptr().cast::<u8>();
                                        let len31 = vec31.len();
                                        *base.add(12).cast::<usize>() = len31;
                                        *base.add(8).cast::<*mut u8>() = ptr31.cast_mut();
                                        match description30 {
                                            Some(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                let vec32 = e;
                                                let ptr32 = vec32.as_ptr().cast::<u8>();
                                                let len32 = vec32.len();
                                                *base.add(24).cast::<usize>() = len32;
                                                *base.add(20).cast::<*mut u8>() = ptr32.cast_mut();
                                            }
                                            None => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        match parameters30 {
                                            Some(e) => {
                                                *base.add(28).cast::<u8>() = (1i32) as u8;
                                                let vec33 = e;
                                                let ptr33 = vec33.as_ptr().cast::<u8>();
                                                let len33 = vec33.len();
                                                *base.add(36).cast::<usize>() = len33;
                                                *base.add(32).cast::<*mut u8>() = ptr33.cast_mut();
                                            }
                                            None => {
                                                *base.add(28).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                }
                                *ptr0.add(80).cast::<usize>() = len34;
                                *ptr0.add(76).cast::<*mut u8>() = result34;
                                cleanup_list.extend_from_slice(&[(result34, layout34)]);
                            }
                            None => {
                                *ptr0.add(72).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match &custom_handlers {
                            Some(e) => {
                                *ptr0.add(84).cast::<u8>() = (1i32) as u8;
                                let vec35 = e;
                                let len35 = vec35.len();
                                let layout35 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec35.len() * 4,
                                    4,
                                );
                                let result35 = if layout35.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout35).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout35);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec35.into_iter().enumerate() {
                                    let base = result35.add(i * 4);
                                    {
                                        *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                    }
                                }
                                *ptr0.add(92).cast::<usize>() = len35;
                                *ptr0.add(88).cast::<*mut u8>() = result35;
                                cleanup_list.extend_from_slice(&[(result35, layout35)]);
                            }
                            None => {
                                *ptr0.add(84).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        let ptr36 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/client")]
                        extern "C" {
                            #[link_name = "[method]llm-client.process-prompt"]
                            fn wit_import(_: *mut u8, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0, ptr36);
                        let l37 = i32::from(*ptr36.add(0).cast::<u8>());
                        if layout8.size() != 0 {
                            _rt::alloc::dealloc(result8.cast(), layout8);
                        }
                        if layout23.size() != 0 {
                            _rt::alloc::dealloc(result23.cast(), layout23);
                        }
                        if layout27.size() != 0 {
                            _rt::alloc::dealloc(result27.cast(), layout27);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l37 {
                            0 => {
                                let e = {
                                    let l38 = i32::from(*ptr36.add(4).cast::<u8>());
                                    let v64 = match l38 {
                                        0 => {
                                            let e64 = {
                                                let l39 = *ptr36.add(8).cast::<*mut u8>();
                                                let l40 = *ptr36.add(12).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                let l42 = *ptr36.add(16).cast::<*mut u8>();
                                                let l43 = *ptr36.add(20).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                let l45 = i32::from(*ptr36.add(24).cast::<u8>());
                                                let l55 = *ptr36.add(44).cast::<*mut u8>();
                                                let l56 = *ptr36.add(48).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                let l58 = *ptr36.add(52).cast::<*mut u8>();
                                                let l59 = *ptr36.add(56).cast::<usize>();
                                                let len60 = l59;
                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                    l58.cast(),
                                                    len60,
                                                    len60,
                                                );
                                                super::super::super::wavs::agent::contracts::Transaction {
                                                    to: _rt::string_lift(bytes41),
                                                    value: _rt::string_lift(bytes44),
                                                    contract_call: match l45 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l46 = *ptr36.add(28).cast::<*mut u8>();
                                                                let l47 = *ptr36.add(32).cast::<usize>();
                                                                let len48 = l47;
                                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                                    l46.cast(),
                                                                    len48,
                                                                    len48,
                                                                );
                                                                let l49 = *ptr36.add(36).cast::<*mut u8>();
                                                                let l50 = *ptr36.add(40).cast::<usize>();
                                                                let base54 = l49;
                                                                let len54 = l50;
                                                                let mut result54 = _rt::Vec::with_capacity(len54);
                                                                for i in 0..len54 {
                                                                    let base = base54.add(i * 8);
                                                                    let e54 = {
                                                                        let l51 = *base.add(0).cast::<*mut u8>();
                                                                        let l52 = *base.add(4).cast::<usize>();
                                                                        let len53 = l52;
                                                                        let bytes53 = _rt::Vec::from_raw_parts(
                                                                            l51.cast(),
                                                                            len53,
                                                                            len53,
                                                                        );
                                                                        _rt::string_lift(bytes53)
                                                                    };
                                                                    result54.push(e54);
                                                                }
                                                                _rt::cabi_dealloc(base54, len54 * 8, 4);
                                                                super::super::super::wavs::agent::contracts::ContractCall {
                                                                    function: _rt::string_lift(bytes48),
                                                                    args: result54,
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    data: _rt::string_lift(bytes57),
                                                    description: _rt::string_lift(bytes60),
                                                }
                                            };
                                            LlmResponse::Transaction(e64)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e64 = {
                                                let l61 = *ptr36.add(8).cast::<*mut u8>();
                                                let l62 = *ptr36.add(12).cast::<usize>();
                                                let len63 = l62;
                                                let bytes63 = _rt::Vec::from_raw_parts(
                                                    l61.cast(),
                                                    len63,
                                                    len63,
                                                );
                                                _rt::string_lift(bytes63)
                                            };
                                            LlmResponse::Text(e64)
                                        }
                                    };
                                    v64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l65 = i32::from(*ptr36.add(4).cast::<u8>());
                                    use super::super::super::wavs::agent::errors::AgentError as V105;
                                    let v105 = match l65 {
                                        0 => {
                                            let e105 = {
                                                let l66 = *ptr36.add(8).cast::<*mut u8>();
                                                let l67 = *ptr36.add(12).cast::<usize>();
                                                let len68 = l67;
                                                let bytes68 = _rt::Vec::from_raw_parts(
                                                    l66.cast(),
                                                    len68,
                                                    len68,
                                                );
                                                _rt::string_lift(bytes68)
                                            };
                                            V105::Api(e105)
                                        }
                                        1 => {
                                            let e105 = {
                                                let l69 = *ptr36.add(8).cast::<*mut u8>();
                                                let l70 = *ptr36.add(12).cast::<usize>();
                                                let len71 = l70;
                                                let bytes71 = _rt::Vec::from_raw_parts(
                                                    l69.cast(),
                                                    len71,
                                                    len71,
                                                );
                                                _rt::string_lift(bytes71)
                                            };
                                            V105::Http(e105)
                                        }
                                        2 => {
                                            let e105 = {
                                                let l72 = *ptr36.add(8).cast::<*mut u8>();
                                                let l73 = *ptr36.add(12).cast::<usize>();
                                                let len74 = l73;
                                                let bytes74 = _rt::Vec::from_raw_parts(
                                                    l72.cast(),
                                                    len74,
                                                    len74,
                                                );
                                                _rt::string_lift(bytes74)
                                            };
                                            V105::ExternalService(e105)
                                        }
                                        3 => {
                                            let e105 = {
                                                let l75 = *ptr36.add(8).cast::<*mut u8>();
                                                let l76 = *ptr36.add(12).cast::<usize>();
                                                let len77 = l76;
                                                let bytes77 = _rt::Vec::from_raw_parts(
                                                    l75.cast(),
                                                    len77,
                                                    len77,
                                                );
                                                _rt::string_lift(bytes77)
                                            };
                                            V105::Config(e105)
                                        }
                                        4 => {
                                            let e105 = {
                                                let l78 = *ptr36.add(8).cast::<*mut u8>();
                                                let l79 = *ptr36.add(12).cast::<usize>();
                                                let len80 = l79;
                                                let bytes80 = _rt::Vec::from_raw_parts(
                                                    l78.cast(),
                                                    len80,
                                                    len80,
                                                );
                                                _rt::string_lift(bytes80)
                                            };
                                            V105::Contract(e105)
                                        }
                                        5 => {
                                            let e105 = {
                                                let l81 = *ptr36.add(8).cast::<*mut u8>();
                                                let l82 = *ptr36.add(12).cast::<usize>();
                                                let len83 = l82;
                                                let bytes83 = _rt::Vec::from_raw_parts(
                                                    l81.cast(),
                                                    len83,
                                                    len83,
                                                );
                                                _rt::string_lift(bytes83)
                                            };
                                            V105::Configuration(e105)
                                        }
                                        6 => {
                                            let e105 = {
                                                let l84 = *ptr36.add(8).cast::<*mut u8>();
                                                let l85 = *ptr36.add(12).cast::<usize>();
                                                let len86 = l85;
                                                let bytes86 = _rt::Vec::from_raw_parts(
                                                    l84.cast(),
                                                    len86,
                                                    len86,
                                                );
                                                _rt::string_lift(bytes86)
                                            };
                                            V105::ContextLoading(e105)
                                        }
                                        7 => {
                                            let e105 = {
                                                let l87 = *ptr36.add(8).cast::<*mut u8>();
                                                let l88 = *ptr36.add(12).cast::<usize>();
                                                let len89 = l88;
                                                let bytes89 = _rt::Vec::from_raw_parts(
                                                    l87.cast(),
                                                    len89,
                                                    len89,
                                                );
                                                _rt::string_lift(bytes89)
                                            };
                                            V105::ContextValidation(e105)
                                        }
                                        8 => {
                                            let e105 = {
                                                let l90 = *ptr36.add(8).cast::<*mut u8>();
                                                let l91 = *ptr36.add(12).cast::<usize>();
                                                let len92 = l91;
                                                let bytes92 = _rt::Vec::from_raw_parts(
                                                    l90.cast(),
                                                    len92,
                                                    len92,
                                                );
                                                _rt::string_lift(bytes92)
                                            };
                                            V105::Llm(e105)
                                        }
                                        9 => {
                                            let e105 = {
                                                let l93 = *ptr36.add(8).cast::<*mut u8>();
                                                let l94 = *ptr36.add(12).cast::<usize>();
                                                let len95 = l94;
                                                let bytes95 = _rt::Vec::from_raw_parts(
                                                    l93.cast(),
                                                    len95,
                                                    len95,
                                                );
                                                _rt::string_lift(bytes95)
                                            };
                                            V105::Io(e105)
                                        }
                                        10 => {
                                            let e105 = {
                                                let l96 = *ptr36.add(8).cast::<*mut u8>();
                                                let l97 = *ptr36.add(12).cast::<usize>();
                                                let len98 = l97;
                                                let bytes98 = _rt::Vec::from_raw_parts(
                                                    l96.cast(),
                                                    len98,
                                                    len98,
                                                );
                                                _rt::string_lift(bytes98)
                                            };
                                            V105::Transaction(e105)
                                        }
                                        11 => {
                                            let e105 = {
                                                let l99 = *ptr36.add(8).cast::<*mut u8>();
                                                let l100 = *ptr36.add(12).cast::<usize>();
                                                let len101 = l100;
                                                let bytes101 = _rt::Vec::from_raw_parts(
                                                    l99.cast(),
                                                    len101,
                                                    len101,
                                                );
                                                _rt::string_lift(bytes101)
                                            };
                                            V105::Utf8(e105)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e105 = {
                                                let l102 = *ptr36.add(8).cast::<*mut u8>();
                                                let l103 = *ptr36.add(12).cast::<usize>();
                                                let len104 = l103;
                                                let bytes104 = _rt::Vec::from_raw_parts(
                                                    l102.cast(),
                                                    len104,
                                                    len104,
                                                );
                                                _rt::string_lift(bytes104)
                                            };
                                            V105::Other(e105)
                                        }
                                    };
                                    v105
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
        #[allow(dead_code, clippy::all)]
        pub mod tools {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type LlmClient = super::super::super::wavs::agent::client::LlmClient;
            pub type Message = super::super::super::wavs::agent::common::Message;
            pub type Tool = super::super::super::wavs::agent::common::Tool;
            pub type ToolCall = super::super::super::wavs::agent::common::ToolCall;
            pub type CustomToolHandler = super::super::super::wavs::agent::common::CustomToolHandler;
            pub type Contract = super::super::super::wavs::agent::contracts::Contract;
            /// Tool creation and management functions
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct ToolsBuilder {
                handle: _rt::Resource<ToolsBuilder>,
            }
            impl ToolsBuilder {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for ToolsBuilder {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wavs:agent/tools")]
                        extern "C" {
                            #[link_name = "[resource-drop]tools-builder"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl ToolsBuilder {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a tool to send ETH through the DAO's Safe
                pub fn send_eth_tool(&self) -> Tool {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 40],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/tools")]
                        extern "C" {
                            #[link_name = "[method]tools-builder.send-eth-tool"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        let l4 = *ptr0.add(8).cast::<*mut u8>();
                        let l5 = *ptr0.add(12).cast::<usize>();
                        let len6 = l5;
                        let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                        let l7 = i32::from(*ptr0.add(16).cast::<u8>());
                        let l11 = i32::from(*ptr0.add(28).cast::<u8>());
                        super::super::super::wavs::agent::common::Tool {
                            tool_type: _rt::string_lift(bytes3),
                            function: super::super::super::wavs::agent::common::Function {
                                name: _rt::string_lift(bytes6),
                                description: match l7 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l8 = *ptr0.add(20).cast::<*mut u8>();
                                            let l9 = *ptr0.add(24).cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            _rt::string_lift(bytes10)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                parameters: match l11 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l12 = *ptr0.add(32).cast::<*mut u8>();
                                            let l13 = *ptr0.add(36).cast::<usize>();
                                            let len14 = l13;
                                            let bytes14 = _rt::Vec::from_raw_parts(
                                                l12.cast(),
                                                len14,
                                                len14,
                                            );
                                            _rt::string_lift(bytes14)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            },
                        }
                    }
                }
            }
            impl ToolsBuilder {
                #[allow(unused_unsafe, clippy::all)]
                /// Generate tools from a smart contract's ABI
                pub fn tools_from_contract(
                    &self,
                    contract: &Contract,
                ) -> _rt::Vec<Tool> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let super::super::super::wavs::agent::contracts::Contract {
                            name: name0,
                            address: address0,
                            abi: abi0,
                            description: description0,
                        } = contract;
                        let vec1 = name0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = address0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec3 = abi0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let (result5_0, result5_1, result5_2) = match description0 {
                            Some(e) => {
                                let vec4 = e;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                (1i32, ptr4.cast_mut(), len4)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/tools")]
                        extern "C" {
                            #[link_name = "[method]tools-builder.tools-from-contract"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr3.cast_mut(),
                            len3,
                            result5_0,
                            result5_1,
                            result5_2,
                            ptr6,
                        );
                        let l7 = *ptr6.add(0).cast::<*mut u8>();
                        let l8 = *ptr6.add(4).cast::<usize>();
                        let base23 = l7;
                        let len23 = l8;
                        let mut result23 = _rt::Vec::with_capacity(len23);
                        for i in 0..len23 {
                            let base = base23.add(i * 40);
                            let e23 = {
                                let l9 = *base.add(0).cast::<*mut u8>();
                                let l10 = *base.add(4).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(
                                    l9.cast(),
                                    len11,
                                    len11,
                                );
                                let l12 = *base.add(8).cast::<*mut u8>();
                                let l13 = *base.add(12).cast::<usize>();
                                let len14 = l13;
                                let bytes14 = _rt::Vec::from_raw_parts(
                                    l12.cast(),
                                    len14,
                                    len14,
                                );
                                let l15 = i32::from(*base.add(16).cast::<u8>());
                                let l19 = i32::from(*base.add(28).cast::<u8>());
                                super::super::super::wavs::agent::common::Tool {
                                    tool_type: _rt::string_lift(bytes11),
                                    function: super::super::super::wavs::agent::common::Function {
                                        name: _rt::string_lift(bytes14),
                                        description: match l15 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l16 = *base.add(20).cast::<*mut u8>();
                                                    let l17 = *base.add(24).cast::<usize>();
                                                    let len18 = l17;
                                                    let bytes18 = _rt::Vec::from_raw_parts(
                                                        l16.cast(),
                                                        len18,
                                                        len18,
                                                    );
                                                    _rt::string_lift(bytes18)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        parameters: match l19 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l20 = *base.add(32).cast::<*mut u8>();
                                                    let l21 = *base.add(36).cast::<usize>();
                                                    let len22 = l21;
                                                    let bytes22 = _rt::Vec::from_raw_parts(
                                                        l20.cast(),
                                                        len22,
                                                        len22,
                                                    );
                                                    _rt::string_lift(bytes22)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                }
                            };
                            result23.push(e23);
                        }
                        _rt::cabi_dealloc(base23, len23 * 40, 4);
                        result23
                    }
                }
            }
            impl ToolsBuilder {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a custom tool with the specified name, description, and parameters
                pub fn custom_tool(
                    &self,
                    name: &str,
                    description: &str,
                    parameters: &str,
                ) -> Tool {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 40],
                        );
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = description;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = parameters;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/tools")]
                        extern "C" {
                            #[link_name = "[method]tools-builder.custom-tool"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr3,
                        );
                        let l4 = *ptr3.add(0).cast::<*mut u8>();
                        let l5 = *ptr3.add(4).cast::<usize>();
                        let len6 = l5;
                        let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                        let l7 = *ptr3.add(8).cast::<*mut u8>();
                        let l8 = *ptr3.add(12).cast::<usize>();
                        let len9 = l8;
                        let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                        let l10 = i32::from(*ptr3.add(16).cast::<u8>());
                        let l14 = i32::from(*ptr3.add(28).cast::<u8>());
                        super::super::super::wavs::agent::common::Tool {
                            tool_type: _rt::string_lift(bytes6),
                            function: super::super::super::wavs::agent::common::Function {
                                name: _rt::string_lift(bytes9),
                                description: match l10 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l11 = *ptr3.add(20).cast::<*mut u8>();
                                            let l12 = *ptr3.add(24).cast::<usize>();
                                            let len13 = l12;
                                            let bytes13 = _rt::Vec::from_raw_parts(
                                                l11.cast(),
                                                len13,
                                                len13,
                                            );
                                            _rt::string_lift(bytes13)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                parameters: match l14 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l15 = *ptr3.add(32).cast::<*mut u8>();
                                            let l16 = *ptr3.add(36).cast::<usize>();
                                            let len17 = l16;
                                            let bytes17 = _rt::Vec::from_raw_parts(
                                                l15.cast(),
                                                len17,
                                                len17,
                                            );
                                            _rt::string_lift(bytes17)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            },
                        }
                    }
                }
            }
            impl ToolsBuilder {
                #[allow(unused_unsafe, clippy::all)]
                /// Execute a tool call and return the result
                pub fn execute_tool_call(
                    &self,
                    tool_call: &ToolCall,
                    custom_handlers: Option<_rt::Vec<CustomToolHandler>>,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let super::super::super::wavs::agent::common::ToolCall {
                            id: id0,
                            tool_type: tool_type0,
                            function: function0,
                        } = tool_call;
                        let vec1 = id0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = tool_type0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let super::super::super::wavs::agent::common::ToolCallFunction {
                            name: name3,
                            arguments: arguments3,
                        } = function0;
                        let vec4 = name3;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        let vec5 = arguments3;
                        let ptr5 = vec5.as_ptr().cast::<u8>();
                        let len5 = vec5.len();
                        let (result7_0, result7_1, result7_2) = match &custom_handlers {
                            Some(e) => {
                                let vec6 = e;
                                let len6 = vec6.len();
                                let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec6.len() * 4,
                                    4,
                                );
                                let result6 = if layout6.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout6);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec6.into_iter().enumerate() {
                                    let base = result6.add(i * 4);
                                    {
                                        *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result6, layout6)]);
                                (1i32, result6, len6)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/tools")]
                        extern "C" {
                            #[link_name = "[method]tools-builder.execute-tool-call"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr4.cast_mut(),
                            len4,
                            ptr5.cast_mut(),
                            len5,
                            result7_0,
                            result7_1,
                            result7_2,
                            ptr8,
                        );
                        let l9 = i32::from(*ptr8.add(0).cast::<u8>());
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l9 {
                            0 => {
                                let e = {
                                    let l10 = *ptr8.add(4).cast::<*mut u8>();
                                    let l11 = *ptr8.add(8).cast::<usize>();
                                    let len12 = l11;
                                    let bytes12 = _rt::Vec::from_raw_parts(
                                        l10.cast(),
                                        len12,
                                        len12,
                                    );
                                    _rt::string_lift(bytes12)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l13 = *ptr8.add(4).cast::<*mut u8>();
                                    let l14 = *ptr8.add(8).cast::<usize>();
                                    let len15 = l14;
                                    let bytes15 = _rt::Vec::from_raw_parts(
                                        l13.cast(),
                                        len15,
                                        len15,
                                    );
                                    _rt::string_lift(bytes15)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ToolsBuilder {
                #[allow(unused_unsafe, clippy::all)]
                /// Parse an ETH transaction from tool call
                pub fn parse_eth_transaction(
                    &self,
                    tool_call: &ToolCall,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let super::super::super::wavs::agent::common::ToolCall {
                            id: id0,
                            tool_type: tool_type0,
                            function: function0,
                        } = tool_call;
                        let vec1 = id0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = tool_type0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let super::super::super::wavs::agent::common::ToolCallFunction {
                            name: name3,
                            arguments: arguments3,
                        } = function0;
                        let vec4 = name3;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        let vec5 = arguments3;
                        let ptr5 = vec5.as_ptr().cast::<u8>();
                        let len5 = vec5.len();
                        let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/tools")]
                        extern "C" {
                            #[link_name = "[method]tools-builder.parse-eth-transaction"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr4.cast_mut(),
                            len4,
                            ptr5.cast_mut(),
                            len5,
                            ptr6,
                        );
                        let l7 = i32::from(*ptr6.add(0).cast::<u8>());
                        match l7 {
                            0 => {
                                let e = {
                                    let l8 = *ptr6.add(4).cast::<*mut u8>();
                                    let l9 = *ptr6.add(8).cast::<usize>();
                                    let len10 = l9;
                                    let bytes10 = _rt::Vec::from_raw_parts(
                                        l8.cast(),
                                        len10,
                                        len10,
                                    );
                                    _rt::string_lift(bytes10)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l11 = *ptr6.add(4).cast::<*mut u8>();
                                    let l12 = *ptr6.add(8).cast::<usize>();
                                    let len13 = l12;
                                    let bytes13 = _rt::Vec::from_raw_parts(
                                        l11.cast(),
                                        len13,
                                        len13,
                                    );
                                    _rt::string_lift(bytes13)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ToolsBuilder {
                #[allow(unused_unsafe, clippy::all)]
                /// Process tool calls and generate a response
                pub fn process_tool_calls(
                    &self,
                    client: LlmClient,
                    initial_messages: &[Message],
                    response: &Message,
                    tool_calls: &[ToolCall],
                    custom_handlers: Option<_rt::Vec<CustomToolHandler>>,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 92]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 92],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        *ptr0.add(0).cast::<i32>() = (self).handle() as i32;
                        *ptr0.add(4).cast::<i32>() = (&client).take_handle() as i32;
                        let vec13 = initial_messages;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * 56,
                            4,
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13.add(i * 56);
                            {
                                let super::super::super::wavs::agent::common::Message {
                                    role: role1,
                                    content: content1,
                                    tool_calls: tool_calls1,
                                    tool_call_id: tool_call_id1,
                                    name: name1,
                                } = e;
                                let vec2 = role1;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(4).cast::<usize>() = len2;
                                *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                match content1 {
                                    Some(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(16).cast::<usize>() = len3;
                                        *base.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    None => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match tool_calls1 {
                                    Some(e) => {
                                        *base.add(20).cast::<u8>() = (1i32) as u8;
                                        let vec10 = e;
                                        let len10 = vec10.len();
                                        let layout10 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec10.len() * 32,
                                            4,
                                        );
                                        let result10 = if layout10.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout10);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec10.into_iter().enumerate() {
                                            let base = result10.add(i * 32);
                                            {
                                                let super::super::super::wavs::agent::common::ToolCall {
                                                    id: id4,
                                                    tool_type: tool_type4,
                                                    function: function4,
                                                } = e;
                                                let vec5 = id4;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(4).cast::<usize>() = len5;
                                                *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                                let vec6 = tool_type4;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                                let super::super::super::wavs::agent::common::ToolCallFunction {
                                                    name: name7,
                                                    arguments: arguments7,
                                                } = function4;
                                                let vec8 = name7;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base.add(20).cast::<usize>() = len8;
                                                *base.add(16).cast::<*mut u8>() = ptr8.cast_mut();
                                                let vec9 = arguments7;
                                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                                let len9 = vec9.len();
                                                *base.add(28).cast::<usize>() = len9;
                                                *base.add(24).cast::<*mut u8>() = ptr9.cast_mut();
                                            }
                                        }
                                        *base.add(28).cast::<usize>() = len10;
                                        *base.add(24).cast::<*mut u8>() = result10;
                                        cleanup_list.extend_from_slice(&[(result10, layout10)]);
                                    }
                                    None => {
                                        *base.add(20).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match tool_call_id1 {
                                    Some(e) => {
                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(40).cast::<usize>() = len11;
                                        *base.add(36).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    None => {
                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match name1 {
                                    Some(e) => {
                                        *base.add(44).cast::<u8>() = (1i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(52).cast::<usize>() = len12;
                                        *base.add(48).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    None => {
                                        *base.add(44).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        *ptr0.add(12).cast::<usize>() = len13;
                        *ptr0.add(8).cast::<*mut u8>() = result13;
                        let super::super::super::wavs::agent::common::Message {
                            role: role14,
                            content: content14,
                            tool_calls: tool_calls14,
                            tool_call_id: tool_call_id14,
                            name: name14,
                        } = response;
                        let vec15 = role14;
                        let ptr15 = vec15.as_ptr().cast::<u8>();
                        let len15 = vec15.len();
                        *ptr0.add(20).cast::<usize>() = len15;
                        *ptr0.add(16).cast::<*mut u8>() = ptr15.cast_mut();
                        match content14 {
                            Some(e) => {
                                *ptr0.add(24).cast::<u8>() = (1i32) as u8;
                                let vec16 = e;
                                let ptr16 = vec16.as_ptr().cast::<u8>();
                                let len16 = vec16.len();
                                *ptr0.add(32).cast::<usize>() = len16;
                                *ptr0.add(28).cast::<*mut u8>() = ptr16.cast_mut();
                            }
                            None => {
                                *ptr0.add(24).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match tool_calls14 {
                            Some(e) => {
                                *ptr0.add(36).cast::<u8>() = (1i32) as u8;
                                let vec23 = e;
                                let len23 = vec23.len();
                                let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec23.len() * 32,
                                    4,
                                );
                                let result23 = if layout23.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout23);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec23.into_iter().enumerate() {
                                    let base = result23.add(i * 32);
                                    {
                                        let super::super::super::wavs::agent::common::ToolCall {
                                            id: id17,
                                            tool_type: tool_type17,
                                            function: function17,
                                        } = e;
                                        let vec18 = id17;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(4).cast::<usize>() = len18;
                                        *base.add(0).cast::<*mut u8>() = ptr18.cast_mut();
                                        let vec19 = tool_type17;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                        let super::super::super::wavs::agent::common::ToolCallFunction {
                                            name: name20,
                                            arguments: arguments20,
                                        } = function17;
                                        let vec21 = name20;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(20).cast::<usize>() = len21;
                                        *base.add(16).cast::<*mut u8>() = ptr21.cast_mut();
                                        let vec22 = arguments20;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(28).cast::<usize>() = len22;
                                        *base.add(24).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                }
                                *ptr0.add(44).cast::<usize>() = len23;
                                *ptr0.add(40).cast::<*mut u8>() = result23;
                                cleanup_list.extend_from_slice(&[(result23, layout23)]);
                            }
                            None => {
                                *ptr0.add(36).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match tool_call_id14 {
                            Some(e) => {
                                *ptr0.add(48).cast::<u8>() = (1i32) as u8;
                                let vec24 = e;
                                let ptr24 = vec24.as_ptr().cast::<u8>();
                                let len24 = vec24.len();
                                *ptr0.add(56).cast::<usize>() = len24;
                                *ptr0.add(52).cast::<*mut u8>() = ptr24.cast_mut();
                            }
                            None => {
                                *ptr0.add(48).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match name14 {
                            Some(e) => {
                                *ptr0.add(60).cast::<u8>() = (1i32) as u8;
                                let vec25 = e;
                                let ptr25 = vec25.as_ptr().cast::<u8>();
                                let len25 = vec25.len();
                                *ptr0.add(68).cast::<usize>() = len25;
                                *ptr0.add(64).cast::<*mut u8>() = ptr25.cast_mut();
                            }
                            None => {
                                *ptr0.add(60).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        let vec32 = tool_calls;
                        let len32 = vec32.len();
                        let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec32.len() * 32,
                            4,
                        );
                        let result32 = if layout32.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout32);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec32.into_iter().enumerate() {
                            let base = result32.add(i * 32);
                            {
                                let super::super::super::wavs::agent::common::ToolCall {
                                    id: id26,
                                    tool_type: tool_type26,
                                    function: function26,
                                } = e;
                                let vec27 = id26;
                                let ptr27 = vec27.as_ptr().cast::<u8>();
                                let len27 = vec27.len();
                                *base.add(4).cast::<usize>() = len27;
                                *base.add(0).cast::<*mut u8>() = ptr27.cast_mut();
                                let vec28 = tool_type26;
                                let ptr28 = vec28.as_ptr().cast::<u8>();
                                let len28 = vec28.len();
                                *base.add(12).cast::<usize>() = len28;
                                *base.add(8).cast::<*mut u8>() = ptr28.cast_mut();
                                let super::super::super::wavs::agent::common::ToolCallFunction {
                                    name: name29,
                                    arguments: arguments29,
                                } = function26;
                                let vec30 = name29;
                                let ptr30 = vec30.as_ptr().cast::<u8>();
                                let len30 = vec30.len();
                                *base.add(20).cast::<usize>() = len30;
                                *base.add(16).cast::<*mut u8>() = ptr30.cast_mut();
                                let vec31 = arguments29;
                                let ptr31 = vec31.as_ptr().cast::<u8>();
                                let len31 = vec31.len();
                                *base.add(28).cast::<usize>() = len31;
                                *base.add(24).cast::<*mut u8>() = ptr31.cast_mut();
                            }
                        }
                        *ptr0.add(76).cast::<usize>() = len32;
                        *ptr0.add(72).cast::<*mut u8>() = result32;
                        match &custom_handlers {
                            Some(e) => {
                                *ptr0.add(80).cast::<u8>() = (1i32) as u8;
                                let vec33 = e;
                                let len33 = vec33.len();
                                let layout33 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec33.len() * 4,
                                    4,
                                );
                                let result33 = if layout33.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout33).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout33);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec33.into_iter().enumerate() {
                                    let base = result33.add(i * 4);
                                    {
                                        *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                    }
                                }
                                *ptr0.add(88).cast::<usize>() = len33;
                                *ptr0.add(84).cast::<*mut u8>() = result33;
                                cleanup_list.extend_from_slice(&[(result33, layout33)]);
                            }
                            None => {
                                *ptr0.add(80).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        let ptr34 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wavs:agent/tools")]
                        extern "C" {
                            #[link_name = "[method]tools-builder.process-tool-calls"]
                            fn wit_import(_: *mut u8, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0, ptr34);
                        let l35 = i32::from(*ptr34.add(0).cast::<u8>());
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        if layout32.size() != 0 {
                            _rt::alloc::dealloc(result32.cast(), layout32);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l35 {
                            0 => {
                                let e = {
                                    let l36 = *ptr34.add(4).cast::<*mut u8>();
                                    let l37 = *ptr34.add(8).cast::<usize>();
                                    let len38 = l37;
                                    let bytes38 = _rt::Vec::from_raw_parts(
                                        l36.cast(),
                                        len38,
                                        len38,
                                    );
                                    _rt::string_lift(bytes38)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l39 = *ptr34.add(4).cast::<*mut u8>();
                                    let l40 = *ptr34.add(8).cast::<usize>();
                                    let len41 = l40;
                                    let bytes41 = _rt::Vec::from_raw_parts(
                                        l39.cast(),
                                        len41,
                                        len41,
                                    );
                                    _rt::string_lift(bytes41)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod wavs {
        #[allow(dead_code)]
        pub mod agent {
            #[allow(dead_code, clippy::all)]
            pub mod errors {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// Possible error types that can occur during agent operations
                #[derive(Clone)]
                pub enum AgentError {
                    /// API error
                    Api(_rt::String),
                    /// HTTP error
                    Http(_rt::String),
                    /// External service error
                    ExternalService(_rt::String),
                    /// Configuration errors
                    Config(_rt::String),
                    /// Contract error
                    Contract(_rt::String),
                    /// Error related to configuration parsing or validation
                    Configuration(_rt::String),
                    /// Error when loading context from URI or environment
                    ContextLoading(_rt::String),
                    /// Error when validating context
                    ContextValidation(_rt::String),
                    /// Error during LLM processing
                    Llm(_rt::String),
                    /// IO errors from std::io
                    Io(_rt::String),
                    /// Error related to transaction generation or validation
                    Transaction(_rt::String),
                    /// UTF-8 decoding error
                    Utf8(_rt::String),
                    /// Other general errors
                    Other(_rt::String),
                }
                impl ::core::fmt::Debug for AgentError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            AgentError::Api(e) => {
                                f.debug_tuple("AgentError::Api").field(e).finish()
                            }
                            AgentError::Http(e) => {
                                f.debug_tuple("AgentError::Http").field(e).finish()
                            }
                            AgentError::ExternalService(e) => {
                                f.debug_tuple("AgentError::ExternalService")
                                    .field(e)
                                    .finish()
                            }
                            AgentError::Config(e) => {
                                f.debug_tuple("AgentError::Config").field(e).finish()
                            }
                            AgentError::Contract(e) => {
                                f.debug_tuple("AgentError::Contract").field(e).finish()
                            }
                            AgentError::Configuration(e) => {
                                f.debug_tuple("AgentError::Configuration").field(e).finish()
                            }
                            AgentError::ContextLoading(e) => {
                                f.debug_tuple("AgentError::ContextLoading")
                                    .field(e)
                                    .finish()
                            }
                            AgentError::ContextValidation(e) => {
                                f.debug_tuple("AgentError::ContextValidation")
                                    .field(e)
                                    .finish()
                            }
                            AgentError::Llm(e) => {
                                f.debug_tuple("AgentError::Llm").field(e).finish()
                            }
                            AgentError::Io(e) => {
                                f.debug_tuple("AgentError::Io").field(e).finish()
                            }
                            AgentError::Transaction(e) => {
                                f.debug_tuple("AgentError::Transaction").field(e).finish()
                            }
                            AgentError::Utf8(e) => {
                                f.debug_tuple("AgentError::Utf8").field(e).finish()
                            }
                            AgentError::Other(e) => {
                                f.debug_tuple("AgentError::Other").field(e).finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for AgentError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for AgentError {}
                #[doc(hidden)]
                macro_rules! __export_wavs_agent_errors_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = {};
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wavs_agent_errors_cabi;
            }
            #[allow(dead_code, clippy::all)]
            pub mod common {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// Function definition for tool calls
                #[derive(Clone)]
                pub struct Function {
                    pub name: _rt::String,
                    pub description: Option<_rt::String>,
                    pub parameters: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for Function {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Function")
                            .field("name", &self.name)
                            .field("description", &self.description)
                            .field("parameters", &self.parameters)
                            .finish()
                    }
                }
                /// Tool definition for chat completions
                #[derive(Clone)]
                pub struct Tool {
                    pub tool_type: _rt::String,
                    pub function: Function,
                }
                impl ::core::fmt::Debug for Tool {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Tool")
                            .field("tool-type", &self.tool_type)
                            .field("function", &self.function)
                            .finish()
                    }
                }
                /// Function call details
                #[derive(Clone)]
                pub struct ToolCallFunction {
                    pub name: _rt::String,
                    pub arguments: _rt::String,
                }
                impl ::core::fmt::Debug for ToolCallFunction {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ToolCallFunction")
                            .field("name", &self.name)
                            .field("arguments", &self.arguments)
                            .finish()
                    }
                }
                /// Tool call for chat completions
                #[derive(Clone)]
                pub struct ToolCall {
                    pub id: _rt::String,
                    pub tool_type: _rt::String,
                    pub function: ToolCallFunction,
                }
                impl ::core::fmt::Debug for ToolCall {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ToolCall")
                            .field("id", &self.id)
                            .field("tool-type", &self.tool_type)
                            .field("function", &self.function)
                            .finish()
                    }
                }
                /// Common message structure for chat completions
                #[derive(Clone)]
                pub struct Message {
                    pub role: _rt::String,
                    pub content: Option<_rt::String>,
                    pub tool_calls: Option<_rt::Vec<ToolCall>>,
                    pub tool_call_id: Option<_rt::String>,
                    pub name: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for Message {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Message")
                            .field("role", &self.role)
                            .field("content", &self.content)
                            .field("tool-calls", &self.tool_calls)
                            .field("tool-call-id", &self.tool_call_id)
                            .field("name", &self.name)
                            .finish()
                    }
                }
                /// Handler for custom tool calls
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CustomToolHandler {
                    handle: _rt::Resource<CustomToolHandler>,
                }
                type _CustomToolHandlerRep<T> = Option<T>;
                impl CustomToolHandler {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `CustomToolHandler`.
                    pub fn new<T: GuestCustomToolHandler>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _CustomToolHandlerRep<T> = Some(val);
                        let ptr: *mut _CustomToolHandlerRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestCustomToolHandler>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestCustomToolHandler>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestCustomToolHandler>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _CustomToolHandlerRep<T>,
                        );
                    }
                    fn as_ptr<T: GuestCustomToolHandler>(
                        &self,
                    ) -> *mut _CustomToolHandlerRep<T> {
                        CustomToolHandler::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`CustomToolHandler`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CustomToolHandlerBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a CustomToolHandler>,
                }
                impl<'a> CustomToolHandlerBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestCustomToolHandler>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _CustomToolHandlerRep<T> {
                        CustomToolHandler::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for CustomToolHandler {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/common")]
                            extern "C" {
                                #[link_name = "[resource-drop]custom-tool-handler"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_custom_tool_handler_can_handle_cabi<
                    T: GuestCustomToolHandler,
                >(arg0: *mut u8, arg1: *mut u8, arg2: usize) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::can_handle(
                        CustomToolHandlerBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    match result1 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_custom_tool_handler_execute_cabi<
                    T: GuestCustomToolHandler,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: *mut u8,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let len3 = arg8;
                    let bytes3 = _rt::Vec::from_raw_parts(arg7.cast(), len3, len3);
                    let result4 = T::execute(
                        CustomToolHandlerBorrow::lift(arg0 as u32 as usize).get(),
                        ToolCall {
                            id: _rt::string_lift(bytes0),
                            tool_type: _rt::string_lift(bytes1),
                            function: ToolCallFunction {
                                name: _rt::string_lift(bytes2),
                                arguments: _rt::string_lift(bytes3),
                            },
                        },
                    );
                    let ptr5 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result4 {
                        Ok(e) => {
                            *ptr5.add(0).cast::<u8>() = (0i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr5.add(8).cast::<usize>() = len6;
                            *ptr5.add(4).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                        Err(e) => {
                            *ptr5.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr5.add(8).cast::<usize>() = len7;
                            *ptr5.add(4).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr5
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_custom_tool_handler_execute<
                    T: GuestCustomToolHandler,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                pub trait Guest {
                    type CustomToolHandler: GuestCustomToolHandler;
                }
                pub trait GuestCustomToolHandler: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/common")]
                            extern "C" {
                                #[link_name = "[resource-new]custom-tool-handler"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/common")]
                            extern "C" {
                                #[link_name = "[resource-rep]custom-tool-handler"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Returns true if this handler can handle the given tool name
                    fn can_handle(&self, tool_name: _rt::String) -> bool;
                    /// Execute the tool call and return a result
                    fn execute(
                        &self,
                        tool_call: ToolCall,
                    ) -> Result<_rt::String, _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_wavs_agent_common_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "wavs:agent/common#[method]custom-tool-handler.can-handle"]
                        unsafe extern "C" fn
                        export_method_custom_tool_handler_can_handle(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize,) -> i32 { $($path_to_types)*::
                        _export_method_custom_tool_handler_can_handle_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::CustomToolHandler > (arg0, arg1,
                        arg2) } #[export_name =
                        "wavs:agent/common#[method]custom-tool-handler.execute"] unsafe
                        extern "C" fn export_method_custom_tool_handler_execute(arg0 : *
                        mut u8, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 :
                        usize, arg5 : * mut u8, arg6 : usize, arg7 : * mut u8, arg8 :
                        usize,) -> * mut u8 { $($path_to_types)*::
                        _export_method_custom_tool_handler_execute_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::CustomToolHandler > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7, arg8) } #[export_name =
                        "cabi_post_wavs:agent/common#[method]custom-tool-handler.execute"]
                        unsafe extern "C" fn
                        _post_return_method_custom_tool_handler_execute(arg0 : * mut u8,)
                        { $($path_to_types)*::
                        __post_return_method_custom_tool_handler_execute::<<$ty as
                        $($path_to_types)*:: Guest >::CustomToolHandler > (arg0) } const
                        _ : () = { #[doc(hidden)] #[export_name =
                        "wavs:agent/common#[dtor]custom-tool-handler"]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { $($path_to_types)*:: CustomToolHandler::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::CustomToolHandler > (rep) } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wavs_agent_common_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
            #[allow(dead_code, clippy::all)]
            pub mod contracts {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type AgentError = super::super::super::super::exports::wavs::agent::errors::AgentError;
                /// Represents a smart contract that the DAO can interact with
                #[derive(Clone)]
                pub struct Contract {
                    pub name: _rt::String,
                    pub address: _rt::String,
                    pub abi: _rt::String,
                    pub description: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for Contract {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Contract")
                            .field("name", &self.name)
                            .field("address", &self.address)
                            .field("abi", &self.abi)
                            .field("description", &self.description)
                            .finish()
                    }
                }
                /// Represents a contract function call
                #[derive(Clone)]
                pub struct ContractCall {
                    pub function: _rt::String,
                    pub args: _rt::Vec<_rt::String>,
                }
                impl ::core::fmt::Debug for ContractCall {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ContractCall")
                            .field("function", &self.function)
                            .field("args", &self.args)
                            .finish()
                    }
                }
                /// Represents a transaction to be executed through a wallet
                #[derive(Clone)]
                pub struct Transaction {
                    pub to: _rt::String,
                    pub value: _rt::String,
                    pub contract_call: Option<ContractCall>,
                    pub data: _rt::String,
                    pub description: _rt::String,
                }
                impl ::core::fmt::Debug for Transaction {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Transaction")
                            .field("to", &self.to)
                            .field("value", &self.value)
                            .field("contract-call", &self.contract_call)
                            .field("data", &self.data)
                            .field("description", &self.description)
                            .finish()
                    }
                }
                /// Helper methods for contracts
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ContractManager {
                    handle: _rt::Resource<ContractManager>,
                }
                type _ContractManagerRep<T> = Option<T>;
                impl ContractManager {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `ContractManager`.
                    pub fn new<T: GuestContractManager>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ContractManagerRep<T> = Some(val);
                        let ptr: *mut _ContractManagerRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestContractManager>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestContractManager>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestContractManager>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _ContractManagerRep<T>,
                        );
                    }
                    fn as_ptr<T: GuestContractManager>(
                        &self,
                    ) -> *mut _ContractManagerRep<T> {
                        ContractManager::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`ContractManager`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ContractManagerBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a ContractManager>,
                }
                impl<'a> ContractManagerBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestContractManager>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _ContractManagerRep<T> {
                        ContractManager::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for ContractManager {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/contracts")]
                            extern "C" {
                                #[link_name = "[resource-drop]contract-manager"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                /// Transaction management
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct TransactionManager {
                    handle: _rt::Resource<TransactionManager>,
                }
                type _TransactionManagerRep<T> = Option<T>;
                impl TransactionManager {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `TransactionManager`.
                    pub fn new<T: GuestTransactionManager>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _TransactionManagerRep<T> = Some(val);
                        let ptr: *mut _TransactionManagerRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestTransactionManager>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestTransactionManager>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestTransactionManager>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _TransactionManagerRep<T>,
                        );
                    }
                    fn as_ptr<T: GuestTransactionManager>(
                        &self,
                    ) -> *mut _TransactionManagerRep<T> {
                        TransactionManager::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`TransactionManager`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct TransactionManagerBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a TransactionManager>,
                }
                impl<'a> TransactionManagerBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestTransactionManager>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _TransactionManagerRep<T> {
                        TransactionManager::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for TransactionManager {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/contracts")]
                            extern "C" {
                                #[link_name = "[resource-drop]transaction-manager"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_contract_manager_new_cabi<
                    T: GuestContractManager,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let result3 = T::new(
                        ContractManagerBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        _rt::string_lift(bytes2),
                    );
                    let ptr4 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let Contract {
                        name: name5,
                        address: address5,
                        abi: abi5,
                        description: description5,
                    } = result3;
                    let vec6 = (name5.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    ::core::mem::forget(vec6);
                    *ptr4.add(4).cast::<usize>() = len6;
                    *ptr4.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                    let vec7 = (address5.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    ::core::mem::forget(vec7);
                    *ptr4.add(12).cast::<usize>() = len7;
                    *ptr4.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                    let vec8 = (abi5.into_bytes()).into_boxed_slice();
                    let ptr8 = vec8.as_ptr().cast::<u8>();
                    let len8 = vec8.len();
                    ::core::mem::forget(vec8);
                    *ptr4.add(20).cast::<usize>() = len8;
                    *ptr4.add(16).cast::<*mut u8>() = ptr8.cast_mut();
                    match description5 {
                        Some(e) => {
                            *ptr4.add(24).cast::<u8>() = (1i32) as u8;
                            let vec9 = (e.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr4.add(32).cast::<usize>() = len9;
                            *ptr4.add(28).cast::<*mut u8>() = ptr9.cast_mut();
                        }
                        None => {
                            *ptr4.add(24).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_contract_manager_new<
                    T: GuestContractManager,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0.add(8).cast::<*mut u8>();
                    let l3 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                    let l4 = *arg0.add(16).cast::<*mut u8>();
                    let l5 = *arg0.add(20).cast::<usize>();
                    _rt::cabi_dealloc(l4, l5, 1);
                    let l6 = i32::from(*arg0.add(24).cast::<u8>());
                    match l6 {
                        0 => {}
                        _ => {
                            let l7 = *arg0.add(28).cast::<*mut u8>();
                            let l8 = *arg0.add(32).cast::<usize>();
                            _rt::cabi_dealloc(l7, l8, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_contract_manager_new_with_description_cabi<
                    T: GuestContractManager,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: *mut u8,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let len3 = arg8;
                    let bytes3 = _rt::Vec::from_raw_parts(arg7.cast(), len3, len3);
                    let result4 = T::new_with_description(
                        ContractManagerBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        _rt::string_lift(bytes2),
                        _rt::string_lift(bytes3),
                    );
                    let ptr5 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let Contract {
                        name: name6,
                        address: address6,
                        abi: abi6,
                        description: description6,
                    } = result4;
                    let vec7 = (name6.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    ::core::mem::forget(vec7);
                    *ptr5.add(4).cast::<usize>() = len7;
                    *ptr5.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                    let vec8 = (address6.into_bytes()).into_boxed_slice();
                    let ptr8 = vec8.as_ptr().cast::<u8>();
                    let len8 = vec8.len();
                    ::core::mem::forget(vec8);
                    *ptr5.add(12).cast::<usize>() = len8;
                    *ptr5.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                    let vec9 = (abi6.into_bytes()).into_boxed_slice();
                    let ptr9 = vec9.as_ptr().cast::<u8>();
                    let len9 = vec9.len();
                    ::core::mem::forget(vec9);
                    *ptr5.add(20).cast::<usize>() = len9;
                    *ptr5.add(16).cast::<*mut u8>() = ptr9.cast_mut();
                    match description6 {
                        Some(e) => {
                            *ptr5.add(24).cast::<u8>() = (1i32) as u8;
                            let vec10 = (e.into_bytes()).into_boxed_slice();
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            ::core::mem::forget(vec10);
                            *ptr5.add(32).cast::<usize>() = len10;
                            *ptr5.add(28).cast::<*mut u8>() = ptr10.cast_mut();
                        }
                        None => {
                            *ptr5.add(24).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr5
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_contract_manager_new_with_description<
                    T: GuestContractManager,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0.add(8).cast::<*mut u8>();
                    let l3 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                    let l4 = *arg0.add(16).cast::<*mut u8>();
                    let l5 = *arg0.add(20).cast::<usize>();
                    _rt::cabi_dealloc(l4, l5, 1);
                    let l6 = i32::from(*arg0.add(24).cast::<u8>());
                    match l6 {
                        0 => {}
                        _ => {
                            let l7 = *arg0.add(28).cast::<*mut u8>();
                            let l8 = *arg0.add(32).cast::<usize>();
                            _rt::cabi_dealloc(l7, l8, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_contract_manager_parse_abi_cabi<
                    T: GuestContractManager,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let result4 = T::parse_abi(
                        ContractManagerBorrow::lift(arg0 as u32 as usize).get(),
                        Contract {
                            name: _rt::string_lift(bytes0),
                            address: _rt::string_lift(bytes1),
                            abi: _rt::string_lift(bytes2),
                            description: match arg7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len3 = arg9;
                                        let bytes3 = _rt::Vec::from_raw_parts(
                                            arg8.cast(),
                                            len3,
                                            len3,
                                        );
                                        _rt::string_lift(bytes3)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    let ptr5 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result4 {
                        Ok(e) => {
                            *ptr5.add(0).cast::<u8>() = (0i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr5.add(8).cast::<usize>() = len6;
                            *ptr5.add(4).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                        Err(e) => {
                            *ptr5.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V20;
                            match e {
                                V20::Api(e) => {
                                    *ptr5.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr5.add(12).cast::<usize>() = len7;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V20::Http(e) => {
                                    *ptr5.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr5.add(12).cast::<usize>() = len8;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V20::ExternalService(e) => {
                                    *ptr5.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr5.add(12).cast::<usize>() = len9;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V20::Config(e) => {
                                    *ptr5.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr5.add(12).cast::<usize>() = len10;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V20::Contract(e) => {
                                    *ptr5.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr5.add(12).cast::<usize>() = len11;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V20::Configuration(e) => {
                                    *ptr5.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr5.add(12).cast::<usize>() = len12;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V20::ContextLoading(e) => {
                                    *ptr5.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr5.add(12).cast::<usize>() = len13;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V20::ContextValidation(e) => {
                                    *ptr5.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr5.add(12).cast::<usize>() = len14;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V20::Llm(e) => {
                                    *ptr5.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr5.add(12).cast::<usize>() = len15;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                V20::Io(e) => {
                                    *ptr5.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr5.add(12).cast::<usize>() = len16;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                V20::Transaction(e) => {
                                    *ptr5.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr5.add(12).cast::<usize>() = len17;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                }
                                V20::Utf8(e) => {
                                    *ptr5.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    ::core::mem::forget(vec18);
                                    *ptr5.add(12).cast::<usize>() = len18;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                }
                                V20::Other(e) => {
                                    *ptr5.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    ::core::mem::forget(vec19);
                                    *ptr5.add(12).cast::<usize>() = len19;
                                    *ptr5.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                }
                            }
                        }
                    };
                    ptr5
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_contract_manager_parse_abi<
                    T: GuestContractManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = i32::from(*arg0.add(4).cast::<u8>());
                            match l3 {
                                0 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                2 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                3 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                4 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                5 => {
                                    let l14 = *arg0.add(8).cast::<*mut u8>();
                                    let l15 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                6 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                7 => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                8 => {
                                    let l20 = *arg0.add(8).cast::<*mut u8>();
                                    let l21 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                                9 => {
                                    let l22 = *arg0.add(8).cast::<*mut u8>();
                                    let l23 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                10 => {
                                    let l24 = *arg0.add(8).cast::<*mut u8>();
                                    let l25 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                }
                                11 => {
                                    let l26 = *arg0.add(8).cast::<*mut u8>();
                                    let l27 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                                _ => {
                                    let l28 = *arg0.add(8).cast::<*mut u8>();
                                    let l29 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l28, l29, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_contract_manager_encode_function_call_cabi<
                    T: GuestContractManager,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: *mut u8,
                    arg11: usize,
                    arg12: *mut u8,
                    arg13: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let len4 = arg11;
                    let bytes4 = _rt::Vec::from_raw_parts(arg10.cast(), len4, len4);
                    let base8 = arg12;
                    let len8 = arg13;
                    let mut result8 = _rt::Vec::with_capacity(len8);
                    for i in 0..len8 {
                        let base = base8.add(i * 8);
                        let e8 = {
                            let l5 = *base.add(0).cast::<*mut u8>();
                            let l6 = *base.add(4).cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            _rt::string_lift(bytes7)
                        };
                        result8.push(e8);
                    }
                    _rt::cabi_dealloc(base8, len8 * 8, 4);
                    let result9 = T::encode_function_call(
                        ContractManagerBorrow::lift(arg0 as u32 as usize).get(),
                        Contract {
                            name: _rt::string_lift(bytes0),
                            address: _rt::string_lift(bytes1),
                            abi: _rt::string_lift(bytes2),
                            description: match arg7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len3 = arg9;
                                        let bytes3 = _rt::Vec::from_raw_parts(
                                            arg8.cast(),
                                            len3,
                                            len3,
                                        );
                                        _rt::string_lift(bytes3)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        _rt::string_lift(bytes4),
                        result8,
                    );
                    let ptr10 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result9 {
                        Ok(e) => {
                            *ptr10.add(0).cast::<u8>() = (0i32) as u8;
                            let vec11 = (e).into_boxed_slice();
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            ::core::mem::forget(vec11);
                            *ptr10.add(8).cast::<usize>() = len11;
                            *ptr10.add(4).cast::<*mut u8>() = ptr11.cast_mut();
                        }
                        Err(e) => {
                            *ptr10.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V25;
                            match e {
                                V25::Api(e) => {
                                    *ptr10.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr10.add(12).cast::<usize>() = len12;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V25::Http(e) => {
                                    *ptr10.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr10.add(12).cast::<usize>() = len13;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V25::ExternalService(e) => {
                                    *ptr10.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr10.add(12).cast::<usize>() = len14;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V25::Config(e) => {
                                    *ptr10.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr10.add(12).cast::<usize>() = len15;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                V25::Contract(e) => {
                                    *ptr10.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr10.add(12).cast::<usize>() = len16;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                V25::Configuration(e) => {
                                    *ptr10.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr10.add(12).cast::<usize>() = len17;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                }
                                V25::ContextLoading(e) => {
                                    *ptr10.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    ::core::mem::forget(vec18);
                                    *ptr10.add(12).cast::<usize>() = len18;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                }
                                V25::ContextValidation(e) => {
                                    *ptr10.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    ::core::mem::forget(vec19);
                                    *ptr10.add(12).cast::<usize>() = len19;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                }
                                V25::Llm(e) => {
                                    *ptr10.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    ::core::mem::forget(vec20);
                                    *ptr10.add(12).cast::<usize>() = len20;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                }
                                V25::Io(e) => {
                                    *ptr10.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec21 = (e.into_bytes()).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *ptr10.add(12).cast::<usize>() = len21;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                }
                                V25::Transaction(e) => {
                                    *ptr10.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec22 = (e.into_bytes()).into_boxed_slice();
                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                    let len22 = vec22.len();
                                    ::core::mem::forget(vec22);
                                    *ptr10.add(12).cast::<usize>() = len22;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                }
                                V25::Utf8(e) => {
                                    *ptr10.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec23 = (e.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *ptr10.add(12).cast::<usize>() = len23;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                }
                                V25::Other(e) => {
                                    *ptr10.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec24 = (e.into_bytes()).into_boxed_slice();
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    ::core::mem::forget(vec24);
                                    *ptr10.add(12).cast::<usize>() = len24;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr24.cast_mut();
                                }
                            }
                        }
                    };
                    ptr10
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_contract_manager_encode_function_call<
                    T: GuestContractManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => {
                            let l4 = i32::from(*arg0.add(4).cast::<u8>());
                            match l4 {
                                0 => {
                                    let l5 = *arg0.add(8).cast::<*mut u8>();
                                    let l6 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                                1 => {
                                    let l7 = *arg0.add(8).cast::<*mut u8>();
                                    let l8 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                                2 => {
                                    let l9 = *arg0.add(8).cast::<*mut u8>();
                                    let l10 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l9, l10, 1);
                                }
                                3 => {
                                    let l11 = *arg0.add(8).cast::<*mut u8>();
                                    let l12 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                }
                                4 => {
                                    let l13 = *arg0.add(8).cast::<*mut u8>();
                                    let l14 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l13, l14, 1);
                                }
                                5 => {
                                    let l15 = *arg0.add(8).cast::<*mut u8>();
                                    let l16 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l15, l16, 1);
                                }
                                6 => {
                                    let l17 = *arg0.add(8).cast::<*mut u8>();
                                    let l18 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l17, l18, 1);
                                }
                                7 => {
                                    let l19 = *arg0.add(8).cast::<*mut u8>();
                                    let l20 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l19, l20, 1);
                                }
                                8 => {
                                    let l21 = *arg0.add(8).cast::<*mut u8>();
                                    let l22 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l21, l22, 1);
                                }
                                9 => {
                                    let l23 = *arg0.add(8).cast::<*mut u8>();
                                    let l24 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l23, l24, 1);
                                }
                                10 => {
                                    let l25 = *arg0.add(8).cast::<*mut u8>();
                                    let l26 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l25, l26, 1);
                                }
                                11 => {
                                    let l27 = *arg0.add(8).cast::<*mut u8>();
                                    let l28 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l27, l28, 1);
                                }
                                _ => {
                                    let l29 = *arg0.add(8).cast::<*mut u8>();
                                    let l30 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l29, l30, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_contract_manager_find_function_cabi<
                    T: GuestContractManager,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: *mut u8,
                    arg11: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let len4 = arg11;
                    let bytes4 = _rt::Vec::from_raw_parts(arg10.cast(), len4, len4);
                    let result5 = T::find_function(
                        ContractManagerBorrow::lift(arg0 as u32 as usize).get(),
                        Contract {
                            name: _rt::string_lift(bytes0),
                            address: _rt::string_lift(bytes1),
                            abi: _rt::string_lift(bytes2),
                            description: match arg7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len3 = arg9;
                                        let bytes3 = _rt::Vec::from_raw_parts(
                                            arg8.cast(),
                                            len3,
                                            len3,
                                        );
                                        _rt::string_lift(bytes3)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        _rt::string_lift(bytes4),
                    );
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6.add(8).cast::<usize>() = len7;
                            *ptr6.add(4).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V21;
                            match e {
                                V21::Api(e) => {
                                    *ptr6.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr6.add(12).cast::<usize>() = len8;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V21::Http(e) => {
                                    *ptr6.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr6.add(12).cast::<usize>() = len9;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V21::ExternalService(e) => {
                                    *ptr6.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr6.add(12).cast::<usize>() = len10;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V21::Config(e) => {
                                    *ptr6.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr6.add(12).cast::<usize>() = len11;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V21::Contract(e) => {
                                    *ptr6.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr6.add(12).cast::<usize>() = len12;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V21::Configuration(e) => {
                                    *ptr6.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr6.add(12).cast::<usize>() = len13;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V21::ContextLoading(e) => {
                                    *ptr6.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr6.add(12).cast::<usize>() = len14;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V21::ContextValidation(e) => {
                                    *ptr6.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr6.add(12).cast::<usize>() = len15;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                V21::Llm(e) => {
                                    *ptr6.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr6.add(12).cast::<usize>() = len16;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                V21::Io(e) => {
                                    *ptr6.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr6.add(12).cast::<usize>() = len17;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                }
                                V21::Transaction(e) => {
                                    *ptr6.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    ::core::mem::forget(vec18);
                                    *ptr6.add(12).cast::<usize>() = len18;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                }
                                V21::Utf8(e) => {
                                    *ptr6.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    ::core::mem::forget(vec19);
                                    *ptr6.add(12).cast::<usize>() = len19;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                }
                                V21::Other(e) => {
                                    *ptr6.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    ::core::mem::forget(vec20);
                                    *ptr6.add(12).cast::<usize>() = len20;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                }
                            }
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_contract_manager_find_function<
                    T: GuestContractManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = i32::from(*arg0.add(4).cast::<u8>());
                            match l3 {
                                0 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                2 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                3 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                4 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                5 => {
                                    let l14 = *arg0.add(8).cast::<*mut u8>();
                                    let l15 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                6 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                7 => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                8 => {
                                    let l20 = *arg0.add(8).cast::<*mut u8>();
                                    let l21 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                                9 => {
                                    let l22 = *arg0.add(8).cast::<*mut u8>();
                                    let l23 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                10 => {
                                    let l24 = *arg0.add(8).cast::<*mut u8>();
                                    let l25 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                }
                                11 => {
                                    let l26 = *arg0.add(8).cast::<*mut u8>();
                                    let l27 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                                _ => {
                                    let l28 = *arg0.add(8).cast::<*mut u8>();
                                    let l29 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l28, l29, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_contract_manager_validate_function_call_cabi<
                    T: GuestContractManager,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: *mut u8,
                    arg11: usize,
                    arg12: *mut u8,
                    arg13: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let len4 = arg11;
                    let bytes4 = _rt::Vec::from_raw_parts(arg10.cast(), len4, len4);
                    let base8 = arg12;
                    let len8 = arg13;
                    let mut result8 = _rt::Vec::with_capacity(len8);
                    for i in 0..len8 {
                        let base = base8.add(i * 8);
                        let e8 = {
                            let l5 = *base.add(0).cast::<*mut u8>();
                            let l6 = *base.add(4).cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            _rt::string_lift(bytes7)
                        };
                        result8.push(e8);
                    }
                    _rt::cabi_dealloc(base8, len8 * 8, 4);
                    let result9 = T::validate_function_call(
                        ContractManagerBorrow::lift(arg0 as u32 as usize).get(),
                        Contract {
                            name: _rt::string_lift(bytes0),
                            address: _rt::string_lift(bytes1),
                            abi: _rt::string_lift(bytes2),
                            description: match arg7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len3 = arg9;
                                        let bytes3 = _rt::Vec::from_raw_parts(
                                            arg8.cast(),
                                            len3,
                                            len3,
                                        );
                                        _rt::string_lift(bytes3)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        _rt::string_lift(bytes4),
                        result8,
                    );
                    let ptr10 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result9 {
                        Ok(_) => {
                            *ptr10.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr10.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V24;
                            match e {
                                V24::Api(e) => {
                                    *ptr10.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr10.add(12).cast::<usize>() = len11;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V24::Http(e) => {
                                    *ptr10.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr10.add(12).cast::<usize>() = len12;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V24::ExternalService(e) => {
                                    *ptr10.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr10.add(12).cast::<usize>() = len13;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V24::Config(e) => {
                                    *ptr10.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr10.add(12).cast::<usize>() = len14;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V24::Contract(e) => {
                                    *ptr10.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr10.add(12).cast::<usize>() = len15;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                V24::Configuration(e) => {
                                    *ptr10.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr10.add(12).cast::<usize>() = len16;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                V24::ContextLoading(e) => {
                                    *ptr10.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr10.add(12).cast::<usize>() = len17;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                }
                                V24::ContextValidation(e) => {
                                    *ptr10.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    ::core::mem::forget(vec18);
                                    *ptr10.add(12).cast::<usize>() = len18;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                }
                                V24::Llm(e) => {
                                    *ptr10.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    ::core::mem::forget(vec19);
                                    *ptr10.add(12).cast::<usize>() = len19;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                }
                                V24::Io(e) => {
                                    *ptr10.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    ::core::mem::forget(vec20);
                                    *ptr10.add(12).cast::<usize>() = len20;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                }
                                V24::Transaction(e) => {
                                    *ptr10.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec21 = (e.into_bytes()).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *ptr10.add(12).cast::<usize>() = len21;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                }
                                V24::Utf8(e) => {
                                    *ptr10.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec22 = (e.into_bytes()).into_boxed_slice();
                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                    let len22 = vec22.len();
                                    ::core::mem::forget(vec22);
                                    *ptr10.add(12).cast::<usize>() = len22;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                }
                                V24::Other(e) => {
                                    *ptr10.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec23 = (e.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *ptr10.add(12).cast::<usize>() = len23;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                }
                            }
                        }
                    };
                    ptr10
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_contract_manager_validate_function_call<
                    T: GuestContractManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0.add(8).cast::<*mut u8>();
                                    let l15 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                9 => {
                                    let l20 = *arg0.add(8).cast::<*mut u8>();
                                    let l21 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                                10 => {
                                    let l22 = *arg0.add(8).cast::<*mut u8>();
                                    let l23 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                11 => {
                                    let l24 = *arg0.add(8).cast::<*mut u8>();
                                    let l25 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                }
                                _ => {
                                    let l26 = *arg0.add(8).cast::<*mut u8>();
                                    let l27 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_transaction_manager_is_valid_cabi<
                    T: GuestTransactionManager,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: *mut u8,
                    arg11: usize,
                    arg12: *mut u8,
                    arg13: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len7 = arg11;
                    let bytes7 = _rt::Vec::from_raw_parts(arg10.cast(), len7, len7);
                    let len8 = arg13;
                    let bytes8 = _rt::Vec::from_raw_parts(arg12.cast(), len8, len8);
                    let result9 = T::is_valid(
                        TransactionManagerBorrow::lift(arg0 as u32 as usize).get(),
                        Transaction {
                            to: _rt::string_lift(bytes0),
                            value: _rt::string_lift(bytes1),
                            contract_call: match arg5 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len2 = arg7;
                                        let bytes2 = _rt::Vec::from_raw_parts(
                                            arg6.cast(),
                                            len2,
                                            len2,
                                        );
                                        let base6 = arg8;
                                        let len6 = arg9;
                                        let mut result6 = _rt::Vec::with_capacity(len6);
                                        for i in 0..len6 {
                                            let base = base6.add(i * 8);
                                            let e6 = {
                                                let l3 = *base.add(0).cast::<*mut u8>();
                                                let l4 = *base.add(4).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            result6.push(e6);
                                        }
                                        _rt::cabi_dealloc(base6, len6 * 8, 4);
                                        ContractCall {
                                            function: _rt::string_lift(bytes2),
                                            args: result6,
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            data: _rt::string_lift(bytes7),
                            description: _rt::string_lift(bytes8),
                        },
                    );
                    match result9 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_transaction_manager_validate_transaction_cabi<
                    T: GuestTransactionManager,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: *mut u8,
                    arg11: usize,
                    arg12: *mut u8,
                    arg13: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len7 = arg11;
                    let bytes7 = _rt::Vec::from_raw_parts(arg10.cast(), len7, len7);
                    let len8 = arg13;
                    let bytes8 = _rt::Vec::from_raw_parts(arg12.cast(), len8, len8);
                    let result9 = T::validate_transaction(
                        TransactionManagerBorrow::lift(arg0 as u32 as usize).get(),
                        Transaction {
                            to: _rt::string_lift(bytes0),
                            value: _rt::string_lift(bytes1),
                            contract_call: match arg5 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len2 = arg7;
                                        let bytes2 = _rt::Vec::from_raw_parts(
                                            arg6.cast(),
                                            len2,
                                            len2,
                                        );
                                        let base6 = arg8;
                                        let len6 = arg9;
                                        let mut result6 = _rt::Vec::with_capacity(len6);
                                        for i in 0..len6 {
                                            let base = base6.add(i * 8);
                                            let e6 = {
                                                let l3 = *base.add(0).cast::<*mut u8>();
                                                let l4 = *base.add(4).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            result6.push(e6);
                                        }
                                        _rt::cabi_dealloc(base6, len6 * 8, 4);
                                        ContractCall {
                                            function: _rt::string_lift(bytes2),
                                            args: result6,
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            data: _rt::string_lift(bytes7),
                            description: _rt::string_lift(bytes8),
                        },
                    );
                    let ptr10 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result9 {
                        Ok(_) => {
                            *ptr10.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr10.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V24;
                            match e {
                                V24::Api(e) => {
                                    *ptr10.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr10.add(12).cast::<usize>() = len11;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V24::Http(e) => {
                                    *ptr10.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr10.add(12).cast::<usize>() = len12;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V24::ExternalService(e) => {
                                    *ptr10.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr10.add(12).cast::<usize>() = len13;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V24::Config(e) => {
                                    *ptr10.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr10.add(12).cast::<usize>() = len14;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V24::Contract(e) => {
                                    *ptr10.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr10.add(12).cast::<usize>() = len15;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                V24::Configuration(e) => {
                                    *ptr10.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr10.add(12).cast::<usize>() = len16;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                V24::ContextLoading(e) => {
                                    *ptr10.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr10.add(12).cast::<usize>() = len17;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                }
                                V24::ContextValidation(e) => {
                                    *ptr10.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    ::core::mem::forget(vec18);
                                    *ptr10.add(12).cast::<usize>() = len18;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                }
                                V24::Llm(e) => {
                                    *ptr10.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    ::core::mem::forget(vec19);
                                    *ptr10.add(12).cast::<usize>() = len19;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                }
                                V24::Io(e) => {
                                    *ptr10.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    ::core::mem::forget(vec20);
                                    *ptr10.add(12).cast::<usize>() = len20;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                }
                                V24::Transaction(e) => {
                                    *ptr10.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec21 = (e.into_bytes()).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *ptr10.add(12).cast::<usize>() = len21;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                }
                                V24::Utf8(e) => {
                                    *ptr10.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec22 = (e.into_bytes()).into_boxed_slice();
                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                    let len22 = vec22.len();
                                    ::core::mem::forget(vec22);
                                    *ptr10.add(12).cast::<usize>() = len22;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                }
                                V24::Other(e) => {
                                    *ptr10.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec23 = (e.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *ptr10.add(12).cast::<usize>() = len23;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                }
                            }
                        }
                    };
                    ptr10
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_transaction_manager_validate_transaction<
                    T: GuestTransactionManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0.add(8).cast::<*mut u8>();
                                    let l15 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                9 => {
                                    let l20 = *arg0.add(8).cast::<*mut u8>();
                                    let l21 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                                10 => {
                                    let l22 = *arg0.add(8).cast::<*mut u8>();
                                    let l23 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                11 => {
                                    let l24 = *arg0.add(8).cast::<*mut u8>();
                                    let l25 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                }
                                _ => {
                                    let l26 = *arg0.add(8).cast::<*mut u8>();
                                    let l27 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_transaction_manager_create_payload_from_tx_cabi<
                    T: GuestTransactionManager,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: *mut u8,
                    arg11: usize,
                    arg12: *mut u8,
                    arg13: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len7 = arg11;
                    let bytes7 = _rt::Vec::from_raw_parts(arg10.cast(), len7, len7);
                    let len8 = arg13;
                    let bytes8 = _rt::Vec::from_raw_parts(arg12.cast(), len8, len8);
                    let result9 = T::create_payload_from_tx(
                        TransactionManagerBorrow::lift(arg0 as u32 as usize).get(),
                        Transaction {
                            to: _rt::string_lift(bytes0),
                            value: _rt::string_lift(bytes1),
                            contract_call: match arg5 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len2 = arg7;
                                        let bytes2 = _rt::Vec::from_raw_parts(
                                            arg6.cast(),
                                            len2,
                                            len2,
                                        );
                                        let base6 = arg8;
                                        let len6 = arg9;
                                        let mut result6 = _rt::Vec::with_capacity(len6);
                                        for i in 0..len6 {
                                            let base = base6.add(i * 8);
                                            let e6 = {
                                                let l3 = *base.add(0).cast::<*mut u8>();
                                                let l4 = *base.add(4).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            result6.push(e6);
                                        }
                                        _rt::cabi_dealloc(base6, len6 * 8, 4);
                                        ContractCall {
                                            function: _rt::string_lift(bytes2),
                                            args: result6,
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            data: _rt::string_lift(bytes7),
                            description: _rt::string_lift(bytes8),
                        },
                    );
                    let ptr10 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result9 {
                        Ok(e) => {
                            *ptr10.add(0).cast::<u8>() = (0i32) as u8;
                            let vec11 = (e.into_bytes()).into_boxed_slice();
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            ::core::mem::forget(vec11);
                            *ptr10.add(8).cast::<usize>() = len11;
                            *ptr10.add(4).cast::<*mut u8>() = ptr11.cast_mut();
                        }
                        Err(e) => {
                            *ptr10.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V25;
                            match e {
                                V25::Api(e) => {
                                    *ptr10.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr10.add(12).cast::<usize>() = len12;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V25::Http(e) => {
                                    *ptr10.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr10.add(12).cast::<usize>() = len13;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V25::ExternalService(e) => {
                                    *ptr10.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr10.add(12).cast::<usize>() = len14;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V25::Config(e) => {
                                    *ptr10.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr10.add(12).cast::<usize>() = len15;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                V25::Contract(e) => {
                                    *ptr10.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr10.add(12).cast::<usize>() = len16;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                V25::Configuration(e) => {
                                    *ptr10.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr10.add(12).cast::<usize>() = len17;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                }
                                V25::ContextLoading(e) => {
                                    *ptr10.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    ::core::mem::forget(vec18);
                                    *ptr10.add(12).cast::<usize>() = len18;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                }
                                V25::ContextValidation(e) => {
                                    *ptr10.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    ::core::mem::forget(vec19);
                                    *ptr10.add(12).cast::<usize>() = len19;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                }
                                V25::Llm(e) => {
                                    *ptr10.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    ::core::mem::forget(vec20);
                                    *ptr10.add(12).cast::<usize>() = len20;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                }
                                V25::Io(e) => {
                                    *ptr10.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec21 = (e.into_bytes()).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *ptr10.add(12).cast::<usize>() = len21;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                }
                                V25::Transaction(e) => {
                                    *ptr10.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec22 = (e.into_bytes()).into_boxed_slice();
                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                    let len22 = vec22.len();
                                    ::core::mem::forget(vec22);
                                    *ptr10.add(12).cast::<usize>() = len22;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                }
                                V25::Utf8(e) => {
                                    *ptr10.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec23 = (e.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *ptr10.add(12).cast::<usize>() = len23;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                }
                                V25::Other(e) => {
                                    *ptr10.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec24 = (e.into_bytes()).into_boxed_slice();
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    ::core::mem::forget(vec24);
                                    *ptr10.add(12).cast::<usize>() = len24;
                                    *ptr10.add(8).cast::<*mut u8>() = ptr24.cast_mut();
                                }
                            }
                        }
                    };
                    ptr10
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_transaction_manager_create_payload_from_tx<
                    T: GuestTransactionManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = i32::from(*arg0.add(4).cast::<u8>());
                            match l3 {
                                0 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                2 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                3 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                4 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                5 => {
                                    let l14 = *arg0.add(8).cast::<*mut u8>();
                                    let l15 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                6 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                7 => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                8 => {
                                    let l20 = *arg0.add(8).cast::<*mut u8>();
                                    let l21 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                                9 => {
                                    let l22 = *arg0.add(8).cast::<*mut u8>();
                                    let l23 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                10 => {
                                    let l24 = *arg0.add(8).cast::<*mut u8>();
                                    let l25 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                }
                                11 => {
                                    let l26 = *arg0.add(8).cast::<*mut u8>();
                                    let l27 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                                _ => {
                                    let l28 = *arg0.add(8).cast::<*mut u8>();
                                    let l29 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l28, l29, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type ContractManager: GuestContractManager;
                    type TransactionManager: GuestTransactionManager;
                }
                pub trait GuestContractManager: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/contracts")]
                            extern "C" {
                                #[link_name = "[resource-new]contract-manager"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/contracts")]
                            extern "C" {
                                #[link_name = "[resource-rep]contract-manager"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Create a new Contract instance
                    fn new(
                        &self,
                        name: _rt::String,
                        address: _rt::String,
                        abi: _rt::String,
                    ) -> Contract;
                    /// Create a new Contract instance with description
                    fn new_with_description(
                        &self,
                        name: _rt::String,
                        address: _rt::String,
                        abi: _rt::String,
                        description: _rt::String,
                    ) -> Contract;
                    /// Parse the JSON ABI to JsonAbi struct
                    fn parse_abi(
                        &self,
                        contract: Contract,
                    ) -> Result<_rt::String, AgentError>;
                    /// Encode a function call for this contract using the ABI
                    fn encode_function_call(
                        &self,
                        contract: Contract,
                        function_name: _rt::String,
                        args: _rt::Vec<_rt::String>,
                    ) -> Result<_rt::Vec<u8>, AgentError>;
                    /// Find a function in the ABI
                    fn find_function(
                        &self,
                        contract: Contract,
                        function_name: _rt::String,
                    ) -> Result<_rt::String, AgentError>;
                    /// Validate function arguments against the ABI
                    fn validate_function_call(
                        &self,
                        contract: Contract,
                        function_name: _rt::String,
                        args: _rt::Vec<_rt::String>,
                    ) -> Result<(), AgentError>;
                }
                pub trait GuestTransactionManager: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/contracts")]
                            extern "C" {
                                #[link_name = "[resource-new]transaction-manager"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/contracts")]
                            extern "C" {
                                #[link_name = "[resource-rep]transaction-manager"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Basic validation of transaction fields
                    fn is_valid(&self, transaction: Transaction) -> bool;
                    /// Validate a transaction
                    fn validate_transaction(
                        &self,
                        transaction: Transaction,
                    ) -> Result<(), AgentError>;
                    /// Helper function to create a transaction payload from a Transaction
                    fn create_payload_from_tx(
                        &self,
                        transaction: Transaction,
                    ) -> Result<_rt::String, AgentError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wavs_agent_contracts_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "wavs:agent/contracts#[method]contract-manager.new"] unsafe
                        extern "C" fn export_method_contract_manager_new(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,
                        arg5 : * mut u8, arg6 : usize,) -> * mut u8 {
                        $($path_to_types)*::
                        _export_method_contract_manager_new_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ContractManager > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6) } #[export_name =
                        "cabi_post_wavs:agent/contracts#[method]contract-manager.new"]
                        unsafe extern "C" fn
                        _post_return_method_contract_manager_new(arg0 : * mut u8,) {
                        $($path_to_types)*::
                        __post_return_method_contract_manager_new::<<$ty as
                        $($path_to_types)*:: Guest >::ContractManager > (arg0) }
                        #[export_name =
                        "wavs:agent/contracts#[method]contract-manager.new-with-description"]
                        unsafe extern "C" fn
                        export_method_contract_manager_new_with_description(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,
                        arg5 : * mut u8, arg6 : usize, arg7 : * mut u8, arg8 : usize,) ->
                        * mut u8 { $($path_to_types)*::
                        _export_method_contract_manager_new_with_description_cabi::<<$ty
                        as $($path_to_types)*:: Guest >::ContractManager > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7, arg8) } #[export_name =
                        "cabi_post_wavs:agent/contracts#[method]contract-manager.new-with-description"]
                        unsafe extern "C" fn
                        _post_return_method_contract_manager_new_with_description(arg0 :
                        * mut u8,) { $($path_to_types)*::
                        __post_return_method_contract_manager_new_with_description::<<$ty
                        as $($path_to_types)*:: Guest >::ContractManager > (arg0) }
                        #[export_name =
                        "wavs:agent/contracts#[method]contract-manager.parse-abi"] unsafe
                        extern "C" fn export_method_contract_manager_parse_abi(arg0 : *
                        mut u8, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 :
                        usize, arg5 : * mut u8, arg6 : usize, arg7 : i32, arg8 : * mut
                        u8, arg9 : usize,) -> * mut u8 { $($path_to_types)*::
                        _export_method_contract_manager_parse_abi_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ContractManager > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) } #[export_name =
                        "cabi_post_wavs:agent/contracts#[method]contract-manager.parse-abi"]
                        unsafe extern "C" fn
                        _post_return_method_contract_manager_parse_abi(arg0 : * mut u8,)
                        { $($path_to_types)*::
                        __post_return_method_contract_manager_parse_abi::<<$ty as
                        $($path_to_types)*:: Guest >::ContractManager > (arg0) }
                        #[export_name =
                        "wavs:agent/contracts#[method]contract-manager.encode-function-call"]
                        unsafe extern "C" fn
                        export_method_contract_manager_encode_function_call(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,
                        arg5 : * mut u8, arg6 : usize, arg7 : i32, arg8 : * mut u8, arg9
                        : usize, arg10 : * mut u8, arg11 : usize, arg12 : * mut u8, arg13
                        : usize,) -> * mut u8 { $($path_to_types)*::
                        _export_method_contract_manager_encode_function_call_cabi::<<$ty
                        as $($path_to_types)*:: Guest >::ContractManager > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                        arg12, arg13) } #[export_name =
                        "cabi_post_wavs:agent/contracts#[method]contract-manager.encode-function-call"]
                        unsafe extern "C" fn
                        _post_return_method_contract_manager_encode_function_call(arg0 :
                        * mut u8,) { $($path_to_types)*::
                        __post_return_method_contract_manager_encode_function_call::<<$ty
                        as $($path_to_types)*:: Guest >::ContractManager > (arg0) }
                        #[export_name =
                        "wavs:agent/contracts#[method]contract-manager.find-function"]
                        unsafe extern "C" fn
                        export_method_contract_manager_find_function(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,
                        arg5 : * mut u8, arg6 : usize, arg7 : i32, arg8 : * mut u8, arg9
                        : usize, arg10 : * mut u8, arg11 : usize,) -> * mut u8 {
                        $($path_to_types)*::
                        _export_method_contract_manager_find_function_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ContractManager > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) }
                        #[export_name =
                        "cabi_post_wavs:agent/contracts#[method]contract-manager.find-function"]
                        unsafe extern "C" fn
                        _post_return_method_contract_manager_find_function(arg0 : * mut
                        u8,) { $($path_to_types)*::
                        __post_return_method_contract_manager_find_function::<<$ty as
                        $($path_to_types)*:: Guest >::ContractManager > (arg0) }
                        #[export_name =
                        "wavs:agent/contracts#[method]contract-manager.validate-function-call"]
                        unsafe extern "C" fn
                        export_method_contract_manager_validate_function_call(arg0 : *
                        mut u8, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 :
                        usize, arg5 : * mut u8, arg6 : usize, arg7 : i32, arg8 : * mut
                        u8, arg9 : usize, arg10 : * mut u8, arg11 : usize, arg12 : * mut
                        u8, arg13 : usize,) -> * mut u8 { $($path_to_types)*::
                        _export_method_contract_manager_validate_function_call_cabi::<<$ty
                        as $($path_to_types)*:: Guest >::ContractManager > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                        arg12, arg13) } #[export_name =
                        "cabi_post_wavs:agent/contracts#[method]contract-manager.validate-function-call"]
                        unsafe extern "C" fn
                        _post_return_method_contract_manager_validate_function_call(arg0
                        : * mut u8,) { $($path_to_types)*::
                        __post_return_method_contract_manager_validate_function_call::<<$ty
                        as $($path_to_types)*:: Guest >::ContractManager > (arg0) }
                        #[export_name =
                        "wavs:agent/contracts#[method]transaction-manager.is-valid"]
                        unsafe extern "C" fn
                        export_method_transaction_manager_is_valid(arg0 : * mut u8, arg1
                        : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize, arg5 :
                        i32, arg6 : * mut u8, arg7 : usize, arg8 : * mut u8, arg9 :
                        usize, arg10 : * mut u8, arg11 : usize, arg12 : * mut u8, arg13 :
                        usize,) -> i32 { $($path_to_types)*::
                        _export_method_transaction_manager_is_valid_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::TransactionManager > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11,
                        arg12, arg13) } #[export_name =
                        "wavs:agent/contracts#[method]transaction-manager.validate-transaction"]
                        unsafe extern "C" fn
                        export_method_transaction_manager_validate_transaction(arg0 : *
                        mut u8, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 :
                        usize, arg5 : i32, arg6 : * mut u8, arg7 : usize, arg8 : * mut
                        u8, arg9 : usize, arg10 : * mut u8, arg11 : usize, arg12 : * mut
                        u8, arg13 : usize,) -> * mut u8 { $($path_to_types)*::
                        _export_method_transaction_manager_validate_transaction_cabi::<<$ty
                        as $($path_to_types)*:: Guest >::TransactionManager > (arg0,
                        arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                        arg11, arg12, arg13) } #[export_name =
                        "cabi_post_wavs:agent/contracts#[method]transaction-manager.validate-transaction"]
                        unsafe extern "C" fn
                        _post_return_method_transaction_manager_validate_transaction(arg0
                        : * mut u8,) { $($path_to_types)*::
                        __post_return_method_transaction_manager_validate_transaction::<<$ty
                        as $($path_to_types)*:: Guest >::TransactionManager > (arg0) }
                        #[export_name =
                        "wavs:agent/contracts#[method]transaction-manager.create-payload-from-tx"]
                        unsafe extern "C" fn
                        export_method_transaction_manager_create_payload_from_tx(arg0 : *
                        mut u8, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 :
                        usize, arg5 : i32, arg6 : * mut u8, arg7 : usize, arg8 : * mut
                        u8, arg9 : usize, arg10 : * mut u8, arg11 : usize, arg12 : * mut
                        u8, arg13 : usize,) -> * mut u8 { $($path_to_types)*::
                        _export_method_transaction_manager_create_payload_from_tx_cabi::<<$ty
                        as $($path_to_types)*:: Guest >::TransactionManager > (arg0,
                        arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                        arg11, arg12, arg13) } #[export_name =
                        "cabi_post_wavs:agent/contracts#[method]transaction-manager.create-payload-from-tx"]
                        unsafe extern "C" fn
                        _post_return_method_transaction_manager_create_payload_from_tx(arg0
                        : * mut u8,) { $($path_to_types)*::
                        __post_return_method_transaction_manager_create_payload_from_tx::<<$ty
                        as $($path_to_types)*:: Guest >::TransactionManager > (arg0) }
                        const _ : () = { #[doc(hidden)] #[export_name =
                        "wavs:agent/contracts#[dtor]contract-manager"]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { $($path_to_types)*:: ContractManager::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::ContractManager > (rep) } }; const
                        _ : () = { #[doc(hidden)] #[export_name =
                        "wavs:agent/contracts#[dtor]transaction-manager"]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { $($path_to_types)*:: TransactionManager::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::TransactionManager > (rep) } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wavs_agent_contracts_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 36]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 36],
                );
            }
            #[allow(dead_code, clippy::all)]
            pub mod config {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type AgentError = super::super::super::super::exports::wavs::agent::errors::AgentError;
                pub type Message = super::super::super::super::exports::wavs::agent::common::Message;
                pub type Contract = super::super::super::super::exports::wavs::agent::contracts::Contract;
                /// Configuration options for LLM API requests
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct LlmOptions {
                    /// Temperature controls randomness (0.0-2.0)
                    pub temperature: f32,
                    /// Top_p controls diversity (0.0-1.0)
                    pub top_p: f32,
                    /// Seed for deterministic outputs
                    pub seed: u32,
                    /// Maximum tokens to generate
                    pub max_tokens: Option<u32>,
                    /// Context window size (mainly for Ollama)
                    pub context_window: Option<u32>,
                }
                impl ::core::fmt::Debug for LlmOptions {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("LlmOptions")
                            .field("temperature", &self.temperature)
                            .field("top-p", &self.top_p)
                            .field("seed", &self.seed)
                            .field("max-tokens", &self.max_tokens)
                            .field("context-window", &self.context_window)
                            .finish()
                    }
                }
                /// Generic configuration for agent's decision making
                #[derive(Clone)]
                pub struct Config {
                    pub contracts: _rt::Vec<Contract>,
                    pub llm_config: LlmOptions,
                    pub model: _rt::String,
                    pub messages: _rt::Vec<Message>,
                    /// Any global configuration values
                    pub config: _rt::Vec<(_rt::String, _rt::String)>,
                }
                impl ::core::fmt::Debug for Config {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Config")
                            .field("contracts", &self.contracts)
                            .field("llm-config", &self.llm_config)
                            .field("model", &self.model)
                            .field("messages", &self.messages)
                            .field("config", &self.config)
                            .finish()
                    }
                }
                /// Functions for manipulating LLM options
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct LlmOptionsFuncs {
                    handle: _rt::Resource<LlmOptionsFuncs>,
                }
                type _LlmOptionsFuncsRep<T> = Option<T>;
                impl LlmOptionsFuncs {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `LlmOptionsFuncs`.
                    pub fn new<T: GuestLlmOptionsFuncs>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _LlmOptionsFuncsRep<T> = Some(val);
                        let ptr: *mut _LlmOptionsFuncsRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestLlmOptionsFuncs>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestLlmOptionsFuncs>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestLlmOptionsFuncs>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _LlmOptionsFuncsRep<T>,
                        );
                    }
                    fn as_ptr<T: GuestLlmOptionsFuncs>(
                        &self,
                    ) -> *mut _LlmOptionsFuncsRep<T> {
                        LlmOptionsFuncs::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`LlmOptionsFuncs`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct LlmOptionsFuncsBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a LlmOptionsFuncs>,
                }
                impl<'a> LlmOptionsFuncsBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestLlmOptionsFuncs>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _LlmOptionsFuncsRep<T> {
                        LlmOptionsFuncs::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for LlmOptionsFuncs {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/config")]
                            extern "C" {
                                #[link_name = "[resource-drop]llm-options-funcs"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                /// Configuration resource for loading and managing configuration
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ConfigManager {
                    handle: _rt::Resource<ConfigManager>,
                }
                type _ConfigManagerRep<T> = Option<T>;
                impl ConfigManager {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `ConfigManager`.
                    pub fn new<T: GuestConfigManager>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ConfigManagerRep<T> = Some(val);
                        let ptr: *mut _ConfigManagerRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestConfigManager>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestConfigManager>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestConfigManager>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ConfigManagerRep<T>);
                    }
                    fn as_ptr<T: GuestConfigManager>(
                        &self,
                    ) -> *mut _ConfigManagerRep<T> {
                        ConfigManager::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`ConfigManager`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ConfigManagerBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a ConfigManager>,
                }
                impl<'a> ConfigManagerBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestConfigManager>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _ConfigManagerRep<T> {
                        ConfigManager::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for ConfigManager {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/config")]
                            extern "C" {
                                #[link_name = "[resource-drop]config-manager"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_options_funcs_new_cabi<
                    T: GuestLlmOptionsFuncs,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::new(
                        LlmOptionsFuncsBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let LlmOptions {
                        temperature: temperature2,
                        top_p: top_p2,
                        seed: seed2,
                        max_tokens: max_tokens2,
                        context_window: context_window2,
                    } = result0;
                    *ptr1.add(0).cast::<f32>() = _rt::as_f32(temperature2);
                    *ptr1.add(4).cast::<f32>() = _rt::as_f32(top_p2);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(seed2);
                    match max_tokens2 {
                        Some(e) => {
                            *ptr1.add(12).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(16).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(12).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match context_window2 {
                        Some(e) => {
                            *ptr1.add(20).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(24).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(20).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_options_funcs_temperature_cabi<
                    T: GuestLlmOptionsFuncs,
                >(arg0: *mut u8, arg1: f32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::temperature(
                        LlmOptionsFuncsBorrow::lift(arg0 as u32 as usize).get(),
                        arg1,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let LlmOptions {
                        temperature: temperature2,
                        top_p: top_p2,
                        seed: seed2,
                        max_tokens: max_tokens2,
                        context_window: context_window2,
                    } = result0;
                    *ptr1.add(0).cast::<f32>() = _rt::as_f32(temperature2);
                    *ptr1.add(4).cast::<f32>() = _rt::as_f32(top_p2);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(seed2);
                    match max_tokens2 {
                        Some(e) => {
                            *ptr1.add(12).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(16).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(12).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match context_window2 {
                        Some(e) => {
                            *ptr1.add(20).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(24).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(20).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_options_funcs_top_p_cabi<
                    T: GuestLlmOptionsFuncs,
                >(arg0: *mut u8, arg1: f32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::top_p(
                        LlmOptionsFuncsBorrow::lift(arg0 as u32 as usize).get(),
                        arg1,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let LlmOptions {
                        temperature: temperature2,
                        top_p: top_p2,
                        seed: seed2,
                        max_tokens: max_tokens2,
                        context_window: context_window2,
                    } = result0;
                    *ptr1.add(0).cast::<f32>() = _rt::as_f32(temperature2);
                    *ptr1.add(4).cast::<f32>() = _rt::as_f32(top_p2);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(seed2);
                    match max_tokens2 {
                        Some(e) => {
                            *ptr1.add(12).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(16).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(12).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match context_window2 {
                        Some(e) => {
                            *ptr1.add(20).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(24).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(20).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_options_funcs_seed_cabi<
                    T: GuestLlmOptionsFuncs,
                >(arg0: *mut u8, arg1: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::seed(
                        LlmOptionsFuncsBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u32,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let LlmOptions {
                        temperature: temperature2,
                        top_p: top_p2,
                        seed: seed2,
                        max_tokens: max_tokens2,
                        context_window: context_window2,
                    } = result0;
                    *ptr1.add(0).cast::<f32>() = _rt::as_f32(temperature2);
                    *ptr1.add(4).cast::<f32>() = _rt::as_f32(top_p2);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(seed2);
                    match max_tokens2 {
                        Some(e) => {
                            *ptr1.add(12).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(16).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(12).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match context_window2 {
                        Some(e) => {
                            *ptr1.add(20).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(24).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(20).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_options_funcs_max_tokens_cabi<
                    T: GuestLlmOptionsFuncs,
                >(arg0: *mut u8, arg1: i32, arg2: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::max_tokens(
                        LlmOptionsFuncsBorrow::lift(arg0 as u32 as usize).get(),
                        match arg1 {
                            0 => None,
                            1 => {
                                let e = arg2 as u32;
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let LlmOptions {
                        temperature: temperature2,
                        top_p: top_p2,
                        seed: seed2,
                        max_tokens: max_tokens2,
                        context_window: context_window2,
                    } = result0;
                    *ptr1.add(0).cast::<f32>() = _rt::as_f32(temperature2);
                    *ptr1.add(4).cast::<f32>() = _rt::as_f32(top_p2);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(seed2);
                    match max_tokens2 {
                        Some(e) => {
                            *ptr1.add(12).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(16).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(12).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match context_window2 {
                        Some(e) => {
                            *ptr1.add(20).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(24).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(20).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_options_funcs_context_window_cabi<
                    T: GuestLlmOptionsFuncs,
                >(arg0: *mut u8, arg1: i32, arg2: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::context_window(
                        LlmOptionsFuncsBorrow::lift(arg0 as u32 as usize).get(),
                        match arg1 {
                            0 => None,
                            1 => {
                                let e = arg2 as u32;
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let LlmOptions {
                        temperature: temperature2,
                        top_p: top_p2,
                        seed: seed2,
                        max_tokens: max_tokens2,
                        context_window: context_window2,
                    } = result0;
                    *ptr1.add(0).cast::<f32>() = _rt::as_f32(temperature2);
                    *ptr1.add(4).cast::<f32>() = _rt::as_f32(top_p2);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(seed2);
                    match max_tokens2 {
                        Some(e) => {
                            *ptr1.add(12).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(16).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(12).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match context_window2 {
                        Some(e) => {
                            *ptr1.add(20).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(24).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(20).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_config_manager_load_cabi<
                    T: GuestConfigManager,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::load(
                        ConfigManagerBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let Config {
                                contracts: contracts2,
                                llm_config: llm_config2,
                                model: model2,
                                messages: messages2,
                                config: config2,
                            } = e;
                            let vec8 = contracts2;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * 36,
                                4,
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8.add(i * 36);
                                {
                                    let super::super::super::super::exports::wavs::agent::contracts::Contract {
                                        name: name3,
                                        address: address3,
                                        abi: abi3,
                                        description: description3,
                                    } = e;
                                    let vec4 = (name3.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base.add(4).cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = (address3.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base.add(12).cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                    let vec6 = (abi3.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base.add(20).cast::<usize>() = len6;
                                    *base.add(16).cast::<*mut u8>() = ptr6.cast_mut();
                                    match description3 {
                                        Some(e) => {
                                            *base.add(24).cast::<u8>() = (1i32) as u8;
                                            let vec7 = (e.into_bytes()).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *base.add(32).cast::<usize>() = len7;
                                            *base.add(28).cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                        None => {
                                            *base.add(24).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len8;
                            *ptr1.add(4).cast::<*mut u8>() = result8;
                            let LlmOptions {
                                temperature: temperature9,
                                top_p: top_p9,
                                seed: seed9,
                                max_tokens: max_tokens9,
                                context_window: context_window9,
                            } = llm_config2;
                            *ptr1.add(12).cast::<f32>() = _rt::as_f32(temperature9);
                            *ptr1.add(16).cast::<f32>() = _rt::as_f32(top_p9);
                            *ptr1.add(20).cast::<i32>() = _rt::as_i32(seed9);
                            match max_tokens9 {
                                Some(e) => {
                                    *ptr1.add(24).cast::<u8>() = (1i32) as u8;
                                    *ptr1.add(28).cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr1.add(24).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match context_window9 {
                                Some(e) => {
                                    *ptr1.add(32).cast::<u8>() = (1i32) as u8;
                                    *ptr1.add(36).cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr1.add(32).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec10 = (model2.into_bytes()).into_boxed_slice();
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            ::core::mem::forget(vec10);
                            *ptr1.add(44).cast::<usize>() = len10;
                            *ptr1.add(40).cast::<*mut u8>() = ptr10.cast_mut();
                            let vec23 = messages2;
                            let len23 = vec23.len();
                            let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec23.len() * 56,
                                4,
                            );
                            let result23 = if layout23.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout23);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec23.into_iter().enumerate() {
                                let base = result23.add(i * 56);
                                {
                                    let super::super::super::super::exports::wavs::agent::common::Message {
                                        role: role11,
                                        content: content11,
                                        tool_calls: tool_calls11,
                                        tool_call_id: tool_call_id11,
                                        name: name11,
                                    } = e;
                                    let vec12 = (role11.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *base.add(4).cast::<usize>() = len12;
                                    *base.add(0).cast::<*mut u8>() = ptr12.cast_mut();
                                    match content11 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            let vec13 = (e.into_bytes()).into_boxed_slice();
                                            let ptr13 = vec13.as_ptr().cast::<u8>();
                                            let len13 = vec13.len();
                                            ::core::mem::forget(vec13);
                                            *base.add(16).cast::<usize>() = len13;
                                            *base.add(12).cast::<*mut u8>() = ptr13.cast_mut();
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match tool_calls11 {
                                        Some(e) => {
                                            *base.add(20).cast::<u8>() = (1i32) as u8;
                                            let vec20 = e;
                                            let len20 = vec20.len();
                                            let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec20.len() * 32,
                                                4,
                                            );
                                            let result20 = if layout20.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout20);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec20.into_iter().enumerate() {
                                                let base = result20.add(i * 32);
                                                {
                                                    let super::super::super::super::exports::wavs::agent::common::ToolCall {
                                                        id: id14,
                                                        tool_type: tool_type14,
                                                        function: function14,
                                                    } = e;
                                                    let vec15 = (id14.into_bytes()).into_boxed_slice();
                                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                                    let len15 = vec15.len();
                                                    ::core::mem::forget(vec15);
                                                    *base.add(4).cast::<usize>() = len15;
                                                    *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                                    let vec16 = (tool_type14.into_bytes()).into_boxed_slice();
                                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                                    let len16 = vec16.len();
                                                    ::core::mem::forget(vec16);
                                                    *base.add(12).cast::<usize>() = len16;
                                                    *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                                    let super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                                        name: name17,
                                                        arguments: arguments17,
                                                    } = function14;
                                                    let vec18 = (name17.into_bytes()).into_boxed_slice();
                                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                                    let len18 = vec18.len();
                                                    ::core::mem::forget(vec18);
                                                    *base.add(20).cast::<usize>() = len18;
                                                    *base.add(16).cast::<*mut u8>() = ptr18.cast_mut();
                                                    let vec19 = (arguments17.into_bytes()).into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base.add(28).cast::<usize>() = len19;
                                                    *base.add(24).cast::<*mut u8>() = ptr19.cast_mut();
                                                }
                                            }
                                            *base.add(28).cast::<usize>() = len20;
                                            *base.add(24).cast::<*mut u8>() = result20;
                                        }
                                        None => {
                                            *base.add(20).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match tool_call_id11 {
                                        Some(e) => {
                                            *base.add(32).cast::<u8>() = (1i32) as u8;
                                            let vec21 = (e.into_bytes()).into_boxed_slice();
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();
                                            ::core::mem::forget(vec21);
                                            *base.add(40).cast::<usize>() = len21;
                                            *base.add(36).cast::<*mut u8>() = ptr21.cast_mut();
                                        }
                                        None => {
                                            *base.add(32).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match name11 {
                                        Some(e) => {
                                            *base.add(44).cast::<u8>() = (1i32) as u8;
                                            let vec22 = (e.into_bytes()).into_boxed_slice();
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            ::core::mem::forget(vec22);
                                            *base.add(52).cast::<usize>() = len22;
                                            *base.add(48).cast::<*mut u8>() = ptr22.cast_mut();
                                        }
                                        None => {
                                            *base.add(44).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr1.add(52).cast::<usize>() = len23;
                            *ptr1.add(48).cast::<*mut u8>() = result23;
                            let vec27 = config2;
                            let len27 = vec27.len();
                            let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec27.len() * 16,
                                4,
                            );
                            let result27 = if layout27.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout27);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec27.into_iter().enumerate() {
                                let base = result27.add(i * 16);
                                {
                                    let (t24_0, t24_1) = e;
                                    let vec25 = (t24_0.into_bytes()).into_boxed_slice();
                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                    let len25 = vec25.len();
                                    ::core::mem::forget(vec25);
                                    *base.add(4).cast::<usize>() = len25;
                                    *base.add(0).cast::<*mut u8>() = ptr25.cast_mut();
                                    let vec26 = (t24_1.into_bytes()).into_boxed_slice();
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    ::core::mem::forget(vec26);
                                    *base.add(12).cast::<usize>() = len26;
                                    *base.add(8).cast::<*mut u8>() = ptr26.cast_mut();
                                }
                            }
                            *ptr1.add(60).cast::<usize>() = len27;
                            *ptr1.add(56).cast::<*mut u8>() = result27;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec28 = (e.into_bytes()).into_boxed_slice();
                            let ptr28 = vec28.as_ptr().cast::<u8>();
                            let len28 = vec28.len();
                            ::core::mem::forget(vec28);
                            *ptr1.add(8).cast::<usize>() = len28;
                            *ptr1.add(4).cast::<*mut u8>() = ptr28.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_config_manager_load<
                    T: GuestConfigManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base12 = l1;
                            let len12 = l2;
                            for i in 0..len12 {
                                let base = base12.add(i * 36);
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = *base.add(8).cast::<*mut u8>();
                                    let l6 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                    let l7 = *base.add(16).cast::<*mut u8>();
                                    let l8 = *base.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                    let l9 = i32::from(*base.add(24).cast::<u8>());
                                    match l9 {
                                        0 => {}
                                        _ => {
                                            let l10 = *base.add(28).cast::<*mut u8>();
                                            let l11 = *base.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l10, l11, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base12, len12 * 36, 4);
                            let l13 = *arg0.add(40).cast::<*mut u8>();
                            let l14 = *arg0.add(44).cast::<usize>();
                            _rt::cabi_dealloc(l13, l14, 1);
                            let l15 = *arg0.add(48).cast::<*mut u8>();
                            let l16 = *arg0.add(52).cast::<usize>();
                            let base40 = l15;
                            let len40 = l16;
                            for i in 0..len40 {
                                let base = base40.add(i * 56);
                                {
                                    let l17 = *base.add(0).cast::<*mut u8>();
                                    let l18 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l17, l18, 1);
                                    let l19 = i32::from(*base.add(8).cast::<u8>());
                                    match l19 {
                                        0 => {}
                                        _ => {
                                            let l20 = *base.add(12).cast::<*mut u8>();
                                            let l21 = *base.add(16).cast::<usize>();
                                            _rt::cabi_dealloc(l20, l21, 1);
                                        }
                                    }
                                    let l22 = i32::from(*base.add(20).cast::<u8>());
                                    match l22 {
                                        0 => {}
                                        _ => {
                                            let l23 = *base.add(24).cast::<*mut u8>();
                                            let l24 = *base.add(28).cast::<usize>();
                                            let base33 = l23;
                                            let len33 = l24;
                                            for i in 0..len33 {
                                                let base = base33.add(i * 32);
                                                {
                                                    let l25 = *base.add(0).cast::<*mut u8>();
                                                    let l26 = *base.add(4).cast::<usize>();
                                                    _rt::cabi_dealloc(l25, l26, 1);
                                                    let l27 = *base.add(8).cast::<*mut u8>();
                                                    let l28 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l27, l28, 1);
                                                    let l29 = *base.add(16).cast::<*mut u8>();
                                                    let l30 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l29, l30, 1);
                                                    let l31 = *base.add(24).cast::<*mut u8>();
                                                    let l32 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(base33, len33 * 32, 4);
                                        }
                                    }
                                    let l34 = i32::from(*base.add(32).cast::<u8>());
                                    match l34 {
                                        0 => {}
                                        _ => {
                                            let l35 = *base.add(36).cast::<*mut u8>();
                                            let l36 = *base.add(40).cast::<usize>();
                                            _rt::cabi_dealloc(l35, l36, 1);
                                        }
                                    }
                                    let l37 = i32::from(*base.add(44).cast::<u8>());
                                    match l37 {
                                        0 => {}
                                        _ => {
                                            let l38 = *base.add(48).cast::<*mut u8>();
                                            let l39 = *base.add(52).cast::<usize>();
                                            _rt::cabi_dealloc(l38, l39, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base40, len40 * 56, 4);
                            let l41 = *arg0.add(56).cast::<*mut u8>();
                            let l42 = *arg0.add(60).cast::<usize>();
                            let base47 = l41;
                            let len47 = l42;
                            for i in 0..len47 {
                                let base = base47.add(i * 16);
                                {
                                    let l43 = *base.add(0).cast::<*mut u8>();
                                    let l44 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                    let l45 = *base.add(8).cast::<*mut u8>();
                                    let l46 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                }
                            }
                            _rt::cabi_dealloc(base47, len47 * 16, 4);
                        }
                        _ => {
                            let l48 = *arg0.add(4).cast::<*mut u8>();
                            let l49 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l48, l49, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_config_manager_load_from_uri_cabi<
                    T: GuestConfigManager,
                >(arg0: *mut u8, arg1: *mut u8, arg2: usize) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::load_from_uri(
                        ConfigManagerBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let Config {
                                contracts: contracts3,
                                llm_config: llm_config3,
                                model: model3,
                                messages: messages3,
                                config: config3,
                            } = e;
                            let vec9 = contracts3;
                            let len9 = vec9.len();
                            let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec9.len() * 36,
                                4,
                            );
                            let result9 = if layout9.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout9);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec9.into_iter().enumerate() {
                                let base = result9.add(i * 36);
                                {
                                    let super::super::super::super::exports::wavs::agent::contracts::Contract {
                                        name: name4,
                                        address: address4,
                                        abi: abi4,
                                        description: description4,
                                    } = e;
                                    let vec5 = (name4.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base.add(4).cast::<usize>() = len5;
                                    *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                    let vec6 = (address4.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base.add(12).cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = (abi4.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *base.add(20).cast::<usize>() = len7;
                                    *base.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                    match description4 {
                                        Some(e) => {
                                            *base.add(24).cast::<u8>() = (1i32) as u8;
                                            let vec8 = (e.into_bytes()).into_boxed_slice();
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            ::core::mem::forget(vec8);
                                            *base.add(32).cast::<usize>() = len8;
                                            *base.add(28).cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                        None => {
                                            *base.add(24).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr2.add(8).cast::<usize>() = len9;
                            *ptr2.add(4).cast::<*mut u8>() = result9;
                            let LlmOptions {
                                temperature: temperature10,
                                top_p: top_p10,
                                seed: seed10,
                                max_tokens: max_tokens10,
                                context_window: context_window10,
                            } = llm_config3;
                            *ptr2.add(12).cast::<f32>() = _rt::as_f32(temperature10);
                            *ptr2.add(16).cast::<f32>() = _rt::as_f32(top_p10);
                            *ptr2.add(20).cast::<i32>() = _rt::as_i32(seed10);
                            match max_tokens10 {
                                Some(e) => {
                                    *ptr2.add(24).cast::<u8>() = (1i32) as u8;
                                    *ptr2.add(28).cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr2.add(24).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match context_window10 {
                                Some(e) => {
                                    *ptr2.add(32).cast::<u8>() = (1i32) as u8;
                                    *ptr2.add(36).cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr2.add(32).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec11 = (model3.into_bytes()).into_boxed_slice();
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            ::core::mem::forget(vec11);
                            *ptr2.add(44).cast::<usize>() = len11;
                            *ptr2.add(40).cast::<*mut u8>() = ptr11.cast_mut();
                            let vec24 = messages3;
                            let len24 = vec24.len();
                            let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec24.len() * 56,
                                4,
                            );
                            let result24 = if layout24.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout24);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec24.into_iter().enumerate() {
                                let base = result24.add(i * 56);
                                {
                                    let super::super::super::super::exports::wavs::agent::common::Message {
                                        role: role12,
                                        content: content12,
                                        tool_calls: tool_calls12,
                                        tool_call_id: tool_call_id12,
                                        name: name12,
                                    } = e;
                                    let vec13 = (role12.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *base.add(4).cast::<usize>() = len13;
                                    *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                                    match content12 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            let vec14 = (e.into_bytes()).into_boxed_slice();
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            ::core::mem::forget(vec14);
                                            *base.add(16).cast::<usize>() = len14;
                                            *base.add(12).cast::<*mut u8>() = ptr14.cast_mut();
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match tool_calls12 {
                                        Some(e) => {
                                            *base.add(20).cast::<u8>() = (1i32) as u8;
                                            let vec21 = e;
                                            let len21 = vec21.len();
                                            let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec21.len() * 32,
                                                4,
                                            );
                                            let result21 = if layout21.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout21);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec21.into_iter().enumerate() {
                                                let base = result21.add(i * 32);
                                                {
                                                    let super::super::super::super::exports::wavs::agent::common::ToolCall {
                                                        id: id15,
                                                        tool_type: tool_type15,
                                                        function: function15,
                                                    } = e;
                                                    let vec16 = (id15.into_bytes()).into_boxed_slice();
                                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                                    let len16 = vec16.len();
                                                    ::core::mem::forget(vec16);
                                                    *base.add(4).cast::<usize>() = len16;
                                                    *base.add(0).cast::<*mut u8>() = ptr16.cast_mut();
                                                    let vec17 = (tool_type15.into_bytes()).into_boxed_slice();
                                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                                    let len17 = vec17.len();
                                                    ::core::mem::forget(vec17);
                                                    *base.add(12).cast::<usize>() = len17;
                                                    *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                                    let super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                                        name: name18,
                                                        arguments: arguments18,
                                                    } = function15;
                                                    let vec19 = (name18.into_bytes()).into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base.add(20).cast::<usize>() = len19;
                                                    *base.add(16).cast::<*mut u8>() = ptr19.cast_mut();
                                                    let vec20 = (arguments18.into_bytes()).into_boxed_slice();
                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                    let len20 = vec20.len();
                                                    ::core::mem::forget(vec20);
                                                    *base.add(28).cast::<usize>() = len20;
                                                    *base.add(24).cast::<*mut u8>() = ptr20.cast_mut();
                                                }
                                            }
                                            *base.add(28).cast::<usize>() = len21;
                                            *base.add(24).cast::<*mut u8>() = result21;
                                        }
                                        None => {
                                            *base.add(20).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match tool_call_id12 {
                                        Some(e) => {
                                            *base.add(32).cast::<u8>() = (1i32) as u8;
                                            let vec22 = (e.into_bytes()).into_boxed_slice();
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            ::core::mem::forget(vec22);
                                            *base.add(40).cast::<usize>() = len22;
                                            *base.add(36).cast::<*mut u8>() = ptr22.cast_mut();
                                        }
                                        None => {
                                            *base.add(32).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match name12 {
                                        Some(e) => {
                                            *base.add(44).cast::<u8>() = (1i32) as u8;
                                            let vec23 = (e.into_bytes()).into_boxed_slice();
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            ::core::mem::forget(vec23);
                                            *base.add(52).cast::<usize>() = len23;
                                            *base.add(48).cast::<*mut u8>() = ptr23.cast_mut();
                                        }
                                        None => {
                                            *base.add(44).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr2.add(52).cast::<usize>() = len24;
                            *ptr2.add(48).cast::<*mut u8>() = result24;
                            let vec28 = config3;
                            let len28 = vec28.len();
                            let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec28.len() * 16,
                                4,
                            );
                            let result28 = if layout28.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout28);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec28.into_iter().enumerate() {
                                let base = result28.add(i * 16);
                                {
                                    let (t25_0, t25_1) = e;
                                    let vec26 = (t25_0.into_bytes()).into_boxed_slice();
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    ::core::mem::forget(vec26);
                                    *base.add(4).cast::<usize>() = len26;
                                    *base.add(0).cast::<*mut u8>() = ptr26.cast_mut();
                                    let vec27 = (t25_1.into_bytes()).into_boxed_slice();
                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                    let len27 = vec27.len();
                                    ::core::mem::forget(vec27);
                                    *base.add(12).cast::<usize>() = len27;
                                    *base.add(8).cast::<*mut u8>() = ptr27.cast_mut();
                                }
                            }
                            *ptr2.add(60).cast::<usize>() = len28;
                            *ptr2.add(56).cast::<*mut u8>() = result28;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr2.add(8).cast::<usize>() = len29;
                            *ptr2.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_config_manager_load_from_uri<
                    T: GuestConfigManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base12 = l1;
                            let len12 = l2;
                            for i in 0..len12 {
                                let base = base12.add(i * 36);
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = *base.add(8).cast::<*mut u8>();
                                    let l6 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                    let l7 = *base.add(16).cast::<*mut u8>();
                                    let l8 = *base.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                    let l9 = i32::from(*base.add(24).cast::<u8>());
                                    match l9 {
                                        0 => {}
                                        _ => {
                                            let l10 = *base.add(28).cast::<*mut u8>();
                                            let l11 = *base.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l10, l11, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base12, len12 * 36, 4);
                            let l13 = *arg0.add(40).cast::<*mut u8>();
                            let l14 = *arg0.add(44).cast::<usize>();
                            _rt::cabi_dealloc(l13, l14, 1);
                            let l15 = *arg0.add(48).cast::<*mut u8>();
                            let l16 = *arg0.add(52).cast::<usize>();
                            let base40 = l15;
                            let len40 = l16;
                            for i in 0..len40 {
                                let base = base40.add(i * 56);
                                {
                                    let l17 = *base.add(0).cast::<*mut u8>();
                                    let l18 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l17, l18, 1);
                                    let l19 = i32::from(*base.add(8).cast::<u8>());
                                    match l19 {
                                        0 => {}
                                        _ => {
                                            let l20 = *base.add(12).cast::<*mut u8>();
                                            let l21 = *base.add(16).cast::<usize>();
                                            _rt::cabi_dealloc(l20, l21, 1);
                                        }
                                    }
                                    let l22 = i32::from(*base.add(20).cast::<u8>());
                                    match l22 {
                                        0 => {}
                                        _ => {
                                            let l23 = *base.add(24).cast::<*mut u8>();
                                            let l24 = *base.add(28).cast::<usize>();
                                            let base33 = l23;
                                            let len33 = l24;
                                            for i in 0..len33 {
                                                let base = base33.add(i * 32);
                                                {
                                                    let l25 = *base.add(0).cast::<*mut u8>();
                                                    let l26 = *base.add(4).cast::<usize>();
                                                    _rt::cabi_dealloc(l25, l26, 1);
                                                    let l27 = *base.add(8).cast::<*mut u8>();
                                                    let l28 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l27, l28, 1);
                                                    let l29 = *base.add(16).cast::<*mut u8>();
                                                    let l30 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l29, l30, 1);
                                                    let l31 = *base.add(24).cast::<*mut u8>();
                                                    let l32 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(base33, len33 * 32, 4);
                                        }
                                    }
                                    let l34 = i32::from(*base.add(32).cast::<u8>());
                                    match l34 {
                                        0 => {}
                                        _ => {
                                            let l35 = *base.add(36).cast::<*mut u8>();
                                            let l36 = *base.add(40).cast::<usize>();
                                            _rt::cabi_dealloc(l35, l36, 1);
                                        }
                                    }
                                    let l37 = i32::from(*base.add(44).cast::<u8>());
                                    match l37 {
                                        0 => {}
                                        _ => {
                                            let l38 = *base.add(48).cast::<*mut u8>();
                                            let l39 = *base.add(52).cast::<usize>();
                                            _rt::cabi_dealloc(l38, l39, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base40, len40 * 56, 4);
                            let l41 = *arg0.add(56).cast::<*mut u8>();
                            let l42 = *arg0.add(60).cast::<usize>();
                            let base47 = l41;
                            let len47 = l42;
                            for i in 0..len47 {
                                let base = base47.add(i * 16);
                                {
                                    let l43 = *base.add(0).cast::<*mut u8>();
                                    let l44 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                    let l45 = *base.add(8).cast::<*mut u8>();
                                    let l46 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                }
                            }
                            _rt::cabi_dealloc(base47, len47 * 16, 4);
                        }
                        _ => {
                            let l48 = *arg0.add(4).cast::<*mut u8>();
                            let l49 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l48, l49, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_config_manager_from_json_cabi<
                    T: GuestConfigManager,
                >(arg0: *mut u8, arg1: *mut u8, arg2: usize) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::from_json(
                        ConfigManagerBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let Config {
                                contracts: contracts3,
                                llm_config: llm_config3,
                                model: model3,
                                messages: messages3,
                                config: config3,
                            } = e;
                            let vec9 = contracts3;
                            let len9 = vec9.len();
                            let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec9.len() * 36,
                                4,
                            );
                            let result9 = if layout9.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout9);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec9.into_iter().enumerate() {
                                let base = result9.add(i * 36);
                                {
                                    let super::super::super::super::exports::wavs::agent::contracts::Contract {
                                        name: name4,
                                        address: address4,
                                        abi: abi4,
                                        description: description4,
                                    } = e;
                                    let vec5 = (name4.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base.add(4).cast::<usize>() = len5;
                                    *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                    let vec6 = (address4.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base.add(12).cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = (abi4.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *base.add(20).cast::<usize>() = len7;
                                    *base.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                    match description4 {
                                        Some(e) => {
                                            *base.add(24).cast::<u8>() = (1i32) as u8;
                                            let vec8 = (e.into_bytes()).into_boxed_slice();
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            ::core::mem::forget(vec8);
                                            *base.add(32).cast::<usize>() = len8;
                                            *base.add(28).cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                        None => {
                                            *base.add(24).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr2.add(8).cast::<usize>() = len9;
                            *ptr2.add(4).cast::<*mut u8>() = result9;
                            let LlmOptions {
                                temperature: temperature10,
                                top_p: top_p10,
                                seed: seed10,
                                max_tokens: max_tokens10,
                                context_window: context_window10,
                            } = llm_config3;
                            *ptr2.add(12).cast::<f32>() = _rt::as_f32(temperature10);
                            *ptr2.add(16).cast::<f32>() = _rt::as_f32(top_p10);
                            *ptr2.add(20).cast::<i32>() = _rt::as_i32(seed10);
                            match max_tokens10 {
                                Some(e) => {
                                    *ptr2.add(24).cast::<u8>() = (1i32) as u8;
                                    *ptr2.add(28).cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr2.add(24).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match context_window10 {
                                Some(e) => {
                                    *ptr2.add(32).cast::<u8>() = (1i32) as u8;
                                    *ptr2.add(36).cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr2.add(32).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec11 = (model3.into_bytes()).into_boxed_slice();
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            ::core::mem::forget(vec11);
                            *ptr2.add(44).cast::<usize>() = len11;
                            *ptr2.add(40).cast::<*mut u8>() = ptr11.cast_mut();
                            let vec24 = messages3;
                            let len24 = vec24.len();
                            let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec24.len() * 56,
                                4,
                            );
                            let result24 = if layout24.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout24);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec24.into_iter().enumerate() {
                                let base = result24.add(i * 56);
                                {
                                    let super::super::super::super::exports::wavs::agent::common::Message {
                                        role: role12,
                                        content: content12,
                                        tool_calls: tool_calls12,
                                        tool_call_id: tool_call_id12,
                                        name: name12,
                                    } = e;
                                    let vec13 = (role12.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *base.add(4).cast::<usize>() = len13;
                                    *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                                    match content12 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            let vec14 = (e.into_bytes()).into_boxed_slice();
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            ::core::mem::forget(vec14);
                                            *base.add(16).cast::<usize>() = len14;
                                            *base.add(12).cast::<*mut u8>() = ptr14.cast_mut();
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match tool_calls12 {
                                        Some(e) => {
                                            *base.add(20).cast::<u8>() = (1i32) as u8;
                                            let vec21 = e;
                                            let len21 = vec21.len();
                                            let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec21.len() * 32,
                                                4,
                                            );
                                            let result21 = if layout21.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout21);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec21.into_iter().enumerate() {
                                                let base = result21.add(i * 32);
                                                {
                                                    let super::super::super::super::exports::wavs::agent::common::ToolCall {
                                                        id: id15,
                                                        tool_type: tool_type15,
                                                        function: function15,
                                                    } = e;
                                                    let vec16 = (id15.into_bytes()).into_boxed_slice();
                                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                                    let len16 = vec16.len();
                                                    ::core::mem::forget(vec16);
                                                    *base.add(4).cast::<usize>() = len16;
                                                    *base.add(0).cast::<*mut u8>() = ptr16.cast_mut();
                                                    let vec17 = (tool_type15.into_bytes()).into_boxed_slice();
                                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                                    let len17 = vec17.len();
                                                    ::core::mem::forget(vec17);
                                                    *base.add(12).cast::<usize>() = len17;
                                                    *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                                    let super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                                        name: name18,
                                                        arguments: arguments18,
                                                    } = function15;
                                                    let vec19 = (name18.into_bytes()).into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base.add(20).cast::<usize>() = len19;
                                                    *base.add(16).cast::<*mut u8>() = ptr19.cast_mut();
                                                    let vec20 = (arguments18.into_bytes()).into_boxed_slice();
                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                    let len20 = vec20.len();
                                                    ::core::mem::forget(vec20);
                                                    *base.add(28).cast::<usize>() = len20;
                                                    *base.add(24).cast::<*mut u8>() = ptr20.cast_mut();
                                                }
                                            }
                                            *base.add(28).cast::<usize>() = len21;
                                            *base.add(24).cast::<*mut u8>() = result21;
                                        }
                                        None => {
                                            *base.add(20).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match tool_call_id12 {
                                        Some(e) => {
                                            *base.add(32).cast::<u8>() = (1i32) as u8;
                                            let vec22 = (e.into_bytes()).into_boxed_slice();
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            ::core::mem::forget(vec22);
                                            *base.add(40).cast::<usize>() = len22;
                                            *base.add(36).cast::<*mut u8>() = ptr22.cast_mut();
                                        }
                                        None => {
                                            *base.add(32).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match name12 {
                                        Some(e) => {
                                            *base.add(44).cast::<u8>() = (1i32) as u8;
                                            let vec23 = (e.into_bytes()).into_boxed_slice();
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            ::core::mem::forget(vec23);
                                            *base.add(52).cast::<usize>() = len23;
                                            *base.add(48).cast::<*mut u8>() = ptr23.cast_mut();
                                        }
                                        None => {
                                            *base.add(44).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr2.add(52).cast::<usize>() = len24;
                            *ptr2.add(48).cast::<*mut u8>() = result24;
                            let vec28 = config3;
                            let len28 = vec28.len();
                            let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec28.len() * 16,
                                4,
                            );
                            let result28 = if layout28.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout28);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec28.into_iter().enumerate() {
                                let base = result28.add(i * 16);
                                {
                                    let (t25_0, t25_1) = e;
                                    let vec26 = (t25_0.into_bytes()).into_boxed_slice();
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    ::core::mem::forget(vec26);
                                    *base.add(4).cast::<usize>() = len26;
                                    *base.add(0).cast::<*mut u8>() = ptr26.cast_mut();
                                    let vec27 = (t25_1.into_bytes()).into_boxed_slice();
                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                    let len27 = vec27.len();
                                    ::core::mem::forget(vec27);
                                    *base.add(12).cast::<usize>() = len27;
                                    *base.add(8).cast::<*mut u8>() = ptr27.cast_mut();
                                }
                            }
                            *ptr2.add(60).cast::<usize>() = len28;
                            *ptr2.add(56).cast::<*mut u8>() = result28;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V42;
                            match e {
                                V42::Api(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec29 = (e.into_bytes()).into_boxed_slice();
                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                    let len29 = vec29.len();
                                    ::core::mem::forget(vec29);
                                    *ptr2.add(12).cast::<usize>() = len29;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr29.cast_mut();
                                }
                                V42::Http(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec30 = (e.into_bytes()).into_boxed_slice();
                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                    let len30 = vec30.len();
                                    ::core::mem::forget(vec30);
                                    *ptr2.add(12).cast::<usize>() = len30;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr30.cast_mut();
                                }
                                V42::ExternalService(e) => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec31 = (e.into_bytes()).into_boxed_slice();
                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                    let len31 = vec31.len();
                                    ::core::mem::forget(vec31);
                                    *ptr2.add(12).cast::<usize>() = len31;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr31.cast_mut();
                                }
                                V42::Config(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec32 = (e.into_bytes()).into_boxed_slice();
                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                    let len32 = vec32.len();
                                    ::core::mem::forget(vec32);
                                    *ptr2.add(12).cast::<usize>() = len32;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr32.cast_mut();
                                }
                                V42::Contract(e) => {
                                    *ptr2.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec33 = (e.into_bytes()).into_boxed_slice();
                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                    let len33 = vec33.len();
                                    ::core::mem::forget(vec33);
                                    *ptr2.add(12).cast::<usize>() = len33;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr33.cast_mut();
                                }
                                V42::Configuration(e) => {
                                    *ptr2.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec34 = (e.into_bytes()).into_boxed_slice();
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    ::core::mem::forget(vec34);
                                    *ptr2.add(12).cast::<usize>() = len34;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr34.cast_mut();
                                }
                                V42::ContextLoading(e) => {
                                    *ptr2.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec35 = (e.into_bytes()).into_boxed_slice();
                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                    let len35 = vec35.len();
                                    ::core::mem::forget(vec35);
                                    *ptr2.add(12).cast::<usize>() = len35;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr35.cast_mut();
                                }
                                V42::ContextValidation(e) => {
                                    *ptr2.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec36 = (e.into_bytes()).into_boxed_slice();
                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                    let len36 = vec36.len();
                                    ::core::mem::forget(vec36);
                                    *ptr2.add(12).cast::<usize>() = len36;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr36.cast_mut();
                                }
                                V42::Llm(e) => {
                                    *ptr2.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec37 = (e.into_bytes()).into_boxed_slice();
                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                    let len37 = vec37.len();
                                    ::core::mem::forget(vec37);
                                    *ptr2.add(12).cast::<usize>() = len37;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr37.cast_mut();
                                }
                                V42::Io(e) => {
                                    *ptr2.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec38 = (e.into_bytes()).into_boxed_slice();
                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                    let len38 = vec38.len();
                                    ::core::mem::forget(vec38);
                                    *ptr2.add(12).cast::<usize>() = len38;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr38.cast_mut();
                                }
                                V42::Transaction(e) => {
                                    *ptr2.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec39 = (e.into_bytes()).into_boxed_slice();
                                    let ptr39 = vec39.as_ptr().cast::<u8>();
                                    let len39 = vec39.len();
                                    ::core::mem::forget(vec39);
                                    *ptr2.add(12).cast::<usize>() = len39;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr39.cast_mut();
                                }
                                V42::Utf8(e) => {
                                    *ptr2.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec40 = (e.into_bytes()).into_boxed_slice();
                                    let ptr40 = vec40.as_ptr().cast::<u8>();
                                    let len40 = vec40.len();
                                    ::core::mem::forget(vec40);
                                    *ptr2.add(12).cast::<usize>() = len40;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr40.cast_mut();
                                }
                                V42::Other(e) => {
                                    *ptr2.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec41 = (e.into_bytes()).into_boxed_slice();
                                    let ptr41 = vec41.as_ptr().cast::<u8>();
                                    let len41 = vec41.len();
                                    ::core::mem::forget(vec41);
                                    *ptr2.add(12).cast::<usize>() = len41;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr41.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_config_manager_from_json<
                    T: GuestConfigManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base12 = l1;
                            let len12 = l2;
                            for i in 0..len12 {
                                let base = base12.add(i * 36);
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = *base.add(8).cast::<*mut u8>();
                                    let l6 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                    let l7 = *base.add(16).cast::<*mut u8>();
                                    let l8 = *base.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                    let l9 = i32::from(*base.add(24).cast::<u8>());
                                    match l9 {
                                        0 => {}
                                        _ => {
                                            let l10 = *base.add(28).cast::<*mut u8>();
                                            let l11 = *base.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l10, l11, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base12, len12 * 36, 4);
                            let l13 = *arg0.add(40).cast::<*mut u8>();
                            let l14 = *arg0.add(44).cast::<usize>();
                            _rt::cabi_dealloc(l13, l14, 1);
                            let l15 = *arg0.add(48).cast::<*mut u8>();
                            let l16 = *arg0.add(52).cast::<usize>();
                            let base40 = l15;
                            let len40 = l16;
                            for i in 0..len40 {
                                let base = base40.add(i * 56);
                                {
                                    let l17 = *base.add(0).cast::<*mut u8>();
                                    let l18 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l17, l18, 1);
                                    let l19 = i32::from(*base.add(8).cast::<u8>());
                                    match l19 {
                                        0 => {}
                                        _ => {
                                            let l20 = *base.add(12).cast::<*mut u8>();
                                            let l21 = *base.add(16).cast::<usize>();
                                            _rt::cabi_dealloc(l20, l21, 1);
                                        }
                                    }
                                    let l22 = i32::from(*base.add(20).cast::<u8>());
                                    match l22 {
                                        0 => {}
                                        _ => {
                                            let l23 = *base.add(24).cast::<*mut u8>();
                                            let l24 = *base.add(28).cast::<usize>();
                                            let base33 = l23;
                                            let len33 = l24;
                                            for i in 0..len33 {
                                                let base = base33.add(i * 32);
                                                {
                                                    let l25 = *base.add(0).cast::<*mut u8>();
                                                    let l26 = *base.add(4).cast::<usize>();
                                                    _rt::cabi_dealloc(l25, l26, 1);
                                                    let l27 = *base.add(8).cast::<*mut u8>();
                                                    let l28 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l27, l28, 1);
                                                    let l29 = *base.add(16).cast::<*mut u8>();
                                                    let l30 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l29, l30, 1);
                                                    let l31 = *base.add(24).cast::<*mut u8>();
                                                    let l32 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(base33, len33 * 32, 4);
                                        }
                                    }
                                    let l34 = i32::from(*base.add(32).cast::<u8>());
                                    match l34 {
                                        0 => {}
                                        _ => {
                                            let l35 = *base.add(36).cast::<*mut u8>();
                                            let l36 = *base.add(40).cast::<usize>();
                                            _rt::cabi_dealloc(l35, l36, 1);
                                        }
                                    }
                                    let l37 = i32::from(*base.add(44).cast::<u8>());
                                    match l37 {
                                        0 => {}
                                        _ => {
                                            let l38 = *base.add(48).cast::<*mut u8>();
                                            let l39 = *base.add(52).cast::<usize>();
                                            _rt::cabi_dealloc(l38, l39, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base40, len40 * 56, 4);
                            let l41 = *arg0.add(56).cast::<*mut u8>();
                            let l42 = *arg0.add(60).cast::<usize>();
                            let base47 = l41;
                            let len47 = l42;
                            for i in 0..len47 {
                                let base = base47.add(i * 16);
                                {
                                    let l43 = *base.add(0).cast::<*mut u8>();
                                    let l44 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                    let l45 = *base.add(8).cast::<*mut u8>();
                                    let l46 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                }
                            }
                            _rt::cabi_dealloc(base47, len47 * 16, 4);
                        }
                        _ => {
                            let l48 = i32::from(*arg0.add(4).cast::<u8>());
                            match l48 {
                                0 => {
                                    let l49 = *arg0.add(8).cast::<*mut u8>();
                                    let l50 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l49, l50, 1);
                                }
                                1 => {
                                    let l51 = *arg0.add(8).cast::<*mut u8>();
                                    let l52 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l51, l52, 1);
                                }
                                2 => {
                                    let l53 = *arg0.add(8).cast::<*mut u8>();
                                    let l54 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l53, l54, 1);
                                }
                                3 => {
                                    let l55 = *arg0.add(8).cast::<*mut u8>();
                                    let l56 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l55, l56, 1);
                                }
                                4 => {
                                    let l57 = *arg0.add(8).cast::<*mut u8>();
                                    let l58 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l57, l58, 1);
                                }
                                5 => {
                                    let l59 = *arg0.add(8).cast::<*mut u8>();
                                    let l60 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l59, l60, 1);
                                }
                                6 => {
                                    let l61 = *arg0.add(8).cast::<*mut u8>();
                                    let l62 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l61, l62, 1);
                                }
                                7 => {
                                    let l63 = *arg0.add(8).cast::<*mut u8>();
                                    let l64 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l63, l64, 1);
                                }
                                8 => {
                                    let l65 = *arg0.add(8).cast::<*mut u8>();
                                    let l66 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l65, l66, 1);
                                }
                                9 => {
                                    let l67 = *arg0.add(8).cast::<*mut u8>();
                                    let l68 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l67, l68, 1);
                                }
                                10 => {
                                    let l69 = *arg0.add(8).cast::<*mut u8>();
                                    let l70 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l69, l70, 1);
                                }
                                11 => {
                                    let l71 = *arg0.add(8).cast::<*mut u8>();
                                    let l72 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l71, l72, 1);
                                }
                                _ => {
                                    let l73 = *arg0.add(8).cast::<*mut u8>();
                                    let l74 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l73, l74, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_config_manager_to_json_cabi<
                    T: GuestConfigManager,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::to_json(
                        ConfigManagerBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1.add(8).cast::<usize>() = len2;
                            *ptr1.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1.add(8).cast::<usize>() = len3;
                            *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_config_manager_to_json<
                    T: GuestConfigManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_config_manager_format_contract_descriptions_cabi<
                    T: GuestConfigManager,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::format_contract_descriptions(
                        ConfigManagerBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_config_manager_format_contract_descriptions<
                    T: GuestConfigManager,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_config_manager_get_contract_by_name_cabi<
                    T: GuestConfigManager,
                >(arg0: *mut u8, arg1: *mut u8, arg2: usize) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::get_contract_by_name(
                        ConfigManagerBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Some(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::exports::wavs::agent::contracts::Contract {
                                name: name3,
                                address: address3,
                                abi: abi3,
                                description: description3,
                            } = e;
                            let vec4 = (name3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2.add(8).cast::<usize>() = len4;
                            *ptr2.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = (address3.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr2.add(16).cast::<usize>() = len5;
                            *ptr2.add(12).cast::<*mut u8>() = ptr5.cast_mut();
                            let vec6 = (abi3.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr2.add(24).cast::<usize>() = len6;
                            *ptr2.add(20).cast::<*mut u8>() = ptr6.cast_mut();
                            match description3 {
                                Some(e) => {
                                    *ptr2.add(28).cast::<u8>() = (1i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2.add(36).cast::<usize>() = len7;
                                    *ptr2.add(32).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                None => {
                                    *ptr2.add(28).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_config_manager_get_contract_by_name<
                    T: GuestConfigManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0.add(12).cast::<*mut u8>();
                            let l4 = *arg0.add(16).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l5 = *arg0.add(20).cast::<*mut u8>();
                            let l6 = *arg0.add(24).cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                            let l7 = i32::from(*arg0.add(28).cast::<u8>());
                            match l7 {
                                0 => {}
                                _ => {
                                    let l8 = *arg0.add(32).cast::<*mut u8>();
                                    let l9 = *arg0.add(36).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_config_manager_validate_cabi<
                    T: GuestConfigManager,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::validate(
                        ConfigManagerBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V15;
                            match e {
                                V15::Api(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *ptr1.add(12).cast::<usize>() = len2;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                V15::Http(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(12).cast::<usize>() = len3;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                V15::ExternalService(e) => {
                                    *ptr1.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr1.add(12).cast::<usize>() = len4;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V15::Config(e) => {
                                    *ptr1.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1.add(12).cast::<usize>() = len5;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                V15::Contract(e) => {
                                    *ptr1.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr1.add(12).cast::<usize>() = len6;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V15::Configuration(e) => {
                                    *ptr1.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr1.add(12).cast::<usize>() = len7;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V15::ContextLoading(e) => {
                                    *ptr1.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr1.add(12).cast::<usize>() = len8;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V15::ContextValidation(e) => {
                                    *ptr1.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr1.add(12).cast::<usize>() = len9;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V15::Llm(e) => {
                                    *ptr1.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr1.add(12).cast::<usize>() = len10;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V15::Io(e) => {
                                    *ptr1.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr1.add(12).cast::<usize>() = len11;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V15::Transaction(e) => {
                                    *ptr1.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr1.add(12).cast::<usize>() = len12;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V15::Utf8(e) => {
                                    *ptr1.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr1.add(12).cast::<usize>() = len13;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V15::Other(e) => {
                                    *ptr1.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr1.add(12).cast::<usize>() = len14;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_config_manager_validate<
                    T: GuestConfigManager,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0.add(8).cast::<*mut u8>();
                                    let l15 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                9 => {
                                    let l20 = *arg0.add(8).cast::<*mut u8>();
                                    let l21 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                                10 => {
                                    let l22 = *arg0.add(8).cast::<*mut u8>();
                                    let l23 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                11 => {
                                    let l24 = *arg0.add(8).cast::<*mut u8>();
                                    let l25 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                }
                                _ => {
                                    let l26 = *arg0.add(8).cast::<*mut u8>();
                                    let l27 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type LlmOptionsFuncs: GuestLlmOptionsFuncs;
                    type ConfigManager: GuestConfigManager;
                }
                pub trait GuestLlmOptionsFuncs: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/config")]
                            extern "C" {
                                #[link_name = "[resource-new]llm-options-funcs"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/config")]
                            extern "C" {
                                #[link_name = "[resource-rep]llm-options-funcs"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Create a new config with default values
                    fn new(&self) -> LlmOptions;
                    /// Set temperature
                    fn temperature(&self, temp: f32) -> LlmOptions;
                    /// Set top_p
                    fn top_p(&self, top_p: f32) -> LlmOptions;
                    /// Set seed
                    fn seed(&self, seed: u32) -> LlmOptions;
                    /// Set max tokens
                    fn max_tokens(&self, max_tokens: Option<u32>) -> LlmOptions;
                    /// Set context window size
                    fn context_window(&self, context_window: Option<u32>) -> LlmOptions;
                }
                pub trait GuestConfigManager: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/config")]
                            extern "C" {
                                #[link_name = "[resource-new]config-manager"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/config")]
                            extern "C" {
                                #[link_name = "[resource-rep]config-manager"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Load Config from environment variable CONFIG_URI or use default
                    fn load(&self) -> Result<Config, _rt::String>;
                    /// Load Config from a URI
                    fn load_from_uri(
                        &self,
                        uri: _rt::String,
                    ) -> Result<Config, _rt::String>;
                    /// Load Config from JSON
                    fn from_json(&self, json: _rt::String) -> Result<Config, AgentError>;
                    /// Serialize the Config to a JSON string
                    fn to_json(&self) -> Result<_rt::String, _rt::String>;
                    /// Format contract descriptions for the system prompt
                    fn format_contract_descriptions(&self) -> _rt::String;
                    /// Get a smart contract by name
                    fn get_contract_by_name(
                        &self,
                        name: _rt::String,
                    ) -> Option<Contract>;
                    /// Validate the Config for required fields and logical consistency
                    fn validate(&self) -> Result<(), AgentError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wavs_agent_config_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "wavs:agent/config#[method]llm-options-funcs.new"] unsafe extern
                        "C" fn export_method_llm_options_funcs_new(arg0 : * mut u8,) -> *
                        mut u8 { $($path_to_types)*::
                        _export_method_llm_options_funcs_new_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmOptionsFuncs > (arg0) }
                        #[export_name =
                        "wavs:agent/config#[method]llm-options-funcs.temperature"] unsafe
                        extern "C" fn export_method_llm_options_funcs_temperature(arg0 :
                        * mut u8, arg1 : f32,) -> * mut u8 { $($path_to_types)*::
                        _export_method_llm_options_funcs_temperature_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmOptionsFuncs > (arg0, arg1) }
                        #[export_name =
                        "wavs:agent/config#[method]llm-options-funcs.top-p"] unsafe
                        extern "C" fn export_method_llm_options_funcs_top_p(arg0 : * mut
                        u8, arg1 : f32,) -> * mut u8 { $($path_to_types)*::
                        _export_method_llm_options_funcs_top_p_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmOptionsFuncs > (arg0, arg1) }
                        #[export_name =
                        "wavs:agent/config#[method]llm-options-funcs.seed"] unsafe extern
                        "C" fn export_method_llm_options_funcs_seed(arg0 : * mut u8, arg1
                        : i32,) -> * mut u8 { $($path_to_types)*::
                        _export_method_llm_options_funcs_seed_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmOptionsFuncs > (arg0, arg1) }
                        #[export_name =
                        "wavs:agent/config#[method]llm-options-funcs.max-tokens"] unsafe
                        extern "C" fn export_method_llm_options_funcs_max_tokens(arg0 : *
                        mut u8, arg1 : i32, arg2 : i32,) -> * mut u8 {
                        $($path_to_types)*::
                        _export_method_llm_options_funcs_max_tokens_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmOptionsFuncs > (arg0, arg1,
                        arg2) } #[export_name =
                        "wavs:agent/config#[method]llm-options-funcs.context-window"]
                        unsafe extern "C" fn
                        export_method_llm_options_funcs_context_window(arg0 : * mut u8,
                        arg1 : i32, arg2 : i32,) -> * mut u8 { $($path_to_types)*::
                        _export_method_llm_options_funcs_context_window_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmOptionsFuncs > (arg0, arg1,
                        arg2) } #[export_name =
                        "wavs:agent/config#[method]config-manager.load"] unsafe extern
                        "C" fn export_method_config_manager_load(arg0 : * mut u8,) -> *
                        mut u8 { $($path_to_types)*::
                        _export_method_config_manager_load_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (arg0) }
                        #[export_name =
                        "cabi_post_wavs:agent/config#[method]config-manager.load"] unsafe
                        extern "C" fn _post_return_method_config_manager_load(arg0 : *
                        mut u8,) { $($path_to_types)*::
                        __post_return_method_config_manager_load::<<$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (arg0) }
                        #[export_name =
                        "wavs:agent/config#[method]config-manager.load-from-uri"] unsafe
                        extern "C" fn export_method_config_manager_load_from_uri(arg0 : *
                        mut u8, arg1 : * mut u8, arg2 : usize,) -> * mut u8 {
                        $($path_to_types)*::
                        _export_method_config_manager_load_from_uri_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (arg0, arg1, arg2)
                        } #[export_name =
                        "cabi_post_wavs:agent/config#[method]config-manager.load-from-uri"]
                        unsafe extern "C" fn
                        _post_return_method_config_manager_load_from_uri(arg0 : * mut
                        u8,) { $($path_to_types)*::
                        __post_return_method_config_manager_load_from_uri::<<$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (arg0) }
                        #[export_name =
                        "wavs:agent/config#[method]config-manager.from-json"] unsafe
                        extern "C" fn export_method_config_manager_from_json(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize,) -> * mut u8 {
                        $($path_to_types)*::
                        _export_method_config_manager_from_json_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (arg0, arg1, arg2)
                        } #[export_name =
                        "cabi_post_wavs:agent/config#[method]config-manager.from-json"]
                        unsafe extern "C" fn
                        _post_return_method_config_manager_from_json(arg0 : * mut u8,) {
                        $($path_to_types)*::
                        __post_return_method_config_manager_from_json::<<$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (arg0) }
                        #[export_name =
                        "wavs:agent/config#[method]config-manager.to-json"] unsafe extern
                        "C" fn export_method_config_manager_to_json(arg0 : * mut u8,) ->
                        * mut u8 { $($path_to_types)*::
                        _export_method_config_manager_to_json_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (arg0) }
                        #[export_name =
                        "cabi_post_wavs:agent/config#[method]config-manager.to-json"]
                        unsafe extern "C" fn
                        _post_return_method_config_manager_to_json(arg0 : * mut u8,) {
                        $($path_to_types)*::
                        __post_return_method_config_manager_to_json::<<$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (arg0) }
                        #[export_name =
                        "wavs:agent/config#[method]config-manager.format-contract-descriptions"]
                        unsafe extern "C" fn
                        export_method_config_manager_format_contract_descriptions(arg0 :
                        * mut u8,) -> * mut u8 { $($path_to_types)*::
                        _export_method_config_manager_format_contract_descriptions_cabi::<<$ty
                        as $($path_to_types)*:: Guest >::ConfigManager > (arg0) }
                        #[export_name =
                        "cabi_post_wavs:agent/config#[method]config-manager.format-contract-descriptions"]
                        unsafe extern "C" fn
                        _post_return_method_config_manager_format_contract_descriptions(arg0
                        : * mut u8,) { $($path_to_types)*::
                        __post_return_method_config_manager_format_contract_descriptions::<<$ty
                        as $($path_to_types)*:: Guest >::ConfigManager > (arg0) }
                        #[export_name =
                        "wavs:agent/config#[method]config-manager.get-contract-by-name"]
                        unsafe extern "C" fn
                        export_method_config_manager_get_contract_by_name(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize,) -> * mut u8 {
                        $($path_to_types)*::
                        _export_method_config_manager_get_contract_by_name_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (arg0, arg1, arg2)
                        } #[export_name =
                        "cabi_post_wavs:agent/config#[method]config-manager.get-contract-by-name"]
                        unsafe extern "C" fn
                        _post_return_method_config_manager_get_contract_by_name(arg0 : *
                        mut u8,) { $($path_to_types)*::
                        __post_return_method_config_manager_get_contract_by_name::<<$ty
                        as $($path_to_types)*:: Guest >::ConfigManager > (arg0) }
                        #[export_name =
                        "wavs:agent/config#[method]config-manager.validate"] unsafe
                        extern "C" fn export_method_config_manager_validate(arg0 : * mut
                        u8,) -> * mut u8 { $($path_to_types)*::
                        _export_method_config_manager_validate_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (arg0) }
                        #[export_name =
                        "cabi_post_wavs:agent/config#[method]config-manager.validate"]
                        unsafe extern "C" fn
                        _post_return_method_config_manager_validate(arg0 : * mut u8,) {
                        $($path_to_types)*::
                        __post_return_method_config_manager_validate::<<$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (arg0) } const _ :
                        () = { #[doc(hidden)] #[export_name =
                        "wavs:agent/config#[dtor]llm-options-funcs"]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { $($path_to_types)*:: LlmOptionsFuncs::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::LlmOptionsFuncs > (rep) } }; const
                        _ : () = { #[doc(hidden)] #[export_name =
                        "wavs:agent/config#[dtor]config-manager"]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { $($path_to_types)*:: ConfigManager::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::ConfigManager > (rep) } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wavs_agent_config_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 64]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 64],
                );
            }
            #[allow(dead_code, clippy::all)]
            pub mod client {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type AgentError = super::super::super::super::exports::wavs::agent::errors::AgentError;
                pub type Message = super::super::super::super::exports::wavs::agent::common::Message;
                pub type Tool = super::super::super::super::exports::wavs::agent::common::Tool;
                pub type CustomToolHandler = super::super::super::super::exports::wavs::agent::common::CustomToolHandler;
                pub type CustomToolHandlerBorrow<'a> = super::super::super::super::exports::wavs::agent::common::CustomToolHandlerBorrow<
                    'a,
                >;
                pub type Transaction = super::super::super::super::exports::wavs::agent::contracts::Transaction;
                pub type Config = super::super::super::super::exports::wavs::agent::config::Config;
                pub type LlmOptions = super::super::super::super::exports::wavs::agent::config::LlmOptions;
                /// Response from an LLM interaction
                #[derive(Clone)]
                pub enum LlmResponse {
                    /// Transaction to be executed
                    Transaction(Transaction),
                    /// Text response (when no action is needed)
                    Text(_rt::String),
                }
                impl ::core::fmt::Debug for LlmResponse {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            LlmResponse::Transaction(e) => {
                                f.debug_tuple("LlmResponse::Transaction").field(e).finish()
                            }
                            LlmResponse::Text(e) => {
                                f.debug_tuple("LlmResponse::Text").field(e).finish()
                            }
                        }
                    }
                }
                /// Client for making LLM API requests
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct LlmClient {
                    handle: _rt::Resource<LlmClient>,
                }
                type _LlmClientRep<T> = Option<T>;
                impl LlmClient {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `LlmClient`.
                    pub fn new<T: GuestLlmClient>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _LlmClientRep<T> = Some(val);
                        let ptr: *mut _LlmClientRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestLlmClient>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestLlmClient>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestLlmClient>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _LlmClientRep<T>);
                    }
                    fn as_ptr<T: GuestLlmClient>(&self) -> *mut _LlmClientRep<T> {
                        LlmClient::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`LlmClient`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct LlmClientBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a LlmClient>,
                }
                impl<'a> LlmClientBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestLlmClient>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _LlmClientRep<T> {
                        LlmClient::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for LlmClient {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/client")]
                            extern "C" {
                                #[link_name = "[resource-drop]llm-client"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_client_new_cabi<T: GuestLlmClient>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::new(
                        LlmClientBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V16;
                            match e {
                                V16::Api(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2.add(12).cast::<usize>() = len3;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                V16::Http(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V16::ExternalService(e) => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2.add(12).cast::<usize>() = len5;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                V16::Config(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr2.add(12).cast::<usize>() = len6;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V16::Contract(e) => {
                                    *ptr2.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2.add(12).cast::<usize>() = len7;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V16::Configuration(e) => {
                                    *ptr2.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr2.add(12).cast::<usize>() = len8;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V16::ContextLoading(e) => {
                                    *ptr2.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr2.add(12).cast::<usize>() = len9;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V16::ContextValidation(e) => {
                                    *ptr2.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr2.add(12).cast::<usize>() = len10;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V16::Llm(e) => {
                                    *ptr2.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr2.add(12).cast::<usize>() = len11;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V16::Io(e) => {
                                    *ptr2.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr2.add(12).cast::<usize>() = len12;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V16::Transaction(e) => {
                                    *ptr2.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr2.add(12).cast::<usize>() = len13;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V16::Utf8(e) => {
                                    *ptr2.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr2.add(12).cast::<usize>() = len14;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V16::Other(e) => {
                                    *ptr2.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr2.add(12).cast::<usize>() = len15;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_llm_client_new<T: GuestLlmClient>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0.add(8).cast::<*mut u8>();
                                    let l15 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                9 => {
                                    let l20 = *arg0.add(8).cast::<*mut u8>();
                                    let l21 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                                10 => {
                                    let l22 = *arg0.add(8).cast::<*mut u8>();
                                    let l23 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                11 => {
                                    let l24 = *arg0.add(8).cast::<*mut u8>();
                                    let l25 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                }
                                _ => {
                                    let l26 = *arg0.add(8).cast::<*mut u8>();
                                    let l27 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_client_from_json_cabi<
                    T: GuestLlmClient,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result2 = T::from_json(
                        LlmClientBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr3.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V17;
                            match e {
                                V17::Api(e) => {
                                    *ptr3.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr3.add(12).cast::<usize>() = len4;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V17::Http(e) => {
                                    *ptr3.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3.add(12).cast::<usize>() = len5;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                V17::ExternalService(e) => {
                                    *ptr3.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr3.add(12).cast::<usize>() = len6;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V17::Config(e) => {
                                    *ptr3.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr3.add(12).cast::<usize>() = len7;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V17::Contract(e) => {
                                    *ptr3.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr3.add(12).cast::<usize>() = len8;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V17::Configuration(e) => {
                                    *ptr3.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr3.add(12).cast::<usize>() = len9;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V17::ContextLoading(e) => {
                                    *ptr3.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr3.add(12).cast::<usize>() = len10;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V17::ContextValidation(e) => {
                                    *ptr3.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr3.add(12).cast::<usize>() = len11;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V17::Llm(e) => {
                                    *ptr3.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr3.add(12).cast::<usize>() = len12;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V17::Io(e) => {
                                    *ptr3.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr3.add(12).cast::<usize>() = len13;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V17::Transaction(e) => {
                                    *ptr3.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr3.add(12).cast::<usize>() = len14;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V17::Utf8(e) => {
                                    *ptr3.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr3.add(12).cast::<usize>() = len15;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                V17::Other(e) => {
                                    *ptr3.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr3.add(12).cast::<usize>() = len16;
                                    *ptr3.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                            }
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_llm_client_from_json<
                    T: GuestLlmClient,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0.add(8).cast::<*mut u8>();
                                    let l15 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                9 => {
                                    let l20 = *arg0.add(8).cast::<*mut u8>();
                                    let l21 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                                10 => {
                                    let l22 = *arg0.add(8).cast::<*mut u8>();
                                    let l23 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                11 => {
                                    let l24 = *arg0.add(8).cast::<*mut u8>();
                                    let l25 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                }
                                _ => {
                                    let l26 = *arg0.add(8).cast::<*mut u8>();
                                    let l27 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_client_with_config_cabi<
                    T: GuestLlmClient,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: f32,
                    arg4: f32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::with_config(
                        LlmClientBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        super::super::super::super::exports::wavs::agent::config::LlmOptions {
                            temperature: arg3,
                            top_p: arg4,
                            seed: arg5 as u32,
                            max_tokens: match arg6 {
                                0 => None,
                                1 => {
                                    let e = arg7 as u32;
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            context_window: match arg8 {
                                0 => None,
                                1 => {
                                    let e = arg9 as u32;
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V16;
                            match e {
                                V16::Api(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2.add(12).cast::<usize>() = len3;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                V16::Http(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V16::ExternalService(e) => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2.add(12).cast::<usize>() = len5;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                V16::Config(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr2.add(12).cast::<usize>() = len6;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V16::Contract(e) => {
                                    *ptr2.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2.add(12).cast::<usize>() = len7;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V16::Configuration(e) => {
                                    *ptr2.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr2.add(12).cast::<usize>() = len8;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V16::ContextLoading(e) => {
                                    *ptr2.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr2.add(12).cast::<usize>() = len9;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V16::ContextValidation(e) => {
                                    *ptr2.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr2.add(12).cast::<usize>() = len10;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V16::Llm(e) => {
                                    *ptr2.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr2.add(12).cast::<usize>() = len11;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V16::Io(e) => {
                                    *ptr2.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr2.add(12).cast::<usize>() = len12;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V16::Transaction(e) => {
                                    *ptr2.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr2.add(12).cast::<usize>() = len13;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V16::Utf8(e) => {
                                    *ptr2.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr2.add(12).cast::<usize>() = len14;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V16::Other(e) => {
                                    *ptr2.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr2.add(12).cast::<usize>() = len15;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_llm_client_with_config<
                    T: GuestLlmClient,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0.add(8).cast::<*mut u8>();
                                    let l15 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                9 => {
                                    let l20 = *arg0.add(8).cast::<*mut u8>();
                                    let l21 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                                10 => {
                                    let l22 = *arg0.add(8).cast::<*mut u8>();
                                    let l23 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                11 => {
                                    let l24 = *arg0.add(8).cast::<*mut u8>();
                                    let l25 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                }
                                _ => {
                                    let l26 = *arg0.add(8).cast::<*mut u8>();
                                    let l27 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_client_get_model_cabi<
                    T: GuestLlmClient,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_model(
                        LlmClientBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_llm_client_get_model<
                    T: GuestLlmClient,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_client_get_config_cabi<
                    T: GuestLlmClient,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_config(
                        LlmClientBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::exports::wavs::agent::config::LlmOptions {
                        temperature: temperature2,
                        top_p: top_p2,
                        seed: seed2,
                        max_tokens: max_tokens2,
                        context_window: context_window2,
                    } = result0;
                    *ptr1.add(0).cast::<f32>() = _rt::as_f32(temperature2);
                    *ptr1.add(4).cast::<f32>() = _rt::as_f32(top_p2);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(seed2);
                    match max_tokens2 {
                        Some(e) => {
                            *ptr1.add(12).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(16).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(12).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match context_window2 {
                        Some(e) => {
                            *ptr1.add(20).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(24).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr1.add(20).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_client_chat_completion_cabi<
                    T: GuestLlmClient,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base31 = arg1;
                    let len31 = arg2;
                    let mut result31 = _rt::Vec::with_capacity(len31);
                    for i in 0..len31 {
                        let base = base31.add(i * 56);
                        let e31 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = i32::from(*base.add(8).cast::<u8>());
                            let l7 = i32::from(*base.add(20).cast::<u8>());
                            let l23 = i32::from(*base.add(32).cast::<u8>());
                            let l27 = i32::from(*base.add(44).cast::<u8>());
                            super::super::super::super::exports::wavs::agent::common::Message {
                                role: _rt::string_lift(bytes2),
                                content: match l3 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l4 = *base.add(12).cast::<*mut u8>();
                                            let l5 = *base.add(16).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                l4.cast(),
                                                len6,
                                                len6,
                                            );
                                            _rt::string_lift(bytes6)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                tool_calls: match l7 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l8 = *base.add(24).cast::<*mut u8>();
                                            let l9 = *base.add(28).cast::<usize>();
                                            let base22 = l8;
                                            let len22 = l9;
                                            let mut result22 = _rt::Vec::with_capacity(len22);
                                            for i in 0..len22 {
                                                let base = base22.add(i * 32);
                                                let e22 = {
                                                    let l10 = *base.add(0).cast::<*mut u8>();
                                                    let l11 = *base.add(4).cast::<usize>();
                                                    let len12 = l11;
                                                    let bytes12 = _rt::Vec::from_raw_parts(
                                                        l10.cast(),
                                                        len12,
                                                        len12,
                                                    );
                                                    let l13 = *base.add(8).cast::<*mut u8>();
                                                    let l14 = *base.add(12).cast::<usize>();
                                                    let len15 = l14;
                                                    let bytes15 = _rt::Vec::from_raw_parts(
                                                        l13.cast(),
                                                        len15,
                                                        len15,
                                                    );
                                                    let l16 = *base.add(16).cast::<*mut u8>();
                                                    let l17 = *base.add(20).cast::<usize>();
                                                    let len18 = l17;
                                                    let bytes18 = _rt::Vec::from_raw_parts(
                                                        l16.cast(),
                                                        len18,
                                                        len18,
                                                    );
                                                    let l19 = *base.add(24).cast::<*mut u8>();
                                                    let l20 = *base.add(28).cast::<usize>();
                                                    let len21 = l20;
                                                    let bytes21 = _rt::Vec::from_raw_parts(
                                                        l19.cast(),
                                                        len21,
                                                        len21,
                                                    );
                                                    super::super::super::super::exports::wavs::agent::common::ToolCall {
                                                        id: _rt::string_lift(bytes12),
                                                        tool_type: _rt::string_lift(bytes15),
                                                        function: super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                                            name: _rt::string_lift(bytes18),
                                                            arguments: _rt::string_lift(bytes21),
                                                        },
                                                    }
                                                };
                                                result22.push(e22);
                                            }
                                            _rt::cabi_dealloc(base22, len22 * 32, 4);
                                            result22
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                tool_call_id: match l23 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l24 = *base.add(36).cast::<*mut u8>();
                                            let l25 = *base.add(40).cast::<usize>();
                                            let len26 = l25;
                                            let bytes26 = _rt::Vec::from_raw_parts(
                                                l24.cast(),
                                                len26,
                                                len26,
                                            );
                                            _rt::string_lift(bytes26)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                name: match l27 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l28 = *base.add(48).cast::<*mut u8>();
                                            let l29 = *base.add(52).cast::<usize>();
                                            let len30 = l29;
                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                l28.cast(),
                                                len30,
                                                len30,
                                            );
                                            _rt::string_lift(bytes30)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result31.push(e31);
                    }
                    _rt::cabi_dealloc(base31, len31 * 56, 4);
                    let result47 = T::chat_completion(
                        LlmClientBorrow::lift(arg0 as u32 as usize).get(),
                        result31,
                        match arg3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base46 = arg4;
                                    let len46 = arg5;
                                    let mut result46 = _rt::Vec::with_capacity(len46);
                                    for i in 0..len46 {
                                        let base = base46.add(i * 40);
                                        let e46 = {
                                            let l32 = *base.add(0).cast::<*mut u8>();
                                            let l33 = *base.add(4).cast::<usize>();
                                            let len34 = l33;
                                            let bytes34 = _rt::Vec::from_raw_parts(
                                                l32.cast(),
                                                len34,
                                                len34,
                                            );
                                            let l35 = *base.add(8).cast::<*mut u8>();
                                            let l36 = *base.add(12).cast::<usize>();
                                            let len37 = l36;
                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                l35.cast(),
                                                len37,
                                                len37,
                                            );
                                            let l38 = i32::from(*base.add(16).cast::<u8>());
                                            let l42 = i32::from(*base.add(28).cast::<u8>());
                                            super::super::super::super::exports::wavs::agent::common::Tool {
                                                tool_type: _rt::string_lift(bytes34),
                                                function: super::super::super::super::exports::wavs::agent::common::Function {
                                                    name: _rt::string_lift(bytes37),
                                                    description: match l38 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l39 = *base.add(20).cast::<*mut u8>();
                                                                let l40 = *base.add(24).cast::<usize>();
                                                                let len41 = l40;
                                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                                    l39.cast(),
                                                                    len41,
                                                                    len41,
                                                                );
                                                                _rt::string_lift(bytes41)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    parameters: match l42 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l43 = *base.add(32).cast::<*mut u8>();
                                                                let l44 = *base.add(36).cast::<usize>();
                                                                let len45 = l44;
                                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                                    l43.cast(),
                                                                    len45,
                                                                    len45,
                                                                );
                                                                _rt::string_lift(bytes45)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                },
                                            }
                                        };
                                        result46.push(e46);
                                    }
                                    _rt::cabi_dealloc(base46, len46 * 40, 4);
                                    result46
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr48 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result47 {
                        Ok(e) => {
                            *ptr48.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::exports::wavs::agent::common::Message {
                                role: role49,
                                content: content49,
                                tool_calls: tool_calls49,
                                tool_call_id: tool_call_id49,
                                name: name49,
                            } = e;
                            let vec50 = (role49.into_bytes()).into_boxed_slice();
                            let ptr50 = vec50.as_ptr().cast::<u8>();
                            let len50 = vec50.len();
                            ::core::mem::forget(vec50);
                            *ptr48.add(8).cast::<usize>() = len50;
                            *ptr48.add(4).cast::<*mut u8>() = ptr50.cast_mut();
                            match content49 {
                                Some(e) => {
                                    *ptr48.add(12).cast::<u8>() = (1i32) as u8;
                                    let vec51 = (e.into_bytes()).into_boxed_slice();
                                    let ptr51 = vec51.as_ptr().cast::<u8>();
                                    let len51 = vec51.len();
                                    ::core::mem::forget(vec51);
                                    *ptr48.add(20).cast::<usize>() = len51;
                                    *ptr48.add(16).cast::<*mut u8>() = ptr51.cast_mut();
                                }
                                None => {
                                    *ptr48.add(12).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match tool_calls49 {
                                Some(e) => {
                                    *ptr48.add(24).cast::<u8>() = (1i32) as u8;
                                    let vec58 = e;
                                    let len58 = vec58.len();
                                    let layout58 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec58.len() * 32,
                                        4,
                                    );
                                    let result58 = if layout58.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout58).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout58);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec58.into_iter().enumerate() {
                                        let base = result58.add(i * 32);
                                        {
                                            let super::super::super::super::exports::wavs::agent::common::ToolCall {
                                                id: id52,
                                                tool_type: tool_type52,
                                                function: function52,
                                            } = e;
                                            let vec53 = (id52.into_bytes()).into_boxed_slice();
                                            let ptr53 = vec53.as_ptr().cast::<u8>();
                                            let len53 = vec53.len();
                                            ::core::mem::forget(vec53);
                                            *base.add(4).cast::<usize>() = len53;
                                            *base.add(0).cast::<*mut u8>() = ptr53.cast_mut();
                                            let vec54 = (tool_type52.into_bytes()).into_boxed_slice();
                                            let ptr54 = vec54.as_ptr().cast::<u8>();
                                            let len54 = vec54.len();
                                            ::core::mem::forget(vec54);
                                            *base.add(12).cast::<usize>() = len54;
                                            *base.add(8).cast::<*mut u8>() = ptr54.cast_mut();
                                            let super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                                name: name55,
                                                arguments: arguments55,
                                            } = function52;
                                            let vec56 = (name55.into_bytes()).into_boxed_slice();
                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                            let len56 = vec56.len();
                                            ::core::mem::forget(vec56);
                                            *base.add(20).cast::<usize>() = len56;
                                            *base.add(16).cast::<*mut u8>() = ptr56.cast_mut();
                                            let vec57 = (arguments55.into_bytes()).into_boxed_slice();
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();
                                            ::core::mem::forget(vec57);
                                            *base.add(28).cast::<usize>() = len57;
                                            *base.add(24).cast::<*mut u8>() = ptr57.cast_mut();
                                        }
                                    }
                                    *ptr48.add(32).cast::<usize>() = len58;
                                    *ptr48.add(28).cast::<*mut u8>() = result58;
                                }
                                None => {
                                    *ptr48.add(24).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match tool_call_id49 {
                                Some(e) => {
                                    *ptr48.add(36).cast::<u8>() = (1i32) as u8;
                                    let vec59 = (e.into_bytes()).into_boxed_slice();
                                    let ptr59 = vec59.as_ptr().cast::<u8>();
                                    let len59 = vec59.len();
                                    ::core::mem::forget(vec59);
                                    *ptr48.add(44).cast::<usize>() = len59;
                                    *ptr48.add(40).cast::<*mut u8>() = ptr59.cast_mut();
                                }
                                None => {
                                    *ptr48.add(36).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match name49 {
                                Some(e) => {
                                    *ptr48.add(48).cast::<u8>() = (1i32) as u8;
                                    let vec60 = (e.into_bytes()).into_boxed_slice();
                                    let ptr60 = vec60.as_ptr().cast::<u8>();
                                    let len60 = vec60.len();
                                    ::core::mem::forget(vec60);
                                    *ptr48.add(56).cast::<usize>() = len60;
                                    *ptr48.add(52).cast::<*mut u8>() = ptr60.cast_mut();
                                }
                                None => {
                                    *ptr48.add(48).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr48.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V74;
                            match e {
                                V74::Api(e) => {
                                    *ptr48.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec61 = (e.into_bytes()).into_boxed_slice();
                                    let ptr61 = vec61.as_ptr().cast::<u8>();
                                    let len61 = vec61.len();
                                    ::core::mem::forget(vec61);
                                    *ptr48.add(12).cast::<usize>() = len61;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr61.cast_mut();
                                }
                                V74::Http(e) => {
                                    *ptr48.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec62 = (e.into_bytes()).into_boxed_slice();
                                    let ptr62 = vec62.as_ptr().cast::<u8>();
                                    let len62 = vec62.len();
                                    ::core::mem::forget(vec62);
                                    *ptr48.add(12).cast::<usize>() = len62;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr62.cast_mut();
                                }
                                V74::ExternalService(e) => {
                                    *ptr48.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec63 = (e.into_bytes()).into_boxed_slice();
                                    let ptr63 = vec63.as_ptr().cast::<u8>();
                                    let len63 = vec63.len();
                                    ::core::mem::forget(vec63);
                                    *ptr48.add(12).cast::<usize>() = len63;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr63.cast_mut();
                                }
                                V74::Config(e) => {
                                    *ptr48.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec64 = (e.into_bytes()).into_boxed_slice();
                                    let ptr64 = vec64.as_ptr().cast::<u8>();
                                    let len64 = vec64.len();
                                    ::core::mem::forget(vec64);
                                    *ptr48.add(12).cast::<usize>() = len64;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr64.cast_mut();
                                }
                                V74::Contract(e) => {
                                    *ptr48.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec65 = (e.into_bytes()).into_boxed_slice();
                                    let ptr65 = vec65.as_ptr().cast::<u8>();
                                    let len65 = vec65.len();
                                    ::core::mem::forget(vec65);
                                    *ptr48.add(12).cast::<usize>() = len65;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr65.cast_mut();
                                }
                                V74::Configuration(e) => {
                                    *ptr48.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec66 = (e.into_bytes()).into_boxed_slice();
                                    let ptr66 = vec66.as_ptr().cast::<u8>();
                                    let len66 = vec66.len();
                                    ::core::mem::forget(vec66);
                                    *ptr48.add(12).cast::<usize>() = len66;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr66.cast_mut();
                                }
                                V74::ContextLoading(e) => {
                                    *ptr48.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec67 = (e.into_bytes()).into_boxed_slice();
                                    let ptr67 = vec67.as_ptr().cast::<u8>();
                                    let len67 = vec67.len();
                                    ::core::mem::forget(vec67);
                                    *ptr48.add(12).cast::<usize>() = len67;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr67.cast_mut();
                                }
                                V74::ContextValidation(e) => {
                                    *ptr48.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec68 = (e.into_bytes()).into_boxed_slice();
                                    let ptr68 = vec68.as_ptr().cast::<u8>();
                                    let len68 = vec68.len();
                                    ::core::mem::forget(vec68);
                                    *ptr48.add(12).cast::<usize>() = len68;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr68.cast_mut();
                                }
                                V74::Llm(e) => {
                                    *ptr48.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec69 = (e.into_bytes()).into_boxed_slice();
                                    let ptr69 = vec69.as_ptr().cast::<u8>();
                                    let len69 = vec69.len();
                                    ::core::mem::forget(vec69);
                                    *ptr48.add(12).cast::<usize>() = len69;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr69.cast_mut();
                                }
                                V74::Io(e) => {
                                    *ptr48.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec70 = (e.into_bytes()).into_boxed_slice();
                                    let ptr70 = vec70.as_ptr().cast::<u8>();
                                    let len70 = vec70.len();
                                    ::core::mem::forget(vec70);
                                    *ptr48.add(12).cast::<usize>() = len70;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr70.cast_mut();
                                }
                                V74::Transaction(e) => {
                                    *ptr48.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec71 = (e.into_bytes()).into_boxed_slice();
                                    let ptr71 = vec71.as_ptr().cast::<u8>();
                                    let len71 = vec71.len();
                                    ::core::mem::forget(vec71);
                                    *ptr48.add(12).cast::<usize>() = len71;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr71.cast_mut();
                                }
                                V74::Utf8(e) => {
                                    *ptr48.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec72 = (e.into_bytes()).into_boxed_slice();
                                    let ptr72 = vec72.as_ptr().cast::<u8>();
                                    let len72 = vec72.len();
                                    ::core::mem::forget(vec72);
                                    *ptr48.add(12).cast::<usize>() = len72;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr72.cast_mut();
                                }
                                V74::Other(e) => {
                                    *ptr48.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec73 = (e.into_bytes()).into_boxed_slice();
                                    let ptr73 = vec73.as_ptr().cast::<u8>();
                                    let len73 = vec73.len();
                                    ::core::mem::forget(vec73);
                                    *ptr48.add(12).cast::<usize>() = len73;
                                    *ptr48.add(8).cast::<*mut u8>() = ptr73.cast_mut();
                                }
                            }
                        }
                    };
                    ptr48
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_llm_client_chat_completion<
                    T: GuestLlmClient,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(*arg0.add(12).cast::<u8>());
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                            let l6 = i32::from(*arg0.add(24).cast::<u8>());
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *arg0.add(28).cast::<*mut u8>();
                                    let l8 = *arg0.add(32).cast::<usize>();
                                    let base17 = l7;
                                    let len17 = l8;
                                    for i in 0..len17 {
                                        let base = base17.add(i * 32);
                                        {
                                            let l9 = *base.add(0).cast::<*mut u8>();
                                            let l10 = *base.add(4).cast::<usize>();
                                            _rt::cabi_dealloc(l9, l10, 1);
                                            let l11 = *base.add(8).cast::<*mut u8>();
                                            let l12 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l11, l12, 1);
                                            let l13 = *base.add(16).cast::<*mut u8>();
                                            let l14 = *base.add(20).cast::<usize>();
                                            _rt::cabi_dealloc(l13, l14, 1);
                                            let l15 = *base.add(24).cast::<*mut u8>();
                                            let l16 = *base.add(28).cast::<usize>();
                                            _rt::cabi_dealloc(l15, l16, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(base17, len17 * 32, 4);
                                }
                            }
                            let l18 = i32::from(*arg0.add(36).cast::<u8>());
                            match l18 {
                                0 => {}
                                _ => {
                                    let l19 = *arg0.add(40).cast::<*mut u8>();
                                    let l20 = *arg0.add(44).cast::<usize>();
                                    _rt::cabi_dealloc(l19, l20, 1);
                                }
                            }
                            let l21 = i32::from(*arg0.add(48).cast::<u8>());
                            match l21 {
                                0 => {}
                                _ => {
                                    let l22 = *arg0.add(52).cast::<*mut u8>();
                                    let l23 = *arg0.add(56).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                            }
                        }
                        _ => {
                            let l24 = i32::from(*arg0.add(4).cast::<u8>());
                            match l24 {
                                0 => {
                                    let l25 = *arg0.add(8).cast::<*mut u8>();
                                    let l26 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l25, l26, 1);
                                }
                                1 => {
                                    let l27 = *arg0.add(8).cast::<*mut u8>();
                                    let l28 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l27, l28, 1);
                                }
                                2 => {
                                    let l29 = *arg0.add(8).cast::<*mut u8>();
                                    let l30 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l29, l30, 1);
                                }
                                3 => {
                                    let l31 = *arg0.add(8).cast::<*mut u8>();
                                    let l32 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l31, l32, 1);
                                }
                                4 => {
                                    let l33 = *arg0.add(8).cast::<*mut u8>();
                                    let l34 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l33, l34, 1);
                                }
                                5 => {
                                    let l35 = *arg0.add(8).cast::<*mut u8>();
                                    let l36 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l35, l36, 1);
                                }
                                6 => {
                                    let l37 = *arg0.add(8).cast::<*mut u8>();
                                    let l38 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l37, l38, 1);
                                }
                                7 => {
                                    let l39 = *arg0.add(8).cast::<*mut u8>();
                                    let l40 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l39, l40, 1);
                                }
                                8 => {
                                    let l41 = *arg0.add(8).cast::<*mut u8>();
                                    let l42 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l41, l42, 1);
                                }
                                9 => {
                                    let l43 = *arg0.add(8).cast::<*mut u8>();
                                    let l44 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                }
                                10 => {
                                    let l45 = *arg0.add(8).cast::<*mut u8>();
                                    let l46 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                }
                                11 => {
                                    let l47 = *arg0.add(8).cast::<*mut u8>();
                                    let l48 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l47, l48, 1);
                                }
                                _ => {
                                    let l49 = *arg0.add(8).cast::<*mut u8>();
                                    let l50 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l49, l50, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_client_chat_completion_text_cabi<
                    T: GuestLlmClient,
                >(arg0: *mut u8, arg1: *mut u8, arg2: usize) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base31 = arg1;
                    let len31 = arg2;
                    let mut result31 = _rt::Vec::with_capacity(len31);
                    for i in 0..len31 {
                        let base = base31.add(i * 56);
                        let e31 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = i32::from(*base.add(8).cast::<u8>());
                            let l7 = i32::from(*base.add(20).cast::<u8>());
                            let l23 = i32::from(*base.add(32).cast::<u8>());
                            let l27 = i32::from(*base.add(44).cast::<u8>());
                            super::super::super::super::exports::wavs::agent::common::Message {
                                role: _rt::string_lift(bytes2),
                                content: match l3 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l4 = *base.add(12).cast::<*mut u8>();
                                            let l5 = *base.add(16).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                l4.cast(),
                                                len6,
                                                len6,
                                            );
                                            _rt::string_lift(bytes6)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                tool_calls: match l7 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l8 = *base.add(24).cast::<*mut u8>();
                                            let l9 = *base.add(28).cast::<usize>();
                                            let base22 = l8;
                                            let len22 = l9;
                                            let mut result22 = _rt::Vec::with_capacity(len22);
                                            for i in 0..len22 {
                                                let base = base22.add(i * 32);
                                                let e22 = {
                                                    let l10 = *base.add(0).cast::<*mut u8>();
                                                    let l11 = *base.add(4).cast::<usize>();
                                                    let len12 = l11;
                                                    let bytes12 = _rt::Vec::from_raw_parts(
                                                        l10.cast(),
                                                        len12,
                                                        len12,
                                                    );
                                                    let l13 = *base.add(8).cast::<*mut u8>();
                                                    let l14 = *base.add(12).cast::<usize>();
                                                    let len15 = l14;
                                                    let bytes15 = _rt::Vec::from_raw_parts(
                                                        l13.cast(),
                                                        len15,
                                                        len15,
                                                    );
                                                    let l16 = *base.add(16).cast::<*mut u8>();
                                                    let l17 = *base.add(20).cast::<usize>();
                                                    let len18 = l17;
                                                    let bytes18 = _rt::Vec::from_raw_parts(
                                                        l16.cast(),
                                                        len18,
                                                        len18,
                                                    );
                                                    let l19 = *base.add(24).cast::<*mut u8>();
                                                    let l20 = *base.add(28).cast::<usize>();
                                                    let len21 = l20;
                                                    let bytes21 = _rt::Vec::from_raw_parts(
                                                        l19.cast(),
                                                        len21,
                                                        len21,
                                                    );
                                                    super::super::super::super::exports::wavs::agent::common::ToolCall {
                                                        id: _rt::string_lift(bytes12),
                                                        tool_type: _rt::string_lift(bytes15),
                                                        function: super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                                            name: _rt::string_lift(bytes18),
                                                            arguments: _rt::string_lift(bytes21),
                                                        },
                                                    }
                                                };
                                                result22.push(e22);
                                            }
                                            _rt::cabi_dealloc(base22, len22 * 32, 4);
                                            result22
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                tool_call_id: match l23 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l24 = *base.add(36).cast::<*mut u8>();
                                            let l25 = *base.add(40).cast::<usize>();
                                            let len26 = l25;
                                            let bytes26 = _rt::Vec::from_raw_parts(
                                                l24.cast(),
                                                len26,
                                                len26,
                                            );
                                            _rt::string_lift(bytes26)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                name: match l27 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l28 = *base.add(48).cast::<*mut u8>();
                                            let l29 = *base.add(52).cast::<usize>();
                                            let len30 = l29;
                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                l28.cast(),
                                                len30,
                                                len30,
                                            );
                                            _rt::string_lift(bytes30)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result31.push(e31);
                    }
                    _rt::cabi_dealloc(base31, len31 * 56, 4);
                    let result32 = T::chat_completion_text(
                        LlmClientBorrow::lift(arg0 as u32 as usize).get(),
                        result31,
                    );
                    let ptr33 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result32 {
                        Ok(e) => {
                            *ptr33.add(0).cast::<u8>() = (0i32) as u8;
                            let vec34 = (e.into_bytes()).into_boxed_slice();
                            let ptr34 = vec34.as_ptr().cast::<u8>();
                            let len34 = vec34.len();
                            ::core::mem::forget(vec34);
                            *ptr33.add(8).cast::<usize>() = len34;
                            *ptr33.add(4).cast::<*mut u8>() = ptr34.cast_mut();
                        }
                        Err(e) => {
                            *ptr33.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V48;
                            match e {
                                V48::Api(e) => {
                                    *ptr33.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec35 = (e.into_bytes()).into_boxed_slice();
                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                    let len35 = vec35.len();
                                    ::core::mem::forget(vec35);
                                    *ptr33.add(12).cast::<usize>() = len35;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr35.cast_mut();
                                }
                                V48::Http(e) => {
                                    *ptr33.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec36 = (e.into_bytes()).into_boxed_slice();
                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                    let len36 = vec36.len();
                                    ::core::mem::forget(vec36);
                                    *ptr33.add(12).cast::<usize>() = len36;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr36.cast_mut();
                                }
                                V48::ExternalService(e) => {
                                    *ptr33.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec37 = (e.into_bytes()).into_boxed_slice();
                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                    let len37 = vec37.len();
                                    ::core::mem::forget(vec37);
                                    *ptr33.add(12).cast::<usize>() = len37;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr37.cast_mut();
                                }
                                V48::Config(e) => {
                                    *ptr33.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec38 = (e.into_bytes()).into_boxed_slice();
                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                    let len38 = vec38.len();
                                    ::core::mem::forget(vec38);
                                    *ptr33.add(12).cast::<usize>() = len38;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr38.cast_mut();
                                }
                                V48::Contract(e) => {
                                    *ptr33.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec39 = (e.into_bytes()).into_boxed_slice();
                                    let ptr39 = vec39.as_ptr().cast::<u8>();
                                    let len39 = vec39.len();
                                    ::core::mem::forget(vec39);
                                    *ptr33.add(12).cast::<usize>() = len39;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr39.cast_mut();
                                }
                                V48::Configuration(e) => {
                                    *ptr33.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec40 = (e.into_bytes()).into_boxed_slice();
                                    let ptr40 = vec40.as_ptr().cast::<u8>();
                                    let len40 = vec40.len();
                                    ::core::mem::forget(vec40);
                                    *ptr33.add(12).cast::<usize>() = len40;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr40.cast_mut();
                                }
                                V48::ContextLoading(e) => {
                                    *ptr33.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec41 = (e.into_bytes()).into_boxed_slice();
                                    let ptr41 = vec41.as_ptr().cast::<u8>();
                                    let len41 = vec41.len();
                                    ::core::mem::forget(vec41);
                                    *ptr33.add(12).cast::<usize>() = len41;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr41.cast_mut();
                                }
                                V48::ContextValidation(e) => {
                                    *ptr33.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec42 = (e.into_bytes()).into_boxed_slice();
                                    let ptr42 = vec42.as_ptr().cast::<u8>();
                                    let len42 = vec42.len();
                                    ::core::mem::forget(vec42);
                                    *ptr33.add(12).cast::<usize>() = len42;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr42.cast_mut();
                                }
                                V48::Llm(e) => {
                                    *ptr33.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec43 = (e.into_bytes()).into_boxed_slice();
                                    let ptr43 = vec43.as_ptr().cast::<u8>();
                                    let len43 = vec43.len();
                                    ::core::mem::forget(vec43);
                                    *ptr33.add(12).cast::<usize>() = len43;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr43.cast_mut();
                                }
                                V48::Io(e) => {
                                    *ptr33.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec44 = (e.into_bytes()).into_boxed_slice();
                                    let ptr44 = vec44.as_ptr().cast::<u8>();
                                    let len44 = vec44.len();
                                    ::core::mem::forget(vec44);
                                    *ptr33.add(12).cast::<usize>() = len44;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr44.cast_mut();
                                }
                                V48::Transaction(e) => {
                                    *ptr33.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec45 = (e.into_bytes()).into_boxed_slice();
                                    let ptr45 = vec45.as_ptr().cast::<u8>();
                                    let len45 = vec45.len();
                                    ::core::mem::forget(vec45);
                                    *ptr33.add(12).cast::<usize>() = len45;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr45.cast_mut();
                                }
                                V48::Utf8(e) => {
                                    *ptr33.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec46 = (e.into_bytes()).into_boxed_slice();
                                    let ptr46 = vec46.as_ptr().cast::<u8>();
                                    let len46 = vec46.len();
                                    ::core::mem::forget(vec46);
                                    *ptr33.add(12).cast::<usize>() = len46;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr46.cast_mut();
                                }
                                V48::Other(e) => {
                                    *ptr33.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec47 = (e.into_bytes()).into_boxed_slice();
                                    let ptr47 = vec47.as_ptr().cast::<u8>();
                                    let len47 = vec47.len();
                                    ::core::mem::forget(vec47);
                                    *ptr33.add(12).cast::<usize>() = len47;
                                    *ptr33.add(8).cast::<*mut u8>() = ptr47.cast_mut();
                                }
                            }
                        }
                    };
                    ptr33
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_llm_client_chat_completion_text<
                    T: GuestLlmClient,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = i32::from(*arg0.add(4).cast::<u8>());
                            match l3 {
                                0 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                2 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                3 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                4 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                5 => {
                                    let l14 = *arg0.add(8).cast::<*mut u8>();
                                    let l15 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                6 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                7 => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                8 => {
                                    let l20 = *arg0.add(8).cast::<*mut u8>();
                                    let l21 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                                9 => {
                                    let l22 = *arg0.add(8).cast::<*mut u8>();
                                    let l23 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                10 => {
                                    let l24 = *arg0.add(8).cast::<*mut u8>();
                                    let l25 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                }
                                11 => {
                                    let l26 = *arg0.add(8).cast::<*mut u8>();
                                    let l27 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                                _ => {
                                    let l28 = *arg0.add(8).cast::<*mut u8>();
                                    let l29 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l28, l29, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_llm_client_process_prompt_cabi<
                    T: GuestLlmClient,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(4).cast::<*mut u8>();
                    let l2 = *arg0.add(8).cast::<usize>();
                    let len3 = l2;
                    let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                    let l4 = *arg0.add(12).cast::<*mut u8>();
                    let l5 = *arg0.add(16).cast::<usize>();
                    let base19 = l4;
                    let len19 = l5;
                    let mut result19 = _rt::Vec::with_capacity(len19);
                    for i in 0..len19 {
                        let base = base19.add(i * 36);
                        let e19 = {
                            let l6 = *base.add(0).cast::<*mut u8>();
                            let l7 = *base.add(4).cast::<usize>();
                            let len8 = l7;
                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                            let l9 = *base.add(8).cast::<*mut u8>();
                            let l10 = *base.add(12).cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(
                                l9.cast(),
                                len11,
                                len11,
                            );
                            let l12 = *base.add(16).cast::<*mut u8>();
                            let l13 = *base.add(20).cast::<usize>();
                            let len14 = l13;
                            let bytes14 = _rt::Vec::from_raw_parts(
                                l12.cast(),
                                len14,
                                len14,
                            );
                            let l15 = i32::from(*base.add(24).cast::<u8>());
                            super::super::super::super::exports::wavs::agent::contracts::Contract {
                                name: _rt::string_lift(bytes8),
                                address: _rt::string_lift(bytes11),
                                abi: _rt::string_lift(bytes14),
                                description: match l15 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l16 = *base.add(28).cast::<*mut u8>();
                                            let l17 = *base.add(32).cast::<usize>();
                                            let len18 = l17;
                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                l16.cast(),
                                                len18,
                                                len18,
                                            );
                                            _rt::string_lift(bytes18)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result19.push(e19);
                    }
                    _rt::cabi_dealloc(base19, len19 * 36, 4);
                    let l20 = *arg0.add(20).cast::<f32>();
                    let l21 = *arg0.add(24).cast::<f32>();
                    let l22 = *arg0.add(28).cast::<i32>();
                    let l23 = i32::from(*arg0.add(32).cast::<u8>());
                    let l25 = i32::from(*arg0.add(40).cast::<u8>());
                    let l27 = *arg0.add(48).cast::<*mut u8>();
                    let l28 = *arg0.add(52).cast::<usize>();
                    let len29 = l28;
                    let bytes29 = _rt::Vec::from_raw_parts(l27.cast(), len29, len29);
                    let l30 = *arg0.add(56).cast::<*mut u8>();
                    let l31 = *arg0.add(60).cast::<usize>();
                    let base63 = l30;
                    let len63 = l31;
                    let mut result63 = _rt::Vec::with_capacity(len63);
                    for i in 0..len63 {
                        let base = base63.add(i * 56);
                        let e63 = {
                            let l32 = *base.add(0).cast::<*mut u8>();
                            let l33 = *base.add(4).cast::<usize>();
                            let len34 = l33;
                            let bytes34 = _rt::Vec::from_raw_parts(
                                l32.cast(),
                                len34,
                                len34,
                            );
                            let l35 = i32::from(*base.add(8).cast::<u8>());
                            let l39 = i32::from(*base.add(20).cast::<u8>());
                            let l55 = i32::from(*base.add(32).cast::<u8>());
                            let l59 = i32::from(*base.add(44).cast::<u8>());
                            super::super::super::super::exports::wavs::agent::common::Message {
                                role: _rt::string_lift(bytes34),
                                content: match l35 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l36 = *base.add(12).cast::<*mut u8>();
                                            let l37 = *base.add(16).cast::<usize>();
                                            let len38 = l37;
                                            let bytes38 = _rt::Vec::from_raw_parts(
                                                l36.cast(),
                                                len38,
                                                len38,
                                            );
                                            _rt::string_lift(bytes38)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                tool_calls: match l39 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l40 = *base.add(24).cast::<*mut u8>();
                                            let l41 = *base.add(28).cast::<usize>();
                                            let base54 = l40;
                                            let len54 = l41;
                                            let mut result54 = _rt::Vec::with_capacity(len54);
                                            for i in 0..len54 {
                                                let base = base54.add(i * 32);
                                                let e54 = {
                                                    let l42 = *base.add(0).cast::<*mut u8>();
                                                    let l43 = *base.add(4).cast::<usize>();
                                                    let len44 = l43;
                                                    let bytes44 = _rt::Vec::from_raw_parts(
                                                        l42.cast(),
                                                        len44,
                                                        len44,
                                                    );
                                                    let l45 = *base.add(8).cast::<*mut u8>();
                                                    let l46 = *base.add(12).cast::<usize>();
                                                    let len47 = l46;
                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                        l45.cast(),
                                                        len47,
                                                        len47,
                                                    );
                                                    let l48 = *base.add(16).cast::<*mut u8>();
                                                    let l49 = *base.add(20).cast::<usize>();
                                                    let len50 = l49;
                                                    let bytes50 = _rt::Vec::from_raw_parts(
                                                        l48.cast(),
                                                        len50,
                                                        len50,
                                                    );
                                                    let l51 = *base.add(24).cast::<*mut u8>();
                                                    let l52 = *base.add(28).cast::<usize>();
                                                    let len53 = l52;
                                                    let bytes53 = _rt::Vec::from_raw_parts(
                                                        l51.cast(),
                                                        len53,
                                                        len53,
                                                    );
                                                    super::super::super::super::exports::wavs::agent::common::ToolCall {
                                                        id: _rt::string_lift(bytes44),
                                                        tool_type: _rt::string_lift(bytes47),
                                                        function: super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                                            name: _rt::string_lift(bytes50),
                                                            arguments: _rt::string_lift(bytes53),
                                                        },
                                                    }
                                                };
                                                result54.push(e54);
                                            }
                                            _rt::cabi_dealloc(base54, len54 * 32, 4);
                                            result54
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                tool_call_id: match l55 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l56 = *base.add(36).cast::<*mut u8>();
                                            let l57 = *base.add(40).cast::<usize>();
                                            let len58 = l57;
                                            let bytes58 = _rt::Vec::from_raw_parts(
                                                l56.cast(),
                                                len58,
                                                len58,
                                            );
                                            _rt::string_lift(bytes58)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                name: match l59 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l60 = *base.add(48).cast::<*mut u8>();
                                            let l61 = *base.add(52).cast::<usize>();
                                            let len62 = l61;
                                            let bytes62 = _rt::Vec::from_raw_parts(
                                                l60.cast(),
                                                len62,
                                                len62,
                                            );
                                            _rt::string_lift(bytes62)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result63.push(e63);
                    }
                    _rt::cabi_dealloc(base63, len63 * 56, 4);
                    let l64 = *arg0.add(64).cast::<*mut u8>();
                    let l65 = *arg0.add(68).cast::<usize>();
                    let base72 = l64;
                    let len72 = l65;
                    let mut result72 = _rt::Vec::with_capacity(len72);
                    for i in 0..len72 {
                        let base = base72.add(i * 16);
                        let e72 = {
                            let l66 = *base.add(0).cast::<*mut u8>();
                            let l67 = *base.add(4).cast::<usize>();
                            let len68 = l67;
                            let bytes68 = _rt::Vec::from_raw_parts(
                                l66.cast(),
                                len68,
                                len68,
                            );
                            let l69 = *base.add(8).cast::<*mut u8>();
                            let l70 = *base.add(12).cast::<usize>();
                            let len71 = l70;
                            let bytes71 = _rt::Vec::from_raw_parts(
                                l69.cast(),
                                len71,
                                len71,
                            );
                            (_rt::string_lift(bytes68), _rt::string_lift(bytes71))
                        };
                        result72.push(e72);
                    }
                    _rt::cabi_dealloc(base72, len72 * 16, 4);
                    let l73 = i32::from(*arg0.add(72).cast::<u8>());
                    let l91 = i32::from(*arg0.add(84).cast::<u8>());
                    let result96 = T::process_prompt(
                        LlmClientBorrow::lift(l0 as u32 as usize).get(),
                        _rt::string_lift(bytes3),
                        super::super::super::super::exports::wavs::agent::config::Config {
                            contracts: result19,
                            llm_config: super::super::super::super::exports::wavs::agent::config::LlmOptions {
                                temperature: l20,
                                top_p: l21,
                                seed: l22 as u32,
                                max_tokens: match l23 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l24 = *arg0.add(36).cast::<i32>();
                                            l24 as u32
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                context_window: match l25 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l26 = *arg0.add(44).cast::<i32>();
                                            l26 as u32
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            },
                            model: _rt::string_lift(bytes29),
                            messages: result63,
                            config: result72,
                        },
                        match l73 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l74 = *arg0.add(76).cast::<*mut u8>();
                                    let l75 = *arg0.add(80).cast::<usize>();
                                    let base90 = l74;
                                    let len90 = l75;
                                    let mut result90 = _rt::Vec::with_capacity(len90);
                                    for i in 0..len90 {
                                        let base = base90.add(i * 40);
                                        let e90 = {
                                            let l76 = *base.add(0).cast::<*mut u8>();
                                            let l77 = *base.add(4).cast::<usize>();
                                            let len78 = l77;
                                            let bytes78 = _rt::Vec::from_raw_parts(
                                                l76.cast(),
                                                len78,
                                                len78,
                                            );
                                            let l79 = *base.add(8).cast::<*mut u8>();
                                            let l80 = *base.add(12).cast::<usize>();
                                            let len81 = l80;
                                            let bytes81 = _rt::Vec::from_raw_parts(
                                                l79.cast(),
                                                len81,
                                                len81,
                                            );
                                            let l82 = i32::from(*base.add(16).cast::<u8>());
                                            let l86 = i32::from(*base.add(28).cast::<u8>());
                                            super::super::super::super::exports::wavs::agent::common::Tool {
                                                tool_type: _rt::string_lift(bytes78),
                                                function: super::super::super::super::exports::wavs::agent::common::Function {
                                                    name: _rt::string_lift(bytes81),
                                                    description: match l82 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l83 = *base.add(20).cast::<*mut u8>();
                                                                let l84 = *base.add(24).cast::<usize>();
                                                                let len85 = l84;
                                                                let bytes85 = _rt::Vec::from_raw_parts(
                                                                    l83.cast(),
                                                                    len85,
                                                                    len85,
                                                                );
                                                                _rt::string_lift(bytes85)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    parameters: match l86 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l87 = *base.add(32).cast::<*mut u8>();
                                                                let l88 = *base.add(36).cast::<usize>();
                                                                let len89 = l88;
                                                                let bytes89 = _rt::Vec::from_raw_parts(
                                                                    l87.cast(),
                                                                    len89,
                                                                    len89,
                                                                );
                                                                _rt::string_lift(bytes89)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                },
                                            }
                                        };
                                        result90.push(e90);
                                    }
                                    _rt::cabi_dealloc(base90, len90 * 40, 4);
                                    result90
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l91 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l92 = *arg0.add(88).cast::<*mut u8>();
                                    let l93 = *arg0.add(92).cast::<usize>();
                                    let base95 = l92;
                                    let len95 = l93;
                                    let mut result95 = _rt::Vec::with_capacity(len95);
                                    for i in 0..len95 {
                                        let base = base95.add(i * 4);
                                        let e95 = {
                                            let l94 = *base.add(0).cast::<i32>();
                                            super::super::super::super::exports::wavs::agent::common::CustomToolHandler::from_handle(
                                                l94 as u32,
                                            )
                                        };
                                        result95.push(e95);
                                    }
                                    _rt::cabi_dealloc(base95, len95 * 4, 4);
                                    result95
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(arg0, 96, 4);
                    let ptr97 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result96 {
                        Ok(e) => {
                            *ptr97.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                LlmResponse::Transaction(e) => {
                                    *ptr97.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::exports::wavs::agent::contracts::Transaction {
                                        to: to98,
                                        value: value98,
                                        contract_call: contract_call98,
                                        data: data98,
                                        description: description98,
                                    } = e;
                                    let vec99 = (to98.into_bytes()).into_boxed_slice();
                                    let ptr99 = vec99.as_ptr().cast::<u8>();
                                    let len99 = vec99.len();
                                    ::core::mem::forget(vec99);
                                    *ptr97.add(12).cast::<usize>() = len99;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr99.cast_mut();
                                    let vec100 = (value98.into_bytes()).into_boxed_slice();
                                    let ptr100 = vec100.as_ptr().cast::<u8>();
                                    let len100 = vec100.len();
                                    ::core::mem::forget(vec100);
                                    *ptr97.add(20).cast::<usize>() = len100;
                                    *ptr97.add(16).cast::<*mut u8>() = ptr100.cast_mut();
                                    match contract_call98 {
                                        Some(e) => {
                                            *ptr97.add(24).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::exports::wavs::agent::contracts::ContractCall {
                                                function: function101,
                                                args: args101,
                                            } = e;
                                            let vec102 = (function101.into_bytes()).into_boxed_slice();
                                            let ptr102 = vec102.as_ptr().cast::<u8>();
                                            let len102 = vec102.len();
                                            ::core::mem::forget(vec102);
                                            *ptr97.add(32).cast::<usize>() = len102;
                                            *ptr97.add(28).cast::<*mut u8>() = ptr102.cast_mut();
                                            let vec104 = args101;
                                            let len104 = vec104.len();
                                            let layout104 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec104.len() * 8,
                                                4,
                                            );
                                            let result104 = if layout104.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout104).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout104);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec104.into_iter().enumerate() {
                                                let base = result104.add(i * 8);
                                                {
                                                    let vec103 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr103 = vec103.as_ptr().cast::<u8>();
                                                    let len103 = vec103.len();
                                                    ::core::mem::forget(vec103);
                                                    *base.add(4).cast::<usize>() = len103;
                                                    *base.add(0).cast::<*mut u8>() = ptr103.cast_mut();
                                                }
                                            }
                                            *ptr97.add(40).cast::<usize>() = len104;
                                            *ptr97.add(36).cast::<*mut u8>() = result104;
                                        }
                                        None => {
                                            *ptr97.add(24).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec105 = (data98.into_bytes()).into_boxed_slice();
                                    let ptr105 = vec105.as_ptr().cast::<u8>();
                                    let len105 = vec105.len();
                                    ::core::mem::forget(vec105);
                                    *ptr97.add(48).cast::<usize>() = len105;
                                    *ptr97.add(44).cast::<*mut u8>() = ptr105.cast_mut();
                                    let vec106 = (description98.into_bytes())
                                        .into_boxed_slice();
                                    let ptr106 = vec106.as_ptr().cast::<u8>();
                                    let len106 = vec106.len();
                                    ::core::mem::forget(vec106);
                                    *ptr97.add(56).cast::<usize>() = len106;
                                    *ptr97.add(52).cast::<*mut u8>() = ptr106.cast_mut();
                                }
                                LlmResponse::Text(e) => {
                                    *ptr97.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec107 = (e.into_bytes()).into_boxed_slice();
                                    let ptr107 = vec107.as_ptr().cast::<u8>();
                                    let len107 = vec107.len();
                                    ::core::mem::forget(vec107);
                                    *ptr97.add(12).cast::<usize>() = len107;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr107.cast_mut();
                                }
                            }
                        }
                        Err(e) => {
                            *ptr97.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::wavs::agent::errors::AgentError as V121;
                            match e {
                                V121::Api(e) => {
                                    *ptr97.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec108 = (e.into_bytes()).into_boxed_slice();
                                    let ptr108 = vec108.as_ptr().cast::<u8>();
                                    let len108 = vec108.len();
                                    ::core::mem::forget(vec108);
                                    *ptr97.add(12).cast::<usize>() = len108;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr108.cast_mut();
                                }
                                V121::Http(e) => {
                                    *ptr97.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec109 = (e.into_bytes()).into_boxed_slice();
                                    let ptr109 = vec109.as_ptr().cast::<u8>();
                                    let len109 = vec109.len();
                                    ::core::mem::forget(vec109);
                                    *ptr97.add(12).cast::<usize>() = len109;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr109.cast_mut();
                                }
                                V121::ExternalService(e) => {
                                    *ptr97.add(4).cast::<u8>() = (2i32) as u8;
                                    let vec110 = (e.into_bytes()).into_boxed_slice();
                                    let ptr110 = vec110.as_ptr().cast::<u8>();
                                    let len110 = vec110.len();
                                    ::core::mem::forget(vec110);
                                    *ptr97.add(12).cast::<usize>() = len110;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr110.cast_mut();
                                }
                                V121::Config(e) => {
                                    *ptr97.add(4).cast::<u8>() = (3i32) as u8;
                                    let vec111 = (e.into_bytes()).into_boxed_slice();
                                    let ptr111 = vec111.as_ptr().cast::<u8>();
                                    let len111 = vec111.len();
                                    ::core::mem::forget(vec111);
                                    *ptr97.add(12).cast::<usize>() = len111;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr111.cast_mut();
                                }
                                V121::Contract(e) => {
                                    *ptr97.add(4).cast::<u8>() = (4i32) as u8;
                                    let vec112 = (e.into_bytes()).into_boxed_slice();
                                    let ptr112 = vec112.as_ptr().cast::<u8>();
                                    let len112 = vec112.len();
                                    ::core::mem::forget(vec112);
                                    *ptr97.add(12).cast::<usize>() = len112;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr112.cast_mut();
                                }
                                V121::Configuration(e) => {
                                    *ptr97.add(4).cast::<u8>() = (5i32) as u8;
                                    let vec113 = (e.into_bytes()).into_boxed_slice();
                                    let ptr113 = vec113.as_ptr().cast::<u8>();
                                    let len113 = vec113.len();
                                    ::core::mem::forget(vec113);
                                    *ptr97.add(12).cast::<usize>() = len113;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr113.cast_mut();
                                }
                                V121::ContextLoading(e) => {
                                    *ptr97.add(4).cast::<u8>() = (6i32) as u8;
                                    let vec114 = (e.into_bytes()).into_boxed_slice();
                                    let ptr114 = vec114.as_ptr().cast::<u8>();
                                    let len114 = vec114.len();
                                    ::core::mem::forget(vec114);
                                    *ptr97.add(12).cast::<usize>() = len114;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr114.cast_mut();
                                }
                                V121::ContextValidation(e) => {
                                    *ptr97.add(4).cast::<u8>() = (7i32) as u8;
                                    let vec115 = (e.into_bytes()).into_boxed_slice();
                                    let ptr115 = vec115.as_ptr().cast::<u8>();
                                    let len115 = vec115.len();
                                    ::core::mem::forget(vec115);
                                    *ptr97.add(12).cast::<usize>() = len115;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr115.cast_mut();
                                }
                                V121::Llm(e) => {
                                    *ptr97.add(4).cast::<u8>() = (8i32) as u8;
                                    let vec116 = (e.into_bytes()).into_boxed_slice();
                                    let ptr116 = vec116.as_ptr().cast::<u8>();
                                    let len116 = vec116.len();
                                    ::core::mem::forget(vec116);
                                    *ptr97.add(12).cast::<usize>() = len116;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr116.cast_mut();
                                }
                                V121::Io(e) => {
                                    *ptr97.add(4).cast::<u8>() = (9i32) as u8;
                                    let vec117 = (e.into_bytes()).into_boxed_slice();
                                    let ptr117 = vec117.as_ptr().cast::<u8>();
                                    let len117 = vec117.len();
                                    ::core::mem::forget(vec117);
                                    *ptr97.add(12).cast::<usize>() = len117;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr117.cast_mut();
                                }
                                V121::Transaction(e) => {
                                    *ptr97.add(4).cast::<u8>() = (10i32) as u8;
                                    let vec118 = (e.into_bytes()).into_boxed_slice();
                                    let ptr118 = vec118.as_ptr().cast::<u8>();
                                    let len118 = vec118.len();
                                    ::core::mem::forget(vec118);
                                    *ptr97.add(12).cast::<usize>() = len118;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr118.cast_mut();
                                }
                                V121::Utf8(e) => {
                                    *ptr97.add(4).cast::<u8>() = (11i32) as u8;
                                    let vec119 = (e.into_bytes()).into_boxed_slice();
                                    let ptr119 = vec119.as_ptr().cast::<u8>();
                                    let len119 = vec119.len();
                                    ::core::mem::forget(vec119);
                                    *ptr97.add(12).cast::<usize>() = len119;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr119.cast_mut();
                                }
                                V121::Other(e) => {
                                    *ptr97.add(4).cast::<u8>() = (12i32) as u8;
                                    let vec120 = (e.into_bytes()).into_boxed_slice();
                                    let ptr120 = vec120.as_ptr().cast::<u8>();
                                    let len120 = vec120.len();
                                    ::core::mem::forget(vec120);
                                    *ptr97.add(12).cast::<usize>() = len120;
                                    *ptr97.add(8).cast::<*mut u8>() = ptr120.cast_mut();
                                }
                            }
                        }
                    };
                    ptr97
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_llm_client_process_prompt<
                    T: GuestLlmClient,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                    let l6 = i32::from(*arg0.add(24).cast::<u8>());
                                    match l6 {
                                        0 => {}
                                        _ => {
                                            let l7 = *arg0.add(28).cast::<*mut u8>();
                                            let l8 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l7, l8, 1);
                                            let l9 = *arg0.add(36).cast::<*mut u8>();
                                            let l10 = *arg0.add(40).cast::<usize>();
                                            let base13 = l9;
                                            let len13 = l10;
                                            for i in 0..len13 {
                                                let base = base13.add(i * 8);
                                                {
                                                    let l11 = *base.add(0).cast::<*mut u8>();
                                                    let l12 = *base.add(4).cast::<usize>();
                                                    _rt::cabi_dealloc(l11, l12, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(base13, len13 * 8, 4);
                                        }
                                    }
                                    let l14 = *arg0.add(44).cast::<*mut u8>();
                                    let l15 = *arg0.add(48).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                    let l16 = *arg0.add(52).cast::<*mut u8>();
                                    let l17 = *arg0.add(56).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                _ => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                            }
                        }
                        _ => {
                            let l20 = i32::from(*arg0.add(4).cast::<u8>());
                            match l20 {
                                0 => {
                                    let l21 = *arg0.add(8).cast::<*mut u8>();
                                    let l22 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l21, l22, 1);
                                }
                                1 => {
                                    let l23 = *arg0.add(8).cast::<*mut u8>();
                                    let l24 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l23, l24, 1);
                                }
                                2 => {
                                    let l25 = *arg0.add(8).cast::<*mut u8>();
                                    let l26 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l25, l26, 1);
                                }
                                3 => {
                                    let l27 = *arg0.add(8).cast::<*mut u8>();
                                    let l28 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l27, l28, 1);
                                }
                                4 => {
                                    let l29 = *arg0.add(8).cast::<*mut u8>();
                                    let l30 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l29, l30, 1);
                                }
                                5 => {
                                    let l31 = *arg0.add(8).cast::<*mut u8>();
                                    let l32 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l31, l32, 1);
                                }
                                6 => {
                                    let l33 = *arg0.add(8).cast::<*mut u8>();
                                    let l34 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l33, l34, 1);
                                }
                                7 => {
                                    let l35 = *arg0.add(8).cast::<*mut u8>();
                                    let l36 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l35, l36, 1);
                                }
                                8 => {
                                    let l37 = *arg0.add(8).cast::<*mut u8>();
                                    let l38 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l37, l38, 1);
                                }
                                9 => {
                                    let l39 = *arg0.add(8).cast::<*mut u8>();
                                    let l40 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l39, l40, 1);
                                }
                                10 => {
                                    let l41 = *arg0.add(8).cast::<*mut u8>();
                                    let l42 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l41, l42, 1);
                                }
                                11 => {
                                    let l43 = *arg0.add(8).cast::<*mut u8>();
                                    let l44 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                }
                                _ => {
                                    let l45 = *arg0.add(8).cast::<*mut u8>();
                                    let l46 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type LlmClient: GuestLlmClient;
                }
                pub trait GuestLlmClient: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/client")]
                            extern "C" {
                                #[link_name = "[resource-new]llm-client"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/client")]
                            extern "C" {
                                #[link_name = "[resource-rep]llm-client"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Create a new LLM client with default configuration
                    fn new(&self, model: _rt::String) -> Result<LlmClient, AgentError>;
                    /// Create a new LLM client from a JSON configuration string
                    fn from_json(
                        &self,
                        model: _rt::String,
                        json_config: _rt::String,
                    ) -> Result<LlmClient, AgentError>;
                    /// Create a new LLM client with custom configuration
                    fn with_config(
                        &self,
                        model: _rt::String,
                        config: LlmOptions,
                    ) -> Result<LlmClient, AgentError>;
                    /// Get the model name
                    fn get_model(&self) -> _rt::String;
                    /// Get a reference to the current configuration
                    fn get_config(&self) -> LlmOptions;
                    /// Send a chat completion request, with optional tools
                    fn chat_completion(
                        &self,
                        messages: _rt::Vec<Message>,
                        tools: Option<_rt::Vec<Tool>>,
                    ) -> Result<Message, AgentError>;
                    /// Helper method to get just the content string from a chat completion
                    fn chat_completion_text(
                        &self,
                        messages: _rt::Vec<Message>,
                    ) -> Result<_rt::String, AgentError>;
                    /// Process a prompt with the LLM and return either a Transaction or text response
                    fn process_prompt(
                        &self,
                        prompt: _rt::String,
                        config: Config,
                        custom_tools: Option<_rt::Vec<Tool>>,
                        custom_handlers: Option<_rt::Vec<CustomToolHandler>>,
                    ) -> Result<LlmResponse, AgentError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wavs_agent_client_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "wavs:agent/client#[method]llm-client.new"] unsafe extern "C" fn
                        export_method_llm_client_new(arg0 : * mut u8, arg1 : * mut u8,
                        arg2 : usize,) -> * mut u8 { $($path_to_types)*::
                        _export_method_llm_client_new_cabi::<<$ty as $($path_to_types)*::
                        Guest >::LlmClient > (arg0, arg1, arg2) } #[export_name =
                        "cabi_post_wavs:agent/client#[method]llm-client.new"] unsafe
                        extern "C" fn _post_return_method_llm_client_new(arg0 : * mut
                        u8,) { $($path_to_types)*::
                        __post_return_method_llm_client_new::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0) } #[export_name
                        = "wavs:agent/client#[method]llm-client.from-json"] unsafe extern
                        "C" fn export_method_llm_client_from_json(arg0 : * mut u8, arg1 :
                        * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,) -> * mut
                        u8 { $($path_to_types)*::
                        _export_method_llm_client_from_json_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0, arg1, arg2,
                        arg3, arg4) } #[export_name =
                        "cabi_post_wavs:agent/client#[method]llm-client.from-json"]
                        unsafe extern "C" fn
                        _post_return_method_llm_client_from_json(arg0 : * mut u8,) {
                        $($path_to_types)*::
                        __post_return_method_llm_client_from_json::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0) } #[export_name
                        = "wavs:agent/client#[method]llm-client.with-config"] unsafe
                        extern "C" fn export_method_llm_client_with_config(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize, arg3 : f32, arg4 : f32, arg5 :
                        i32, arg6 : i32, arg7 : i32, arg8 : i32, arg9 : i32,) -> * mut u8
                        { $($path_to_types)*::
                        _export_method_llm_client_with_config_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0, arg1, arg2,
                        arg3, arg4, arg5, arg6, arg7, arg8, arg9) } #[export_name =
                        "cabi_post_wavs:agent/client#[method]llm-client.with-config"]
                        unsafe extern "C" fn
                        _post_return_method_llm_client_with_config(arg0 : * mut u8,) {
                        $($path_to_types)*::
                        __post_return_method_llm_client_with_config::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0) } #[export_name
                        = "wavs:agent/client#[method]llm-client.get-model"] unsafe extern
                        "C" fn export_method_llm_client_get_model(arg0 : * mut u8,) -> *
                        mut u8 { $($path_to_types)*::
                        _export_method_llm_client_get_model_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0) } #[export_name
                        = "cabi_post_wavs:agent/client#[method]llm-client.get-model"]
                        unsafe extern "C" fn
                        _post_return_method_llm_client_get_model(arg0 : * mut u8,) {
                        $($path_to_types)*::
                        __post_return_method_llm_client_get_model::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0) } #[export_name
                        = "wavs:agent/client#[method]llm-client.get-config"] unsafe
                        extern "C" fn export_method_llm_client_get_config(arg0 : * mut
                        u8,) -> * mut u8 { $($path_to_types)*::
                        _export_method_llm_client_get_config_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0) } #[export_name
                        = "wavs:agent/client#[method]llm-client.chat-completion"] unsafe
                        extern "C" fn export_method_llm_client_chat_completion(arg0 : *
                        mut u8, arg1 : * mut u8, arg2 : usize, arg3 : i32, arg4 : * mut
                        u8, arg5 : usize,) -> * mut u8 { $($path_to_types)*::
                        _export_method_llm_client_chat_completion_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0, arg1, arg2,
                        arg3, arg4, arg5) } #[export_name =
                        "cabi_post_wavs:agent/client#[method]llm-client.chat-completion"]
                        unsafe extern "C" fn
                        _post_return_method_llm_client_chat_completion(arg0 : * mut u8,)
                        { $($path_to_types)*::
                        __post_return_method_llm_client_chat_completion::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0) } #[export_name
                        = "wavs:agent/client#[method]llm-client.chat-completion-text"]
                        unsafe extern "C" fn
                        export_method_llm_client_chat_completion_text(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize,) -> * mut u8 {
                        $($path_to_types)*::
                        _export_method_llm_client_chat_completion_text_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0, arg1, arg2) }
                        #[export_name =
                        "cabi_post_wavs:agent/client#[method]llm-client.chat-completion-text"]
                        unsafe extern "C" fn
                        _post_return_method_llm_client_chat_completion_text(arg0 : * mut
                        u8,) { $($path_to_types)*::
                        __post_return_method_llm_client_chat_completion_text::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0) } #[export_name
                        = "wavs:agent/client#[method]llm-client.process-prompt"] unsafe
                        extern "C" fn export_method_llm_client_process_prompt(arg0 : *
                        mut u8,) -> * mut u8 { $($path_to_types)*::
                        _export_method_llm_client_process_prompt_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0) } #[export_name
                        =
                        "cabi_post_wavs:agent/client#[method]llm-client.process-prompt"]
                        unsafe extern "C" fn
                        _post_return_method_llm_client_process_prompt(arg0 : * mut u8,) {
                        $($path_to_types)*::
                        __post_return_method_llm_client_process_prompt::<<$ty as
                        $($path_to_types)*:: Guest >::LlmClient > (arg0) } const _ : () =
                        { #[doc(hidden)] #[export_name =
                        "wavs:agent/client#[dtor]llm-client"] #[allow(non_snake_case)]
                        unsafe extern "C" fn dtor(rep : * mut u8) { $($path_to_types)*::
                        LlmClient::dtor::< <$ty as $($path_to_types)*:: Guest
                        >::LlmClient > (rep) } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wavs_agent_client_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 60]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 60],
                );
            }
            #[allow(dead_code, clippy::all)]
            pub mod tools {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type LlmClient = super::super::super::super::exports::wavs::agent::client::LlmClient;
                pub type LlmClientBorrow<'a> = super::super::super::super::exports::wavs::agent::client::LlmClientBorrow<
                    'a,
                >;
                pub type Message = super::super::super::super::exports::wavs::agent::common::Message;
                pub type Tool = super::super::super::super::exports::wavs::agent::common::Tool;
                pub type ToolCall = super::super::super::super::exports::wavs::agent::common::ToolCall;
                pub type CustomToolHandler = super::super::super::super::exports::wavs::agent::common::CustomToolHandler;
                pub type CustomToolHandlerBorrow<'a> = super::super::super::super::exports::wavs::agent::common::CustomToolHandlerBorrow<
                    'a,
                >;
                pub type Contract = super::super::super::super::exports::wavs::agent::contracts::Contract;
                /// Tool creation and management functions
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ToolsBuilder {
                    handle: _rt::Resource<ToolsBuilder>,
                }
                type _ToolsBuilderRep<T> = Option<T>;
                impl ToolsBuilder {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `ToolsBuilder`.
                    pub fn new<T: GuestToolsBuilder>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ToolsBuilderRep<T> = Some(val);
                        let ptr: *mut _ToolsBuilderRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestToolsBuilder>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestToolsBuilder>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestToolsBuilder>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ToolsBuilderRep<T>);
                    }
                    fn as_ptr<T: GuestToolsBuilder>(&self) -> *mut _ToolsBuilderRep<T> {
                        ToolsBuilder::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`ToolsBuilder`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ToolsBuilderBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a ToolsBuilder>,
                }
                impl<'a> ToolsBuilderBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestToolsBuilder>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _ToolsBuilderRep<T> {
                        ToolsBuilder::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for ToolsBuilder {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/tools")]
                            extern "C" {
                                #[link_name = "[resource-drop]tools-builder"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tools_builder_send_eth_tool_cabi<
                    T: GuestToolsBuilder,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::send_eth_tool(
                        ToolsBuilderBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::exports::wavs::agent::common::Tool {
                        tool_type: tool_type2,
                        function: function2,
                    } = result0;
                    let vec3 = (tool_type2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(4).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    let super::super::super::super::exports::wavs::agent::common::Function {
                        name: name4,
                        description: description4,
                        parameters: parameters4,
                    } = function2;
                    let vec5 = (name4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    ::core::mem::forget(vec5);
                    *ptr1.add(12).cast::<usize>() = len5;
                    *ptr1.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                    match description4 {
                        Some(e) => {
                            *ptr1.add(16).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr1.add(24).cast::<usize>() = len6;
                            *ptr1.add(20).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                        None => {
                            *ptr1.add(16).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match parameters4 {
                        Some(e) => {
                            *ptr1.add(28).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr1.add(36).cast::<usize>() = len7;
                            *ptr1.add(32).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                        None => {
                            *ptr1.add(28).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_tools_builder_send_eth_tool<
                    T: GuestToolsBuilder,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0.add(8).cast::<*mut u8>();
                    let l3 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                    let l4 = i32::from(*arg0.add(16).cast::<u8>());
                    match l4 {
                        0 => {}
                        _ => {
                            let l5 = *arg0.add(20).cast::<*mut u8>();
                            let l6 = *arg0.add(24).cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                    let l7 = i32::from(*arg0.add(28).cast::<u8>());
                    match l7 {
                        0 => {}
                        _ => {
                            let l8 = *arg0.add(32).cast::<*mut u8>();
                            let l9 = *arg0.add(36).cast::<usize>();
                            _rt::cabi_dealloc(l8, l9, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tools_builder_tools_from_contract_cabi<
                    T: GuestToolsBuilder,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let result4 = T::tools_from_contract(
                        ToolsBuilderBorrow::lift(arg0 as u32 as usize).get(),
                        super::super::super::super::exports::wavs::agent::contracts::Contract {
                            name: _rt::string_lift(bytes0),
                            address: _rt::string_lift(bytes1),
                            abi: _rt::string_lift(bytes2),
                            description: match arg7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len3 = arg9;
                                        let bytes3 = _rt::Vec::from_raw_parts(
                                            arg8.cast(),
                                            len3,
                                            len3,
                                        );
                                        _rt::string_lift(bytes3)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    let ptr5 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec12 = result4;
                    let len12 = vec12.len();
                    let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec12.len() * 40,
                        4,
                    );
                    let result12 = if layout12.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout12);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec12.into_iter().enumerate() {
                        let base = result12.add(i * 40);
                        {
                            let super::super::super::super::exports::wavs::agent::common::Tool {
                                tool_type: tool_type6,
                                function: function6,
                            } = e;
                            let vec7 = (tool_type6.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *base.add(4).cast::<usize>() = len7;
                            *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                            let super::super::super::super::exports::wavs::agent::common::Function {
                                name: name8,
                                description: description8,
                                parameters: parameters8,
                            } = function6;
                            let vec9 = (name8.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *base.add(12).cast::<usize>() = len9;
                            *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                            match description8 {
                                Some(e) => {
                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *base.add(24).cast::<usize>() = len10;
                                    *base.add(20).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                None => {
                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match parameters8 {
                                Some(e) => {
                                    *base.add(28).cast::<u8>() = (1i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *base.add(36).cast::<usize>() = len11;
                                    *base.add(32).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                None => {
                                    *base.add(28).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    }
                    *ptr5.add(4).cast::<usize>() = len12;
                    *ptr5.add(0).cast::<*mut u8>() = result12;
                    ptr5
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_tools_builder_tools_from_contract<
                    T: GuestToolsBuilder,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let base12 = l0;
                    let len12 = l1;
                    for i in 0..len12 {
                        let base = base12.add(i * 40);
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = *base.add(8).cast::<*mut u8>();
                            let l5 = *base.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                            let l6 = i32::from(*base.add(16).cast::<u8>());
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *base.add(20).cast::<*mut u8>();
                                    let l8 = *base.add(24).cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                            let l9 = i32::from(*base.add(28).cast::<u8>());
                            match l9 {
                                0 => {}
                                _ => {
                                    let l10 = *base.add(32).cast::<*mut u8>();
                                    let l11 = *base.add(36).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                        }
                    }
                    _rt::cabi_dealloc(base12, len12 * 40, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tools_builder_custom_tool_cabi<
                    T: GuestToolsBuilder,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let result3 = T::custom_tool(
                        ToolsBuilderBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        _rt::string_lift(bytes2),
                    );
                    let ptr4 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::exports::wavs::agent::common::Tool {
                        tool_type: tool_type5,
                        function: function5,
                    } = result3;
                    let vec6 = (tool_type5.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    ::core::mem::forget(vec6);
                    *ptr4.add(4).cast::<usize>() = len6;
                    *ptr4.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                    let super::super::super::super::exports::wavs::agent::common::Function {
                        name: name7,
                        description: description7,
                        parameters: parameters7,
                    } = function5;
                    let vec8 = (name7.into_bytes()).into_boxed_slice();
                    let ptr8 = vec8.as_ptr().cast::<u8>();
                    let len8 = vec8.len();
                    ::core::mem::forget(vec8);
                    *ptr4.add(12).cast::<usize>() = len8;
                    *ptr4.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                    match description7 {
                        Some(e) => {
                            *ptr4.add(16).cast::<u8>() = (1i32) as u8;
                            let vec9 = (e.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr4.add(24).cast::<usize>() = len9;
                            *ptr4.add(20).cast::<*mut u8>() = ptr9.cast_mut();
                        }
                        None => {
                            *ptr4.add(16).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match parameters7 {
                        Some(e) => {
                            *ptr4.add(28).cast::<u8>() = (1i32) as u8;
                            let vec10 = (e.into_bytes()).into_boxed_slice();
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            ::core::mem::forget(vec10);
                            *ptr4.add(36).cast::<usize>() = len10;
                            *ptr4.add(32).cast::<*mut u8>() = ptr10.cast_mut();
                        }
                        None => {
                            *ptr4.add(28).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_tools_builder_custom_tool<
                    T: GuestToolsBuilder,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0.add(8).cast::<*mut u8>();
                    let l3 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                    let l4 = i32::from(*arg0.add(16).cast::<u8>());
                    match l4 {
                        0 => {}
                        _ => {
                            let l5 = *arg0.add(20).cast::<*mut u8>();
                            let l6 = *arg0.add(24).cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                    let l7 = i32::from(*arg0.add(28).cast::<u8>());
                    match l7 {
                        0 => {}
                        _ => {
                            let l8 = *arg0.add(32).cast::<*mut u8>();
                            let l9 = *arg0.add(36).cast::<usize>();
                            _rt::cabi_dealloc(l8, l9, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tools_builder_execute_tool_call_cabi<
                    T: GuestToolsBuilder,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: *mut u8,
                    arg8: usize,
                    arg9: i32,
                    arg10: *mut u8,
                    arg11: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let len3 = arg8;
                    let bytes3 = _rt::Vec::from_raw_parts(arg7.cast(), len3, len3);
                    let result6 = T::execute_tool_call(
                        ToolsBuilderBorrow::lift(arg0 as u32 as usize).get(),
                        super::super::super::super::exports::wavs::agent::common::ToolCall {
                            id: _rt::string_lift(bytes0),
                            tool_type: _rt::string_lift(bytes1),
                            function: super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                name: _rt::string_lift(bytes2),
                                arguments: _rt::string_lift(bytes3),
                            },
                        },
                        match arg9 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base5 = arg10;
                                    let len5 = arg11;
                                    let mut result5 = _rt::Vec::with_capacity(len5);
                                    for i in 0..len5 {
                                        let base = base5.add(i * 4);
                                        let e5 = {
                                            let l4 = *base.add(0).cast::<i32>();
                                            super::super::super::super::exports::wavs::agent::common::CustomToolHandler::from_handle(
                                                l4 as u32,
                                            )
                                        };
                                        result5.push(e5);
                                    }
                                    _rt::cabi_dealloc(base5, len5 * 4, 4);
                                    result5
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr7 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result6 {
                        Ok(e) => {
                            *ptr7.add(0).cast::<u8>() = (0i32) as u8;
                            let vec8 = (e.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr7.add(8).cast::<usize>() = len8;
                            *ptr7.add(4).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                        Err(e) => {
                            *ptr7.add(0).cast::<u8>() = (1i32) as u8;
                            let vec9 = (e.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr7.add(8).cast::<usize>() = len9;
                            *ptr7.add(4).cast::<*mut u8>() = ptr9.cast_mut();
                        }
                    };
                    ptr7
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_tools_builder_execute_tool_call<
                    T: GuestToolsBuilder,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tools_builder_parse_eth_transaction_cabi<
                    T: GuestToolsBuilder,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: *mut u8,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let len3 = arg8;
                    let bytes3 = _rt::Vec::from_raw_parts(arg7.cast(), len3, len3);
                    let result4 = T::parse_eth_transaction(
                        ToolsBuilderBorrow::lift(arg0 as u32 as usize).get(),
                        super::super::super::super::exports::wavs::agent::common::ToolCall {
                            id: _rt::string_lift(bytes0),
                            tool_type: _rt::string_lift(bytes1),
                            function: super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                name: _rt::string_lift(bytes2),
                                arguments: _rt::string_lift(bytes3),
                            },
                        },
                    );
                    let ptr5 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result4 {
                        Ok(e) => {
                            *ptr5.add(0).cast::<u8>() = (0i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr5.add(8).cast::<usize>() = len6;
                            *ptr5.add(4).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                        Err(e) => {
                            *ptr5.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr5.add(8).cast::<usize>() = len7;
                            *ptr5.add(4).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr5
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_tools_builder_parse_eth_transaction<
                    T: GuestToolsBuilder,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tools_builder_process_tool_calls_cabi<
                    T: GuestToolsBuilder,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(4).cast::<i32>();
                    let l2 = *arg0.add(8).cast::<*mut u8>();
                    let l3 = *arg0.add(12).cast::<usize>();
                    let base35 = l2;
                    let len35 = l3;
                    let mut result35 = _rt::Vec::with_capacity(len35);
                    for i in 0..len35 {
                        let base = base35.add(i * 56);
                        let e35 = {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base.add(4).cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            let l7 = i32::from(*base.add(8).cast::<u8>());
                            let l11 = i32::from(*base.add(20).cast::<u8>());
                            let l27 = i32::from(*base.add(32).cast::<u8>());
                            let l31 = i32::from(*base.add(44).cast::<u8>());
                            super::super::super::super::exports::wavs::agent::common::Message {
                                role: _rt::string_lift(bytes6),
                                content: match l7 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l8 = *base.add(12).cast::<*mut u8>();
                                            let l9 = *base.add(16).cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            _rt::string_lift(bytes10)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                tool_calls: match l11 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l12 = *base.add(24).cast::<*mut u8>();
                                            let l13 = *base.add(28).cast::<usize>();
                                            let base26 = l12;
                                            let len26 = l13;
                                            let mut result26 = _rt::Vec::with_capacity(len26);
                                            for i in 0..len26 {
                                                let base = base26.add(i * 32);
                                                let e26 = {
                                                    let l14 = *base.add(0).cast::<*mut u8>();
                                                    let l15 = *base.add(4).cast::<usize>();
                                                    let len16 = l15;
                                                    let bytes16 = _rt::Vec::from_raw_parts(
                                                        l14.cast(),
                                                        len16,
                                                        len16,
                                                    );
                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                    let l18 = *base.add(12).cast::<usize>();
                                                    let len19 = l18;
                                                    let bytes19 = _rt::Vec::from_raw_parts(
                                                        l17.cast(),
                                                        len19,
                                                        len19,
                                                    );
                                                    let l20 = *base.add(16).cast::<*mut u8>();
                                                    let l21 = *base.add(20).cast::<usize>();
                                                    let len22 = l21;
                                                    let bytes22 = _rt::Vec::from_raw_parts(
                                                        l20.cast(),
                                                        len22,
                                                        len22,
                                                    );
                                                    let l23 = *base.add(24).cast::<*mut u8>();
                                                    let l24 = *base.add(28).cast::<usize>();
                                                    let len25 = l24;
                                                    let bytes25 = _rt::Vec::from_raw_parts(
                                                        l23.cast(),
                                                        len25,
                                                        len25,
                                                    );
                                                    super::super::super::super::exports::wavs::agent::common::ToolCall {
                                                        id: _rt::string_lift(bytes16),
                                                        tool_type: _rt::string_lift(bytes19),
                                                        function: super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                                            name: _rt::string_lift(bytes22),
                                                            arguments: _rt::string_lift(bytes25),
                                                        },
                                                    }
                                                };
                                                result26.push(e26);
                                            }
                                            _rt::cabi_dealloc(base26, len26 * 32, 4);
                                            result26
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                tool_call_id: match l27 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l28 = *base.add(36).cast::<*mut u8>();
                                            let l29 = *base.add(40).cast::<usize>();
                                            let len30 = l29;
                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                l28.cast(),
                                                len30,
                                                len30,
                                            );
                                            _rt::string_lift(bytes30)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                name: match l31 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l32 = *base.add(48).cast::<*mut u8>();
                                            let l33 = *base.add(52).cast::<usize>();
                                            let len34 = l33;
                                            let bytes34 = _rt::Vec::from_raw_parts(
                                                l32.cast(),
                                                len34,
                                                len34,
                                            );
                                            _rt::string_lift(bytes34)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result35.push(e35);
                    }
                    _rt::cabi_dealloc(base35, len35 * 56, 4);
                    let l36 = *arg0.add(16).cast::<*mut u8>();
                    let l37 = *arg0.add(20).cast::<usize>();
                    let len38 = l37;
                    let bytes38 = _rt::Vec::from_raw_parts(l36.cast(), len38, len38);
                    let l39 = i32::from(*arg0.add(24).cast::<u8>());
                    let l43 = i32::from(*arg0.add(36).cast::<u8>());
                    let l59 = i32::from(*arg0.add(48).cast::<u8>());
                    let l63 = i32::from(*arg0.add(60).cast::<u8>());
                    let l67 = *arg0.add(72).cast::<*mut u8>();
                    let l68 = *arg0.add(76).cast::<usize>();
                    let base81 = l67;
                    let len81 = l68;
                    let mut result81 = _rt::Vec::with_capacity(len81);
                    for i in 0..len81 {
                        let base = base81.add(i * 32);
                        let e81 = {
                            let l69 = *base.add(0).cast::<*mut u8>();
                            let l70 = *base.add(4).cast::<usize>();
                            let len71 = l70;
                            let bytes71 = _rt::Vec::from_raw_parts(
                                l69.cast(),
                                len71,
                                len71,
                            );
                            let l72 = *base.add(8).cast::<*mut u8>();
                            let l73 = *base.add(12).cast::<usize>();
                            let len74 = l73;
                            let bytes74 = _rt::Vec::from_raw_parts(
                                l72.cast(),
                                len74,
                                len74,
                            );
                            let l75 = *base.add(16).cast::<*mut u8>();
                            let l76 = *base.add(20).cast::<usize>();
                            let len77 = l76;
                            let bytes77 = _rt::Vec::from_raw_parts(
                                l75.cast(),
                                len77,
                                len77,
                            );
                            let l78 = *base.add(24).cast::<*mut u8>();
                            let l79 = *base.add(28).cast::<usize>();
                            let len80 = l79;
                            let bytes80 = _rt::Vec::from_raw_parts(
                                l78.cast(),
                                len80,
                                len80,
                            );
                            super::super::super::super::exports::wavs::agent::common::ToolCall {
                                id: _rt::string_lift(bytes71),
                                tool_type: _rt::string_lift(bytes74),
                                function: super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                    name: _rt::string_lift(bytes77),
                                    arguments: _rt::string_lift(bytes80),
                                },
                            }
                        };
                        result81.push(e81);
                    }
                    _rt::cabi_dealloc(base81, len81 * 32, 4);
                    let l82 = i32::from(*arg0.add(80).cast::<u8>());
                    let result87 = T::process_tool_calls(
                        ToolsBuilderBorrow::lift(l0 as u32 as usize).get(),
                        super::super::super::super::exports::wavs::agent::client::LlmClient::from_handle(
                            l1 as u32,
                        ),
                        result35,
                        super::super::super::super::exports::wavs::agent::common::Message {
                            role: _rt::string_lift(bytes38),
                            content: match l39 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l40 = *arg0.add(28).cast::<*mut u8>();
                                        let l41 = *arg0.add(32).cast::<usize>();
                                        let len42 = l41;
                                        let bytes42 = _rt::Vec::from_raw_parts(
                                            l40.cast(),
                                            len42,
                                            len42,
                                        );
                                        _rt::string_lift(bytes42)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            tool_calls: match l43 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l44 = *arg0.add(40).cast::<*mut u8>();
                                        let l45 = *arg0.add(44).cast::<usize>();
                                        let base58 = l44;
                                        let len58 = l45;
                                        let mut result58 = _rt::Vec::with_capacity(len58);
                                        for i in 0..len58 {
                                            let base = base58.add(i * 32);
                                            let e58 = {
                                                let l46 = *base.add(0).cast::<*mut u8>();
                                                let l47 = *base.add(4).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                let l49 = *base.add(8).cast::<*mut u8>();
                                                let l50 = *base.add(12).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                let l52 = *base.add(16).cast::<*mut u8>();
                                                let l53 = *base.add(20).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                let l55 = *base.add(24).cast::<*mut u8>();
                                                let l56 = *base.add(28).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                super::super::super::super::exports::wavs::agent::common::ToolCall {
                                                    id: _rt::string_lift(bytes48),
                                                    tool_type: _rt::string_lift(bytes51),
                                                    function: super::super::super::super::exports::wavs::agent::common::ToolCallFunction {
                                                        name: _rt::string_lift(bytes54),
                                                        arguments: _rt::string_lift(bytes57),
                                                    },
                                                }
                                            };
                                            result58.push(e58);
                                        }
                                        _rt::cabi_dealloc(base58, len58 * 32, 4);
                                        result58
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            tool_call_id: match l59 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l60 = *arg0.add(52).cast::<*mut u8>();
                                        let l61 = *arg0.add(56).cast::<usize>();
                                        let len62 = l61;
                                        let bytes62 = _rt::Vec::from_raw_parts(
                                            l60.cast(),
                                            len62,
                                            len62,
                                        );
                                        _rt::string_lift(bytes62)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            name: match l63 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l64 = *arg0.add(64).cast::<*mut u8>();
                                        let l65 = *arg0.add(68).cast::<usize>();
                                        let len66 = l65;
                                        let bytes66 = _rt::Vec::from_raw_parts(
                                            l64.cast(),
                                            len66,
                                            len66,
                                        );
                                        _rt::string_lift(bytes66)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        result81,
                        match l82 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l83 = *arg0.add(84).cast::<*mut u8>();
                                    let l84 = *arg0.add(88).cast::<usize>();
                                    let base86 = l83;
                                    let len86 = l84;
                                    let mut result86 = _rt::Vec::with_capacity(len86);
                                    for i in 0..len86 {
                                        let base = base86.add(i * 4);
                                        let e86 = {
                                            let l85 = *base.add(0).cast::<i32>();
                                            super::super::super::super::exports::wavs::agent::common::CustomToolHandler::from_handle(
                                                l85 as u32,
                                            )
                                        };
                                        result86.push(e86);
                                    }
                                    _rt::cabi_dealloc(base86, len86 * 4, 4);
                                    result86
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(arg0, 92, 4);
                    let ptr88 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result87 {
                        Ok(e) => {
                            *ptr88.add(0).cast::<u8>() = (0i32) as u8;
                            let vec89 = (e.into_bytes()).into_boxed_slice();
                            let ptr89 = vec89.as_ptr().cast::<u8>();
                            let len89 = vec89.len();
                            ::core::mem::forget(vec89);
                            *ptr88.add(8).cast::<usize>() = len89;
                            *ptr88.add(4).cast::<*mut u8>() = ptr89.cast_mut();
                        }
                        Err(e) => {
                            *ptr88.add(0).cast::<u8>() = (1i32) as u8;
                            let vec90 = (e.into_bytes()).into_boxed_slice();
                            let ptr90 = vec90.as_ptr().cast::<u8>();
                            let len90 = vec90.len();
                            ::core::mem::forget(vec90);
                            *ptr88.add(8).cast::<usize>() = len90;
                            *ptr88.add(4).cast::<*mut u8>() = ptr90.cast_mut();
                        }
                    };
                    ptr88
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_tools_builder_process_tool_calls<
                    T: GuestToolsBuilder,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                pub trait Guest {
                    type ToolsBuilder: GuestToolsBuilder;
                }
                pub trait GuestToolsBuilder: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/tools")]
                            extern "C" {
                                #[link_name = "[resource-new]tools-builder"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wavs:agent/tools")]
                            extern "C" {
                                #[link_name = "[resource-rep]tools-builder"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Create a tool to send ETH through the DAO's Safe
                    fn send_eth_tool(&self) -> Tool;
                    /// Generate tools from a smart contract's ABI
                    fn tools_from_contract(&self, contract: Contract) -> _rt::Vec<Tool>;
                    /// Create a custom tool with the specified name, description, and parameters
                    fn custom_tool(
                        &self,
                        name: _rt::String,
                        description: _rt::String,
                        parameters: _rt::String,
                    ) -> Tool;
                    /// Execute a tool call and return the result
                    fn execute_tool_call(
                        &self,
                        tool_call: ToolCall,
                        custom_handlers: Option<_rt::Vec<CustomToolHandler>>,
                    ) -> Result<_rt::String, _rt::String>;
                    /// Parse an ETH transaction from tool call
                    fn parse_eth_transaction(
                        &self,
                        tool_call: ToolCall,
                    ) -> Result<_rt::String, _rt::String>;
                    /// Process tool calls and generate a response
                    fn process_tool_calls(
                        &self,
                        client: LlmClient,
                        initial_messages: _rt::Vec<Message>,
                        response: Message,
                        tool_calls: _rt::Vec<ToolCall>,
                        custom_handlers: Option<_rt::Vec<CustomToolHandler>>,
                    ) -> Result<_rt::String, _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_wavs_agent_tools_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "wavs:agent/tools#[method]tools-builder.send-eth-tool"] unsafe
                        extern "C" fn export_method_tools_builder_send_eth_tool(arg0 : *
                        mut u8,) -> * mut u8 { $($path_to_types)*::
                        _export_method_tools_builder_send_eth_tool_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ToolsBuilder > (arg0) }
                        #[export_name =
                        "cabi_post_wavs:agent/tools#[method]tools-builder.send-eth-tool"]
                        unsafe extern "C" fn
                        _post_return_method_tools_builder_send_eth_tool(arg0 : * mut u8,)
                        { $($path_to_types)*::
                        __post_return_method_tools_builder_send_eth_tool::<<$ty as
                        $($path_to_types)*:: Guest >::ToolsBuilder > (arg0) }
                        #[export_name =
                        "wavs:agent/tools#[method]tools-builder.tools-from-contract"]
                        unsafe extern "C" fn
                        export_method_tools_builder_tools_from_contract(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,
                        arg5 : * mut u8, arg6 : usize, arg7 : i32, arg8 : * mut u8, arg9
                        : usize,) -> * mut u8 { $($path_to_types)*::
                        _export_method_tools_builder_tools_from_contract_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ToolsBuilder > (arg0, arg1, arg2,
                        arg3, arg4, arg5, arg6, arg7, arg8, arg9) } #[export_name =
                        "cabi_post_wavs:agent/tools#[method]tools-builder.tools-from-contract"]
                        unsafe extern "C" fn
                        _post_return_method_tools_builder_tools_from_contract(arg0 : *
                        mut u8,) { $($path_to_types)*::
                        __post_return_method_tools_builder_tools_from_contract::<<$ty as
                        $($path_to_types)*:: Guest >::ToolsBuilder > (arg0) }
                        #[export_name =
                        "wavs:agent/tools#[method]tools-builder.custom-tool"] unsafe
                        extern "C" fn export_method_tools_builder_custom_tool(arg0 : *
                        mut u8, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 :
                        usize, arg5 : * mut u8, arg6 : usize,) -> * mut u8 {
                        $($path_to_types)*::
                        _export_method_tools_builder_custom_tool_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ToolsBuilder > (arg0, arg1, arg2,
                        arg3, arg4, arg5, arg6) } #[export_name =
                        "cabi_post_wavs:agent/tools#[method]tools-builder.custom-tool"]
                        unsafe extern "C" fn
                        _post_return_method_tools_builder_custom_tool(arg0 : * mut u8,) {
                        $($path_to_types)*::
                        __post_return_method_tools_builder_custom_tool::<<$ty as
                        $($path_to_types)*:: Guest >::ToolsBuilder > (arg0) }
                        #[export_name =
                        "wavs:agent/tools#[method]tools-builder.execute-tool-call"]
                        unsafe extern "C" fn
                        export_method_tools_builder_execute_tool_call(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,
                        arg5 : * mut u8, arg6 : usize, arg7 : * mut u8, arg8 : usize,
                        arg9 : i32, arg10 : * mut u8, arg11 : usize,) -> * mut u8 {
                        $($path_to_types)*::
                        _export_method_tools_builder_execute_tool_call_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ToolsBuilder > (arg0, arg1, arg2,
                        arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) }
                        #[export_name =
                        "cabi_post_wavs:agent/tools#[method]tools-builder.execute-tool-call"]
                        unsafe extern "C" fn
                        _post_return_method_tools_builder_execute_tool_call(arg0 : * mut
                        u8,) { $($path_to_types)*::
                        __post_return_method_tools_builder_execute_tool_call::<<$ty as
                        $($path_to_types)*:: Guest >::ToolsBuilder > (arg0) }
                        #[export_name =
                        "wavs:agent/tools#[method]tools-builder.parse-eth-transaction"]
                        unsafe extern "C" fn
                        export_method_tools_builder_parse_eth_transaction(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,
                        arg5 : * mut u8, arg6 : usize, arg7 : * mut u8, arg8 : usize,) ->
                        * mut u8 { $($path_to_types)*::
                        _export_method_tools_builder_parse_eth_transaction_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ToolsBuilder > (arg0, arg1, arg2,
                        arg3, arg4, arg5, arg6, arg7, arg8) } #[export_name =
                        "cabi_post_wavs:agent/tools#[method]tools-builder.parse-eth-transaction"]
                        unsafe extern "C" fn
                        _post_return_method_tools_builder_parse_eth_transaction(arg0 : *
                        mut u8,) { $($path_to_types)*::
                        __post_return_method_tools_builder_parse_eth_transaction::<<$ty
                        as $($path_to_types)*:: Guest >::ToolsBuilder > (arg0) }
                        #[export_name =
                        "wavs:agent/tools#[method]tools-builder.process-tool-calls"]
                        unsafe extern "C" fn
                        export_method_tools_builder_process_tool_calls(arg0 : * mut u8,)
                        -> * mut u8 { $($path_to_types)*::
                        _export_method_tools_builder_process_tool_calls_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::ToolsBuilder > (arg0) }
                        #[export_name =
                        "cabi_post_wavs:agent/tools#[method]tools-builder.process-tool-calls"]
                        unsafe extern "C" fn
                        _post_return_method_tools_builder_process_tool_calls(arg0 : * mut
                        u8,) { $($path_to_types)*::
                        __post_return_method_tools_builder_process_tool_calls::<<$ty as
                        $($path_to_types)*:: Guest >::ToolsBuilder > (arg0) } const _ :
                        () = { #[doc(hidden)] #[export_name =
                        "wavs:agent/tools#[dtor]tools-builder"] #[allow(non_snake_case)]
                        unsafe extern "C" fn dtor(rep : * mut u8) { $($path_to_types)*::
                        ToolsBuilder::dtor::< <$ty as $($path_to_types)*:: Guest
                        >::ToolsBuilder > (rep) } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wavs_agent_tools_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 40]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 40],
                );
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_wavs_agent_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::wavs::agent::errors::__export_wavs_agent_errors_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::wavs::agent::errors);
        $($path_to_types_root)*::
        exports::wavs::agent::common::__export_wavs_agent_common_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::wavs::agent::common);
        $($path_to_types_root)*::
        exports::wavs::agent::contracts::__export_wavs_agent_contracts_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wavs::agent::contracts);
        $($path_to_types_root)*::
        exports::wavs::agent::config::__export_wavs_agent_config_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::wavs::agent::config);
        $($path_to_types_root)*::
        exports::wavs::agent::client::__export_wavs_agent_client_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::wavs::agent::client);
        $($path_to_types_root)*::
        exports::wavs::agent::tools::__export_wavs_agent_tools_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::wavs::agent::tools);
    };
}
#[doc(inline)]
pub(crate) use __export_wavs_agent_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.35.0:wavs:agent:wavs-agent:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 8694] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf5B\x01A\x02\x01A#\x01\
B\x02\x01q\x0d\x03api\x01s\0\x04http\x01s\0\x10external-service\x01s\0\x06config\
\x01s\0\x08contract\x01s\0\x0dconfiguration\x01s\0\x0fcontext-loading\x01s\0\x12\
context-validation\x01s\0\x03llm\x01s\0\x02io\x01s\0\x0btransaction\x01s\0\x04ut\
f8\x01s\0\x05other\x01s\0\x04\0\x0bagent-error\x03\0\0\x03\0\x11wavs:agent/error\
s\x05\0\x01B\x16\x01ks\x01r\x03\x04name\0\x0bdescription\0\x0eparameter-type\0\x04\
\0\x12function-parameter\x03\0\x01\x01r\x03\x04names\x0bdescription\0\x0aparamet\
ers\0\x04\0\x08function\x03\0\x03\x01r\x02\x09tool-types\x08function\x04\x04\0\x04\
tool\x03\0\x05\x01r\x02\x04names\x09argumentss\x04\0\x12tool-call-function\x03\0\
\x07\x01r\x03\x02ids\x09tool-types\x08function\x08\x04\0\x09tool-call\x03\0\x09\x01\
p\x0a\x01k\x0b\x01r\x05\x04roles\x07content\0\x0atool-calls\x0c\x0ctool-call-id\0\
\x04name\0\x04\0\x07message\x03\0\x0d\x04\0\x13custom-tool-handler\x03\x01\x01h\x0f\
\x01@\x02\x04self\x10\x09tool-names\0\x7f\x04\0&[method]custom-tool-handler.can-\
handle\x01\x11\x01j\x01s\x01s\x01@\x02\x04self\x10\x09tool-call\x0a\0\x12\x04\0#\
[method]custom-tool-handler.execute\x01\x13\x03\0\x11wavs:agent/common\x05\x01\x02\
\x03\0\0\x0bagent-error\x01B%\x02\x03\x02\x01\x02\x04\0\x0bagent-error\x03\0\0\x01\
ks\x01r\x04\x04names\x07addresss\x03abis\x0bdescription\x02\x04\0\x08contract\x03\
\0\x03\x01ps\x01r\x02\x08functions\x04args\x05\x04\0\x0dcontract-call\x03\0\x06\x01\
k\x07\x01r\x05\x02tos\x05values\x0dcontract-call\x08\x04datas\x0bdescriptions\x04\
\0\x0btransaction\x03\0\x09\x04\0\x10contract-manager\x03\x01\x04\0\x13transacti\
on-manager\x03\x01\x01h\x0b\x01@\x04\x04self\x0d\x04names\x07addresss\x03abis\0\x04\
\x04\0\x1c[method]contract-manager.new\x01\x0e\x01@\x05\x04self\x0d\x04names\x07\
addresss\x03abis\x0bdescriptions\0\x04\x04\0-[method]contract-manager.new-with-d\
escription\x01\x0f\x01j\x01s\x01\x01\x01@\x02\x04self\x0d\x08contract\x04\0\x10\x04\
\0\"[method]contract-manager.parse-abi\x01\x11\x01p}\x01j\x01\x12\x01\x01\x01@\x04\
\x04self\x0d\x08contract\x04\x0dfunction-names\x04args\x05\0\x13\x04\0-[method]c\
ontract-manager.encode-function-call\x01\x14\x01@\x03\x04self\x0d\x08contract\x04\
\x0dfunction-names\0\x10\x04\0&[method]contract-manager.find-function\x01\x15\x01\
j\0\x01\x01\x01@\x04\x04self\x0d\x08contract\x04\x0dfunction-names\x04args\x05\0\
\x16\x04\0/[method]contract-manager.validate-function-call\x01\x17\x01h\x0c\x01@\
\x02\x04self\x18\x0btransaction\x0a\0\x7f\x04\0$[method]transaction-manager.is-v\
alid\x01\x19\x01@\x02\x04self\x18\x0btransaction\x0a\0\x16\x04\00[method]transac\
tion-manager.validate-transaction\x01\x1a\x01@\x02\x04self\x18\x0btransaction\x0a\
\0\x10\x04\02[method]transaction-manager.create-payload-from-tx\x01\x1b\x03\0\x14\
wavs:agent/contracts\x05\x03\x02\x03\0\x01\x07message\x02\x03\0\x02\x08contract\x01\
B2\x02\x03\x02\x01\x02\x04\0\x0bagent-error\x03\0\0\x02\x03\x02\x01\x04\x04\0\x07\
message\x03\0\x02\x02\x03\x02\x01\x05\x04\0\x08contract\x03\0\x04\x01ky\x01r\x05\
\x0btemperaturev\x05top-pv\x04seedy\x0amax-tokens\x06\x0econtext-window\x06\x04\0\
\x0bllm-options\x03\0\x07\x01p\x05\x01p\x03\x01o\x02ss\x01p\x0b\x01r\x05\x09cont\
racts\x09\x0allm-config\x08\x05models\x08messages\x0a\x06config\x0c\x04\0\x06con\
fig\x03\0\x0d\x04\0\x11llm-options-funcs\x03\x01\x04\0\x0econfig-manager\x03\x01\
\x01h\x0f\x01@\x01\x04self\x11\0\x08\x04\0\x1d[method]llm-options-funcs.new\x01\x12\
\x01@\x02\x04self\x11\x04tempv\0\x08\x04\0%[method]llm-options-funcs.temperature\
\x01\x13\x01@\x02\x04self\x11\x05top-pv\0\x08\x04\0\x1f[method]llm-options-funcs\
.top-p\x01\x14\x01@\x02\x04self\x11\x04seedy\0\x08\x04\0\x1e[method]llm-options-\
funcs.seed\x01\x15\x01@\x02\x04self\x11\x0amax-tokens\x06\0\x08\x04\0$[method]ll\
m-options-funcs.max-tokens\x01\x16\x01@\x02\x04self\x11\x0econtext-window\x06\0\x08\
\x04\0([method]llm-options-funcs.context-window\x01\x17\x01h\x10\x01j\x01\x0e\x01\
s\x01@\x01\x04self\x18\0\x19\x04\0\x1b[method]config-manager.load\x01\x1a\x01@\x02\
\x04self\x18\x03uris\0\x19\x04\0$[method]config-manager.load-from-uri\x01\x1b\x01\
j\x01\x0e\x01\x01\x01@\x02\x04self\x18\x04jsons\0\x1c\x04\0\x20[method]config-ma\
nager.from-json\x01\x1d\x01j\x01s\x01s\x01@\x01\x04self\x18\0\x1e\x04\0\x1e[meth\
od]config-manager.to-json\x01\x1f\x01@\x01\x04self\x18\0s\x04\03[method]config-m\
anager.format-contract-descriptions\x01\x20\x01k\x05\x01@\x02\x04self\x18\x04nam\
es\0!\x04\0+[method]config-manager.get-contract-by-name\x01\"\x01j\0\x01\x01\x01\
@\x01\x04self\x18\0#\x04\0\x1f[method]config-manager.validate\x01$\x03\0\x11wavs\
:agent/config\x05\x06\x02\x03\0\x01\x04tool\x02\x03\0\x01\x09tool-call\x02\x03\0\
\x01\x13custom-tool-handler\x02\x03\0\x02\x0btransaction\x02\x03\0\x03\x06config\
\x02\x03\0\x03\x0bllm-options\x01B/\x02\x03\x02\x01\x02\x04\0\x0bagent-error\x03\
\0\0\x02\x03\x02\x01\x04\x04\0\x07message\x03\0\x02\x02\x03\x02\x01\x07\x04\0\x04\
tool\x03\0\x04\x02\x03\x02\x01\x08\x04\0\x09tool-call\x03\0\x06\x02\x03\x02\x01\x09\
\x04\0\x13custom-tool-handler\x03\0\x08\x02\x03\x02\x01\x0a\x04\0\x0btransaction\
\x03\0\x0a\x02\x03\x02\x01\x0b\x04\0\x06config\x03\0\x0c\x02\x03\x02\x01\x0c\x04\
\0\x0bllm-options\x03\0\x0e\x01q\x02\x0btransaction\x01\x0b\0\x04text\x01s\0\x04\
\0\x0cllm-response\x03\0\x10\x04\0\x0allm-client\x03\x01\x01h\x12\x01i\x12\x01j\x01\
\x14\x01\x01\x01@\x02\x04self\x13\x05models\0\x15\x04\0\x16[method]llm-client.ne\
w\x01\x16\x01@\x03\x04self\x13\x05models\x0bjson-configs\0\x15\x04\0\x1c[method]\
llm-client.from-json\x01\x17\x01@\x03\x04self\x13\x05models\x06config\x0f\0\x15\x04\
\0\x1e[method]llm-client.with-config\x01\x18\x01@\x01\x04self\x13\0s\x04\0\x1c[m\
ethod]llm-client.get-model\x01\x19\x01@\x01\x04self\x13\0\x0f\x04\0\x1d[method]l\
lm-client.get-config\x01\x1a\x01p\x03\x01p\x05\x01k\x1c\x01j\x01\x03\x01\x01\x01\
@\x03\x04self\x13\x08messages\x1b\x05tools\x1d\0\x1e\x04\0\"[method]llm-client.c\
hat-completion\x01\x1f\x01j\x01s\x01\x01\x01@\x02\x04self\x13\x08messages\x1b\0\x20\
\x04\0'[method]llm-client.chat-completion-text\x01!\x01i\x09\x01p\"\x01k#\x01j\x01\
\x11\x01\x01\x01@\x05\x04self\x13\x06prompts\x06config\x0d\x0ccustom-tools\x1d\x0f\
custom-handlers$\0%\x04\0![method]llm-client.process-prompt\x01&\x03\0\x11wavs:a\
gent/client\x05\x0d\x02\x03\0\x04\x0allm-client\x02\x03\0\x01\x08function\x01B$\x02\
\x03\x02\x01\x0e\x04\0\x0allm-client\x03\0\0\x02\x03\x02\x01\x04\x04\0\x07messag\
e\x03\0\x02\x02\x03\x02\x01\x07\x04\0\x04tool\x03\0\x04\x02\x03\x02\x01\x08\x04\0\
\x09tool-call\x03\0\x06\x02\x03\x02\x01\x0f\x04\0\x08function\x03\0\x08\x02\x03\x02\
\x01\x09\x04\0\x13custom-tool-handler\x03\0\x0a\x02\x03\x02\x01\x05\x04\0\x08con\
tract\x03\0\x0c\x04\0\x0dtools-builder\x03\x01\x01h\x0e\x01@\x01\x04self\x0f\0\x05\
\x04\0#[method]tools-builder.send-eth-tool\x01\x10\x01p\x05\x01@\x02\x04self\x0f\
\x08contract\x0d\0\x11\x04\0)[method]tools-builder.tools-from-contract\x01\x12\x01\
@\x04\x04self\x0f\x04names\x0bdescriptions\x0aparameterss\0\x05\x04\0![method]to\
ols-builder.custom-tool\x01\x13\x01i\x0b\x01p\x14\x01k\x15\x01j\x01s\x01s\x01@\x03\
\x04self\x0f\x09tool-call\x07\x0fcustom-handlers\x16\0\x17\x04\0'[method]tools-b\
uilder.execute-tool-call\x01\x18\x01@\x02\x04self\x0f\x09tool-call\x07\0\x17\x04\
\0+[method]tools-builder.parse-eth-transaction\x01\x19\x01i\x01\x01p\x03\x01p\x07\
\x01@\x06\x04self\x0f\x06client\x1a\x10initial-messages\x1b\x08response\x03\x0at\
ool-calls\x1c\x0fcustom-handlers\x16\0\x17\x04\0([method]tools-builder.process-t\
ool-calls\x01\x1d\x03\0\x10wavs:agent/tools\x05\x10\x01B\x02\x01q\x0d\x03api\x01\
s\0\x04http\x01s\0\x10external-service\x01s\0\x06config\x01s\0\x08contract\x01s\0\
\x0dconfiguration\x01s\0\x0fcontext-loading\x01s\0\x12context-validation\x01s\0\x03\
llm\x01s\0\x02io\x01s\0\x0btransaction\x01s\0\x04utf8\x01s\0\x05other\x01s\0\x04\
\0\x0bagent-error\x03\0\0\x04\0\x11wavs:agent/errors\x05\x11\x01B\x16\x01ks\x01r\
\x03\x04name\0\x0bdescription\0\x0eparameter-type\0\x04\0\x12function-parameter\x03\
\0\x01\x01r\x03\x04names\x0bdescription\0\x0aparameters\0\x04\0\x08function\x03\0\
\x03\x01r\x02\x09tool-types\x08function\x04\x04\0\x04tool\x03\0\x05\x01r\x02\x04\
names\x09argumentss\x04\0\x12tool-call-function\x03\0\x07\x01r\x03\x02ids\x09too\
l-types\x08function\x08\x04\0\x09tool-call\x03\0\x09\x01p\x0a\x01k\x0b\x01r\x05\x04\
roles\x07content\0\x0atool-calls\x0c\x0ctool-call-id\0\x04name\0\x04\0\x07messag\
e\x03\0\x0d\x04\0\x13custom-tool-handler\x03\x01\x01h\x0f\x01@\x02\x04self\x10\x09\
tool-names\0\x7f\x04\0&[method]custom-tool-handler.can-handle\x01\x11\x01j\x01s\x01\
s\x01@\x02\x04self\x10\x09tool-call\x0a\0\x12\x04\0#[method]custom-tool-handler.\
execute\x01\x13\x04\0\x11wavs:agent/common\x05\x12\x01B%\x02\x03\x02\x01\x02\x04\
\0\x0bagent-error\x03\0\0\x01ks\x01r\x04\x04names\x07addresss\x03abis\x0bdescrip\
tion\x02\x04\0\x08contract\x03\0\x03\x01ps\x01r\x02\x08functions\x04args\x05\x04\
\0\x0dcontract-call\x03\0\x06\x01k\x07\x01r\x05\x02tos\x05values\x0dcontract-cal\
l\x08\x04datas\x0bdescriptions\x04\0\x0btransaction\x03\0\x09\x04\0\x10contract-\
manager\x03\x01\x04\0\x13transaction-manager\x03\x01\x01h\x0b\x01@\x04\x04self\x0d\
\x04names\x07addresss\x03abis\0\x04\x04\0\x1c[method]contract-manager.new\x01\x0e\
\x01@\x05\x04self\x0d\x04names\x07addresss\x03abis\x0bdescriptions\0\x04\x04\0-[\
method]contract-manager.new-with-description\x01\x0f\x01j\x01s\x01\x01\x01@\x02\x04\
self\x0d\x08contract\x04\0\x10\x04\0\"[method]contract-manager.parse-abi\x01\x11\
\x01p}\x01j\x01\x12\x01\x01\x01@\x04\x04self\x0d\x08contract\x04\x0dfunction-nam\
es\x04args\x05\0\x13\x04\0-[method]contract-manager.encode-function-call\x01\x14\
\x01@\x03\x04self\x0d\x08contract\x04\x0dfunction-names\0\x10\x04\0&[method]cont\
ract-manager.find-function\x01\x15\x01j\0\x01\x01\x01@\x04\x04self\x0d\x08contra\
ct\x04\x0dfunction-names\x04args\x05\0\x16\x04\0/[method]contract-manager.valida\
te-function-call\x01\x17\x01h\x0c\x01@\x02\x04self\x18\x0btransaction\x0a\0\x7f\x04\
\0$[method]transaction-manager.is-valid\x01\x19\x01@\x02\x04self\x18\x0btransact\
ion\x0a\0\x16\x04\00[method]transaction-manager.validate-transaction\x01\x1a\x01\
@\x02\x04self\x18\x0btransaction\x0a\0\x10\x04\02[method]transaction-manager.cre\
ate-payload-from-tx\x01\x1b\x04\0\x14wavs:agent/contracts\x05\x13\x01B2\x02\x03\x02\
\x01\x02\x04\0\x0bagent-error\x03\0\0\x02\x03\x02\x01\x04\x04\0\x07message\x03\0\
\x02\x02\x03\x02\x01\x05\x04\0\x08contract\x03\0\x04\x01ky\x01r\x05\x0btemperatu\
rev\x05top-pv\x04seedy\x0amax-tokens\x06\x0econtext-window\x06\x04\0\x0bllm-opti\
ons\x03\0\x07\x01p\x05\x01p\x03\x01o\x02ss\x01p\x0b\x01r\x05\x09contracts\x09\x0a\
llm-config\x08\x05models\x08messages\x0a\x06config\x0c\x04\0\x06config\x03\0\x0d\
\x04\0\x11llm-options-funcs\x03\x01\x04\0\x0econfig-manager\x03\x01\x01h\x0f\x01\
@\x01\x04self\x11\0\x08\x04\0\x1d[method]llm-options-funcs.new\x01\x12\x01@\x02\x04\
self\x11\x04tempv\0\x08\x04\0%[method]llm-options-funcs.temperature\x01\x13\x01@\
\x02\x04self\x11\x05top-pv\0\x08\x04\0\x1f[method]llm-options-funcs.top-p\x01\x14\
\x01@\x02\x04self\x11\x04seedy\0\x08\x04\0\x1e[method]llm-options-funcs.seed\x01\
\x15\x01@\x02\x04self\x11\x0amax-tokens\x06\0\x08\x04\0$[method]llm-options-func\
s.max-tokens\x01\x16\x01@\x02\x04self\x11\x0econtext-window\x06\0\x08\x04\0([met\
hod]llm-options-funcs.context-window\x01\x17\x01h\x10\x01j\x01\x0e\x01s\x01@\x01\
\x04self\x18\0\x19\x04\0\x1b[method]config-manager.load\x01\x1a\x01@\x02\x04self\
\x18\x03uris\0\x19\x04\0$[method]config-manager.load-from-uri\x01\x1b\x01j\x01\x0e\
\x01\x01\x01@\x02\x04self\x18\x04jsons\0\x1c\x04\0\x20[method]config-manager.fro\
m-json\x01\x1d\x01j\x01s\x01s\x01@\x01\x04self\x18\0\x1e\x04\0\x1e[method]config\
-manager.to-json\x01\x1f\x01@\x01\x04self\x18\0s\x04\03[method]config-manager.fo\
rmat-contract-descriptions\x01\x20\x01k\x05\x01@\x02\x04self\x18\x04names\0!\x04\
\0+[method]config-manager.get-contract-by-name\x01\"\x01j\0\x01\x01\x01@\x01\x04\
self\x18\0#\x04\0\x1f[method]config-manager.validate\x01$\x04\0\x11wavs:agent/co\
nfig\x05\x14\x01B/\x02\x03\x02\x01\x02\x04\0\x0bagent-error\x03\0\0\x02\x03\x02\x01\
\x04\x04\0\x07message\x03\0\x02\x02\x03\x02\x01\x07\x04\0\x04tool\x03\0\x04\x02\x03\
\x02\x01\x08\x04\0\x09tool-call\x03\0\x06\x02\x03\x02\x01\x09\x04\0\x13custom-to\
ol-handler\x03\0\x08\x02\x03\x02\x01\x0a\x04\0\x0btransaction\x03\0\x0a\x02\x03\x02\
\x01\x0b\x04\0\x06config\x03\0\x0c\x02\x03\x02\x01\x0c\x04\0\x0bllm-options\x03\0\
\x0e\x01q\x02\x0btransaction\x01\x0b\0\x04text\x01s\0\x04\0\x0cllm-response\x03\0\
\x10\x04\0\x0allm-client\x03\x01\x01h\x12\x01i\x12\x01j\x01\x14\x01\x01\x01@\x02\
\x04self\x13\x05models\0\x15\x04\0\x16[method]llm-client.new\x01\x16\x01@\x03\x04\
self\x13\x05models\x0bjson-configs\0\x15\x04\0\x1c[method]llm-client.from-json\x01\
\x17\x01@\x03\x04self\x13\x05models\x06config\x0f\0\x15\x04\0\x1e[method]llm-cli\
ent.with-config\x01\x18\x01@\x01\x04self\x13\0s\x04\0\x1c[method]llm-client.get-\
model\x01\x19\x01@\x01\x04self\x13\0\x0f\x04\0\x1d[method]llm-client.get-config\x01\
\x1a\x01p\x03\x01p\x05\x01k\x1c\x01j\x01\x03\x01\x01\x01@\x03\x04self\x13\x08mes\
sages\x1b\x05tools\x1d\0\x1e\x04\0\"[method]llm-client.chat-completion\x01\x1f\x01\
j\x01s\x01\x01\x01@\x02\x04self\x13\x08messages\x1b\0\x20\x04\0'[method]llm-clie\
nt.chat-completion-text\x01!\x01i\x09\x01p\"\x01k#\x01j\x01\x11\x01\x01\x01@\x05\
\x04self\x13\x06prompts\x06config\x0d\x0ccustom-tools\x1d\x0fcustom-handlers$\0%\
\x04\0![method]llm-client.process-prompt\x01&\x04\0\x11wavs:agent/client\x05\x15\
\x01B$\x02\x03\x02\x01\x0e\x04\0\x0allm-client\x03\0\0\x02\x03\x02\x01\x04\x04\0\
\x07message\x03\0\x02\x02\x03\x02\x01\x07\x04\0\x04tool\x03\0\x04\x02\x03\x02\x01\
\x08\x04\0\x09tool-call\x03\0\x06\x02\x03\x02\x01\x0f\x04\0\x08function\x03\0\x08\
\x02\x03\x02\x01\x09\x04\0\x13custom-tool-handler\x03\0\x0a\x02\x03\x02\x01\x05\x04\
\0\x08contract\x03\0\x0c\x04\0\x0dtools-builder\x03\x01\x01h\x0e\x01@\x01\x04sel\
f\x0f\0\x05\x04\0#[method]tools-builder.send-eth-tool\x01\x10\x01p\x05\x01@\x02\x04\
self\x0f\x08contract\x0d\0\x11\x04\0)[method]tools-builder.tools-from-contract\x01\
\x12\x01@\x04\x04self\x0f\x04names\x0bdescriptions\x0aparameterss\0\x05\x04\0![m\
ethod]tools-builder.custom-tool\x01\x13\x01i\x0b\x01p\x14\x01k\x15\x01j\x01s\x01\
s\x01@\x03\x04self\x0f\x09tool-call\x07\x0fcustom-handlers\x16\0\x17\x04\0'[meth\
od]tools-builder.execute-tool-call\x01\x18\x01@\x02\x04self\x0f\x09tool-call\x07\
\0\x17\x04\0+[method]tools-builder.parse-eth-transaction\x01\x19\x01i\x01\x01p\x03\
\x01p\x07\x01@\x06\x04self\x0f\x06client\x1a\x10initial-messages\x1b\x08response\
\x03\x0atool-calls\x1c\x0fcustom-handlers\x16\0\x17\x04\0([method]tools-builder.\
process-tool-calls\x01\x1d\x04\0\x10wavs:agent/tools\x05\x16\x04\0\x15wavs:agent\
/wavs-agent\x04\0\x0b\x10\x01\0\x0awavs-agent\x03\0\0\0G\x09producers\x01\x0cpro\
cessed-by\x02\x0dwit-component\x070.220.0\x10wit-bindgen-rust\x060.35.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
