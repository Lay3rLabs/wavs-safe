package wavs:agent@0.0.1;

interface config {
  use errors.{agent-error};
  use types.{message, config, llm-options, contract};

  /// Functions for manipulating LLM options
  resource llm-options-funcs {
    /// Create a new config with default values
    new: func() -> llm-options;

    /// Set temperature
    temperature: func(temp: f32) -> llm-options;

    /// Set top_p
    top-p: func(top-p: f32) -> llm-options;

    /// Set seed
    seed: func(seed: u32) -> llm-options;

    /// Set max tokens
    max-tokens: func(max-tokens: option<u32>) -> llm-options;

    /// Set context window size
    context-window: func(context-window: option<u32>) -> llm-options;
  }

  /// Configuration resource for loading and managing configuration
  resource config-manager {
    /// Load Config from environment variable CONFIG_URI or use default
    load: func() -> result<config, string>;

    /// Load Config from a URI
    load-from-uri: func(uri: string) -> result<config, string>;

    /// Load Config from JSON
    from-json: func(json: string) -> result<config, agent-error>;

    /// Serialize the Config to a JSON string
    to-json: func() -> result<string, string>;

    /// Format contract descriptions for the system prompt
    format-contract-descriptions: func() -> string;

    /// Get a smart contract by name
    get-contract-by-name: func(name: string) -> option<contract>;

    /// Validate the Config for required fields and logical consistency
    validate: func() -> result<_, agent-error>;
  }
}
