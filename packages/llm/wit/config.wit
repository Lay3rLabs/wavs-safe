package wavs:agent;

interface config {
  use errors.{agent-error};
  use common.{message};
  use contracts.{contract};

  /// Configuration options for LLM API requests
  record llm-options {
    /// Temperature controls randomness (0.0-2.0)
    temperature: f32,
    /// Top_p controls diversity (0.0-1.0)
    top-p: f32,
    /// Seed for deterministic outputs
    seed: u32,
    /// Maximum tokens to generate
    max-tokens: option<u32>,
    /// Context window size (mainly for Ollama)
    context-window: option<u32>,
  }

  /// Generic configuration for agent's decision making
  record config {
    contracts: list<contract>,
    llm-config: llm-options,
    model: string,
    messages: list<message>,
    /// Any global configuration values
    config: list<tuple<string, string>>,
  }

  /// Functions for manipulating LLM options
  resource llm-options-funcs {
    /// Create a new config with default values
    new: func() -> llm-options;

    /// Set temperature
    temperature: func(temp: f32) -> llm-options;

    /// Set top_p
    top-p: func(top-p: f32) -> llm-options;

    /// Set seed
    seed: func(seed: u32) -> llm-options;

    /// Set max tokens
    max-tokens: func(max-tokens: option<u32>) -> llm-options;

    /// Set context window size
    context-window: func(context-window: option<u32>) -> llm-options;
  }

  /// Configuration resource for loading and managing configuration
  resource config-manager {
    /// Load Config from environment variable CONFIG_URI or use default
    load: func() -> result<config, string>;

    /// Load Config from a URI
    load-from-uri: func(uri: string) -> result<config, string>;

    /// Load Config from JSON
    from-json: func(json: string) -> result<config, agent-error>;

    /// Serialize the Config to a JSON string
    to-json: func() -> result<string, string>;

    /// Format contract descriptions for the system prompt
    format-contract-descriptions: func() -> string;

    /// Get a smart contract by name
    get-contract-by-name: func(name: string) -> option<contract>;

    /// Validate the Config for required fields and logical consistency
    validate: func() -> result<_, agent-error>;
  }
}
